/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.company.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-20")
public class TalentpoolServices {

    public interface Iface {

        public com.moseeker.thrift.gen.common.struct.Response upsertTalentPoolApp(int hrId, int companyId, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getHrTag(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrAddTag(int hr_id, int company_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrDelTag(int hr_id, int company_id, int tag_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrDelComment(int hr_id, int company_id, int comment_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentStat(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyUserPublic(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyTalent(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getHrUserTag(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getUserOrigin(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPositionOrCompanyPast(int company_id, int type, int flag) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyTagList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response deleteCompanyTagByIds(int hr_id, int company_id, java.util.List<java.lang.Integer> company_tag_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyIdInfo(int hr_id, int company_id, int company_tag_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response addCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updateCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentTagList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getProfileFilterList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getProfileFilterInfo(int hr_id, int company_id, int filter_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentCountByPositionFilter(int hr_id, int company_id, int position_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getEmailBalance(int hr_id, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getEmailTemplateList(int hr_id, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getEmailInfo(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void upsertTalentPoolApp(int hrId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getHrTag(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrAddTag(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrDelTag(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrDelComment(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTalentStat(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyUserPublic(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyTalent(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getHrUserTag(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getUserOrigin(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPositionOrCompanyPast(int company_id, int type, int flag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyTagList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void deleteCompanyTagByIds(int hr_id, int company_id, java.util.List<java.lang.Integer> company_tag_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyIdInfo(int hr_id, int company_id, int company_tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void addCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updateCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTalentTagList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getProfileFilterList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getProfileFilterInfo(int hr_id, int company_id, int filter_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void getTalentCountByPositionFilter(int hr_id, int company_id, int position_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getEmailBalance(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getEmailTemplateList(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getEmailInfo(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public com.moseeker.thrift.gen.common.struct.Response upsertTalentPoolApp(int hrId, int companyId, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_upsertTalentPoolApp(hrId, companyId, type);
            return recv_upsertTalentPoolApp();
        }

        public void send_upsertTalentPoolApp(int hrId, int companyId, int type) throws org.apache.thrift.TException
        {
            upsertTalentPoolApp_args args = new upsertTalentPoolApp_args();
            args.setHrId(hrId);
            args.setCompanyId(companyId);
            args.setType(type);
            sendBase("upsertTalentPoolApp", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_upsertTalentPoolApp() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            upsertTalentPoolApp_result result = new upsertTalentPoolApp_result();
            receiveBase(result, "upsertTalentPoolApp");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "upsertTalentPoolApp failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentAllComment(hr_id, company_id, user_id, page_number, page_size);
            return recv_getTalentAllComment();
        }

        public void send_getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getTalentAllComment_args args = new getTalentAllComment_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getTalentAllComment", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentAllComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentAllComment_result result = new getTalentAllComment_result();
            receiveBase(result, "getTalentAllComment");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentAllComment failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getHrTag(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getHrTag(hr_id, company_id, page_number, page_size);
            return recv_getHrTag();
        }

        public void send_getHrTag(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getHrTag_args args = new getHrTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getHrTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getHrTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getHrTag_result result = new getHrTag_result();
            receiveBase(result, "getHrTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHrTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchAddTalent(hr_id, user_ids, company_id);
            return recv_batchAddTalent();
        }

        public void send_batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws org.apache.thrift.TException
        {
            batchAddTalent_args args = new batchAddTalent_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setCompany_id(company_id);
            sendBase("batchAddTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchAddTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchAddTalent_result result = new batchAddTalent_result();
            receiveBase(result, "batchAddTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchCancelTalent(hr_id, user_ids, company_id);
            return recv_batchCancelTalent();
        }

        public void send_batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws org.apache.thrift.TException
        {
            batchCancelTalent_args args = new batchCancelTalent_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setCompany_id(company_id);
            sendBase("batchCancelTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchCancelTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchCancelTalent_result result = new batchCancelTalent_result();
            receiveBase(result, "batchCancelTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancelTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrAddTag(int hr_id, int company_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrAddTag(hr_id, company_id, name);
            return recv_hrAddTag();
        }

        public void send_hrAddTag(int hr_id, int company_id, java.lang.String name) throws org.apache.thrift.TException
        {
            hrAddTag_args args = new hrAddTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setName(name);
            sendBase("hrAddTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrAddTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrAddTag_result result = new hrAddTag_result();
            receiveBase(result, "hrAddTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrAddTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrDelTag(int hr_id, int company_id, int tag_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrDelTag(hr_id, company_id, tag_id);
            return recv_hrDelTag();
        }

        public void send_hrDelTag(int hr_id, int company_id, int tag_id) throws org.apache.thrift.TException
        {
            hrDelTag_args args = new hrDelTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setTag_id(tag_id);
            sendBase("hrDelTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrDelTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrDelTag_result result = new hrDelTag_result();
            receiveBase(result, "hrDelTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrDelTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrUpdateTag(hr_id, company_id, tag_id, name);
            return recv_hrUpdateTag();
        }

        public void send_hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws org.apache.thrift.TException
        {
            hrUpdateTag_args args = new hrUpdateTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setTag_id(tag_id);
            args.setName(name);
            sendBase("hrUpdateTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrUpdateTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrUpdateTag_result result = new hrUpdateTag_result();
            receiveBase(result, "hrUpdateTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrUpdateTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchCancleTalentTag(hr_id, user_ids, tag_ids, company_id);
            return recv_batchCancleTalentTag();
        }

        public void send_batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
        {
            batchCancleTalentTag_args args = new batchCancleTalentTag_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setTag_ids(tag_ids);
            args.setCompany_id(company_id);
            sendBase("batchCancleTalentTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchCancleTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchCancleTalentTag_result result = new batchCancleTalentTag_result();
            receiveBase(result, "batchCancleTalentTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancleTalentTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchAddTalentTag(hr_id, user_ids, tag_ids, company_id);
            return recv_batchAddTalentTag();
        }

        public void send_batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
        {
            batchAddTalentTag_args args = new batchAddTalentTag_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setTag_ids(tag_ids);
            args.setCompany_id(company_id);
            sendBase("batchAddTalentTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchAddTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchAddTalentTag_result result = new batchAddTalentTag_result();
            receiveBase(result, "batchAddTalentTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddTalentTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrAddComment(hr_id, company_id, user_id, content);
            return recv_hrAddComment();
        }

        public void send_hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws org.apache.thrift.TException
        {
            hrAddComment_args args = new hrAddComment_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            args.setContent(content);
            sendBase("hrAddComment", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrAddComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrAddComment_result result = new hrAddComment_result();
            receiveBase(result, "hrAddComment");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrAddComment failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrDelComment(int hr_id, int company_id, int comment_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrDelComment(hr_id, company_id, comment_id);
            return recv_hrDelComment();
        }

        public void send_hrDelComment(int hr_id, int company_id, int comment_id) throws org.apache.thrift.TException
        {
            hrDelComment_args args = new hrDelComment_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setComment_id(comment_id);
            sendBase("hrDelComment", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrDelComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrDelComment_result result = new hrDelComment_result();
            receiveBase(result, "hrDelComment");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrDelComment failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchAddPublicTalent(hr_id, company_id, user_ids);
            return recv_batchAddPublicTalent();
        }

        public void send_batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws org.apache.thrift.TException
        {
            batchAddPublicTalent_args args = new batchAddPublicTalent_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_ids(user_ids);
            sendBase("batchAddPublicTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchAddPublicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchAddPublicTalent_result result = new batchAddPublicTalent_result();
            receiveBase(result, "batchAddPublicTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddPublicTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchCancelPublicTalent(hr_id, company_id, user_ids);
            return recv_batchCancelPublicTalent();
        }

        public void send_batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws org.apache.thrift.TException
        {
            batchCancelPublicTalent_args args = new batchCancelPublicTalent_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_ids(user_ids);
            sendBase("batchCancelPublicTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchCancelPublicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
            receiveBase(result, "batchCancelPublicTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancelPublicTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyPulicTalent(hr_id, company_id, page_number, page_size);
            return recv_getCompanyPulicTalent();
        }

        public void send_getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getCompanyPulicTalent_args args = new getCompanyPulicTalent_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getCompanyPulicTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyPulicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
            receiveBase(result, "getCompanyPulicTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyPulicTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchNewAddTalentTag(hr_id, user_ids, tag_ids, company_id);
            return recv_batchNewAddTalentTag();
        }

        public void send_batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
        {
            batchNewAddTalentTag_args args = new batchNewAddTalentTag_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setTag_ids(tag_ids);
            args.setCompany_id(company_id);
            sendBase("batchNewAddTalentTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchNewAddTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
            receiveBase(result, "batchNewAddTalentTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchNewAddTalentTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentStat(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentStat(hr_id, company_id, type);
            return recv_getTalentStat();
        }

        public void send_getTalentStat(int hr_id, int company_id, int type) throws org.apache.thrift.TException
        {
            getTalentStat_args args = new getTalentStat_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setType(type);
            sendBase("getTalentStat", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentStat() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentStat_result result = new getTalentStat_result();
            receiveBase(result, "getTalentStat");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentStat failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyUserPublic(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyUserPublic(hr_id, company_id, user_id);
            return recv_getCompanyUserPublic();
        }

        public void send_getCompanyUserPublic(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
        {
            getCompanyUserPublic_args args = new getCompanyUserPublic_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            sendBase("getCompanyUserPublic", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyUserPublic() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyUserPublic_result result = new getCompanyUserPublic_result();
            receiveBase(result, "getCompanyUserPublic");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyUserPublic failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyTalent(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyTalent(hr_id, company_id, user_id);
            return recv_getCompanyTalent();
        }

        public void send_getCompanyTalent(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
        {
            getCompanyTalent_args args = new getCompanyTalent_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            sendBase("getCompanyTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyTalent_result result = new getCompanyTalent_result();
            receiveBase(result, "getCompanyTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getHrUserTag(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getHrUserTag(hr_id, company_id, user_id);
            return recv_getHrUserTag();
        }

        public void send_getHrUserTag(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
        {
            getHrUserTag_args args = new getHrUserTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            sendBase("getHrUserTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getHrUserTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getHrUserTag_result result = new getHrUserTag_result();
            receiveBase(result, "getHrUserTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHrUserTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getUserOrigin(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getUserOrigin(hr_id, company_id, user_id);
            return recv_getUserOrigin();
        }

        public void send_getUserOrigin(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
        {
            getUserOrigin_args args = new getUserOrigin_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            sendBase("getUserOrigin", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getUserOrigin() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getUserOrigin_result result = new getUserOrigin_result();
            receiveBase(result, "getUserOrigin");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserOrigin failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentAndPublicHr(hr_id, company_id, user_ids);
            return recv_getTalentAndPublicHr();
        }

        public void send_getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws org.apache.thrift.TException
        {
            getTalentAndPublicHr_args args = new getTalentAndPublicHr_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_ids(user_ids);
            sendBase("getTalentAndPublicHr", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentAndPublicHr() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentAndPublicHr_result result = new getTalentAndPublicHr_result();
            receiveBase(result, "getTalentAndPublicHr");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentAndPublicHr failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPositionOrCompanyPast(int company_id, int type, int flag) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getPositionOrCompanyPast(company_id, type, flag);
            return recv_getPositionOrCompanyPast();
        }

        public void send_getPositionOrCompanyPast(int company_id, int type, int flag) throws org.apache.thrift.TException
        {
            getPositionOrCompanyPast_args args = new getPositionOrCompanyPast_args();
            args.setCompany_id(company_id);
            args.setType(type);
            args.setFlag(flag);
            sendBase("getPositionOrCompanyPast", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPositionOrCompanyPast() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getPositionOrCompanyPast_result result = new getPositionOrCompanyPast_result();
            receiveBase(result, "getPositionOrCompanyPast");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionOrCompanyPast failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addPositionOrCompanyPast(company_id, type, flag, name);
            return recv_addPositionOrCompanyPast();
        }

        public void send_addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name) throws org.apache.thrift.TException
        {
            addPositionOrCompanyPast_args args = new addPositionOrCompanyPast_args();
            args.setCompany_id(company_id);
            args.setType(type);
            args.setFlag(flag);
            args.setName(name);
            sendBase("addPositionOrCompanyPast", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_addPositionOrCompanyPast() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addPositionOrCompanyPast_result result = new addPositionOrCompanyPast_result();
            receiveBase(result, "addPositionOrCompanyPast");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPositionOrCompanyPast failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyTagList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyTagList(hr_id, company_id, page_number, page_size);
            return recv_getCompanyTagList();
        }

        public void send_getCompanyTagList(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getCompanyTagList_args args = new getCompanyTagList_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getCompanyTagList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyTagList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyTagList_result result = new getCompanyTagList_result();
            receiveBase(result, "getCompanyTagList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyTagList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response deleteCompanyTagByIds(int hr_id, int company_id, java.util.List<java.lang.Integer> company_tag_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_deleteCompanyTagByIds(hr_id, company_id, company_tag_ids);
            return recv_deleteCompanyTagByIds();
        }

        public void send_deleteCompanyTagByIds(int hr_id, int company_id, java.util.List<java.lang.Integer> company_tag_ids) throws org.apache.thrift.TException
        {
            deleteCompanyTagByIds_args args = new deleteCompanyTagByIds_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setCompany_tag_ids(company_tag_ids);
            sendBase("deleteCompanyTagByIds", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_deleteCompanyTagByIds() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            deleteCompanyTagByIds_result result = new deleteCompanyTagByIds_result();
            receiveBase(result, "deleteCompanyTagByIds");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteCompanyTagByIds failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyIdInfo(int hr_id, int company_id, int company_tag_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyIdInfo(hr_id, company_id, company_tag_id);
            return recv_getCompanyIdInfo();
        }

        public void send_getCompanyIdInfo(int hr_id, int company_id, int company_tag_id) throws org.apache.thrift.TException
        {
            getCompanyIdInfo_args args = new getCompanyIdInfo_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setCompany_tag_id(company_tag_id);
            sendBase("getCompanyIdInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyIdInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyIdInfo_result result = new getCompanyIdInfo_result();
            receiveBase(result, "getCompanyIdInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyIdInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response addCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addCompanyTag(companyTagDO, hr_id);
            return recv_addCompanyTag();
        }

        public void send_addCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id) throws org.apache.thrift.TException
        {
            addCompanyTag_args args = new addCompanyTag_args();
            args.setCompanyTagDO(companyTagDO);
            args.setHr_id(hr_id);
            sendBase("addCompanyTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_addCompanyTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addCompanyTag_result result = new addCompanyTag_result();
            receiveBase(result, "addCompanyTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCompanyTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updateCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateCompanyTag(companyTagDO, hr_id);
            return recv_updateCompanyTag();
        }

        public void send_updateCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id) throws org.apache.thrift.TException
        {
            updateCompanyTag_args args = new updateCompanyTag_args();
            args.setCompanyTagDO(companyTagDO);
            args.setHr_id(hr_id);
            sendBase("updateCompanyTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updateCompanyTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateCompanyTag_result result = new updateCompanyTag_result();
            receiveBase(result, "updateCompanyTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCompanyTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentTagList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentTagList(hr_id, company_id, page_number, page_size);
            return recv_getTalentTagList();
        }

        public void send_getTalentTagList(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getTalentTagList_args args = new getTalentTagList_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getTalentTagList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentTagList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentTagList_result result = new getTalentTagList_result();
            receiveBase(result, "getTalentTagList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentTagList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getProfileFilterList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getProfileFilterList(hr_id, company_id, page_number, page_size);
            return recv_getProfileFilterList();
        }

        public void send_getProfileFilterList(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getProfileFilterList_args args = new getProfileFilterList_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getProfileFilterList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getProfileFilterList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getProfileFilterList_result result = new getProfileFilterList_result();
            receiveBase(result, "getProfileFilterList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileFilterList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_handerProfileFilterByIds(hr_id, company_id, disable, filter_ids);
            return recv_handerProfileFilterByIds();
        }

        public void send_handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids) throws org.apache.thrift.TException
        {
            handerProfileFilterByIds_args args = new handerProfileFilterByIds_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setDisable(disable);
            args.setFilter_ids(filter_ids);
            sendBase("handerProfileFilterByIds", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_handerProfileFilterByIds() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            handerProfileFilterByIds_result result = new handerProfileFilterByIds_result();
            receiveBase(result, "handerProfileFilterByIds");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "handerProfileFilterByIds failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getProfileFilterInfo(int hr_id, int company_id, int filter_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getProfileFilterInfo(hr_id, company_id, filter_id);
            return recv_getProfileFilterInfo();
        }

        public void send_getProfileFilterInfo(int hr_id, int company_id, int filter_id) throws org.apache.thrift.TException
        {
            getProfileFilterInfo_args args = new getProfileFilterInfo_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setFilter_id(filter_id);
            sendBase("getProfileFilterInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getProfileFilterInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getProfileFilterInfo_result result = new getProfileFilterInfo_result();
            receiveBase(result, "getProfileFilterInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileFilterInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addProfileFilter(companyTagDO, actionForm, positionIdList, hr_id, position_total);
            return recv_addProfileFilter();
        }

        public void send_addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws org.apache.thrift.TException
        {
            addProfileFilter_args args = new addProfileFilter_args();
            args.setCompanyTagDO(companyTagDO);
            args.setActionForm(actionForm);
            args.setPositionIdList(positionIdList);
            args.setHr_id(hr_id);
            args.setPosition_total(position_total);
            sendBase("addProfileFilter", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_addProfileFilter() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addProfileFilter_result result = new addProfileFilter_result();
            receiveBase(result, "addProfileFilter");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProfileFilter failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateProfileFilter(companyTagDO, actionForm, positionIdList, hr_id, position_total);
            return recv_updateProfileFilter();
        }

        public void send_updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws org.apache.thrift.TException
        {
            updateProfileFilter_args args = new updateProfileFilter_args();
            args.setCompanyTagDO(companyTagDO);
            args.setActionForm(actionForm);
            args.setPositionIdList(positionIdList);
            args.setHr_id(hr_id);
            args.setPosition_total(position_total);
            sendBase("updateProfileFilter", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updateProfileFilter() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateProfileFilter_result result = new updateProfileFilter_result();
            receiveBase(result, "updateProfileFilter");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProfileFilter failed: unknown result");
        }

        public void handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_handlerCompanyTagAndProfile(userid_list, company_id);
            recv_handlerCompanyTagAndProfile();
        }

        public void send_handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id) throws org.apache.thrift.TException
        {
            handlerCompanyTagAndProfile_args args = new handlerCompanyTagAndProfile_args();
            args.setUserid_list(userid_list);
            args.setCompany_id(company_id);
            sendBase("handlerCompanyTagAndProfile", args);
        }

        public void recv_handlerCompanyTagAndProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            handlerCompanyTagAndProfile_result result = new handlerCompanyTagAndProfile_result();
            receiveBase(result, "handlerCompanyTagAndProfile");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentCountByPositionFilter(int hr_id, int company_id, int position_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentCountByPositionFilter(hr_id, company_id, position_id);
            return recv_getTalentCountByPositionFilter();
        }

        public void send_getTalentCountByPositionFilter(int hr_id, int company_id, int position_id) throws org.apache.thrift.TException
        {
            getTalentCountByPositionFilter_args args = new getTalentCountByPositionFilter_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPosition_id(position_id);
            sendBase("getTalentCountByPositionFilter", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentCountByPositionFilter() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentCountByPositionFilter_result result = new getTalentCountByPositionFilter_result();
            receiveBase(result, "getTalentCountByPositionFilter");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentCountByPositionFilter failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getEmailBalance(int hr_id, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getEmailBalance(hr_id, company_id);
            return recv_getEmailBalance();
        }

        public void send_getEmailBalance(int hr_id, int company_id) throws org.apache.thrift.TException
        {
            getEmailBalance_args args = new getEmailBalance_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            sendBase("getEmailBalance", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getEmailBalance() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getEmailBalance_result result = new getEmailBalance_result();
            receiveBase(result, "getEmailBalance");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmailBalance failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getEmailTemplateList(int hr_id, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getEmailTemplateList(hr_id, company_id);
            return recv_getEmailTemplateList();
        }

        public void send_getEmailTemplateList(int hr_id, int company_id) throws org.apache.thrift.TException
        {
            getEmailTemplateList_args args = new getEmailTemplateList_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            sendBase("getEmailTemplateList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getEmailTemplateList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getEmailTemplateList_result result = new getEmailTemplateList_result();
            receiveBase(result, "getEmailTemplateList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmailTemplateList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getEmailInfo(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getEmailInfo(hr_id, company_id, type);
            return recv_getEmailInfo();
        }

        public void send_getEmailInfo(int hr_id, int company_id, int type) throws org.apache.thrift.TException
        {
            getEmailInfo_args args = new getEmailInfo_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setType(type);
            sendBase("getEmailInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getEmailInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getEmailInfo_result result = new getEmailInfo_result();
            receiveBase(result, "getEmailInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmailInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateCompanyEmailInfo(hr_id, company_id, type, disable, context, inscribe);
            return recv_updateCompanyEmailInfo();
        }

        public void send_updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe) throws org.apache.thrift.TException
        {
            updateCompanyEmailInfo_args args = new updateCompanyEmailInfo_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setType(type);
            args.setDisable(disable);
            args.setContext(context);
            args.setInscribe(inscribe);
            sendBase("updateCompanyEmailInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updateCompanyEmailInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateCompanyEmailInfo_result result = new updateCompanyEmailInfo_result();
            receiveBase(result, "updateCompanyEmailInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCompanyEmailInfo failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void upsertTalentPoolApp(int hrId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            upsertTalentPoolApp_call method_call = new upsertTalentPoolApp_call(hrId, companyId, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class upsertTalentPoolApp_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hrId;
            private int companyId;
            private int type;
            public upsertTalentPoolApp_call(int hrId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.companyId = companyId;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upsertTalentPoolApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
                upsertTalentPoolApp_args args = new upsertTalentPoolApp_args();
                args.setHrId(hrId);
                args.setCompanyId(companyId);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_upsertTalentPoolApp();
            }
        }

        public void getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentAllComment_call method_call = new getTalentAllComment_call(hr_id, company_id, user_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentAllComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            private int page_number;
            private int page_size;
            public getTalentAllComment_call(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentAllComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentAllComment_args args = new getTalentAllComment_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentAllComment();
            }
        }

        public void getHrTag(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getHrTag_call method_call = new getHrTag_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getHrTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getHrTag_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHrTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getHrTag_args args = new getHrTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getHrTag();
            }
        }

        public void batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchAddTalent_call method_call = new batchAddTalent_call(hr_id, user_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchAddTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private int company_id;
            public batchAddTalent_call(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchAddTalent_args args = new batchAddTalent_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchAddTalent();
            }
        }

        public void batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchCancelTalent_call method_call = new batchCancelTalent_call(hr_id, user_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchCancelTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private int company_id;
            public batchCancelTalent_call(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancelTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchCancelTalent_args args = new batchCancelTalent_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchCancelTalent();
            }
        }

        public void hrAddTag(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrAddTag_call method_call = new hrAddTag_call(hr_id, company_id, name, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrAddTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.lang.String name;
            public hrAddTag_call(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrAddTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrAddTag_args args = new hrAddTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrAddTag();
            }
        }

        public void hrDelTag(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrDelTag_call method_call = new hrDelTag_call(hr_id, company_id, tag_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrDelTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int tag_id;
            public hrDelTag_call(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.tag_id = tag_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrDelTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrDelTag_args args = new hrDelTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setTag_id(tag_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrDelTag();
            }
        }

        public void hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrUpdateTag_call method_call = new hrUpdateTag_call(hr_id, company_id, tag_id, name, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrUpdateTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int tag_id;
            private java.lang.String name;
            public hrUpdateTag_call(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.tag_id = tag_id;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrUpdateTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrUpdateTag_args args = new hrUpdateTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setTag_id(tag_id);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrUpdateTag();
            }
        }

        public void batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchCancleTalentTag_call method_call = new batchCancleTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchCancleTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private java.util.List<java.lang.Integer> tag_ids;
            private int company_id;
            public batchCancleTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.tag_ids = tag_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancleTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchCancleTalentTag_args args = new batchCancleTalentTag_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setTag_ids(tag_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchCancleTalentTag();
            }
        }

        public void batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchAddTalentTag_call method_call = new batchAddTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchAddTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private java.util.List<java.lang.Integer> tag_ids;
            private int company_id;
            public batchAddTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.tag_ids = tag_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchAddTalentTag_args args = new batchAddTalentTag_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setTag_ids(tag_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchAddTalentTag();
            }
        }

        public void hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrAddComment_call method_call = new hrAddComment_call(hr_id, company_id, user_id, content, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrAddComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            private java.lang.String content;
            public hrAddComment_call(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
                this.content = content;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrAddComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrAddComment_args args = new hrAddComment_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.setContent(content);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrAddComment();
            }
        }

        public void hrDelComment(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrDelComment_call method_call = new hrDelComment_call(hr_id, company_id, comment_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrDelComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int comment_id;
            public hrDelComment_call(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.comment_id = comment_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrDelComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrDelComment_args args = new hrDelComment_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setComment_id(comment_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrDelComment();
            }
        }

        public void batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchAddPublicTalent_call method_call = new batchAddPublicTalent_call(hr_id, company_id, user_ids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchAddPublicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.util.List<java.lang.Integer> user_ids;
            public batchAddPublicTalent_call(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_ids = user_ids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddPublicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchAddPublicTalent_args args = new batchAddPublicTalent_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_ids(user_ids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchAddPublicTalent();
            }
        }

        public void batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchCancelPublicTalent_call method_call = new batchCancelPublicTalent_call(hr_id, company_id, user_ids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchCancelPublicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.util.List<java.lang.Integer> user_ids;
            public batchCancelPublicTalent_call(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_ids = user_ids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancelPublicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchCancelPublicTalent_args args = new batchCancelPublicTalent_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_ids(user_ids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchCancelPublicTalent();
            }
        }

        public void getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyPulicTalent_call method_call = new getCompanyPulicTalent_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyPulicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getCompanyPulicTalent_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyPulicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyPulicTalent_args args = new getCompanyPulicTalent_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyPulicTalent();
            }
        }

        public void batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchNewAddTalentTag_call method_call = new batchNewAddTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchNewAddTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private java.util.List<java.lang.Integer> tag_ids;
            private int company_id;
            public batchNewAddTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.tag_ids = tag_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchNewAddTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchNewAddTalentTag_args args = new batchNewAddTalentTag_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setTag_ids(tag_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchNewAddTalentTag();
            }
        }

        public void getTalentStat(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentStat_call method_call = new getTalentStat_call(hr_id, company_id, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentStat_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int type;
            public getTalentStat_call(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentStat_args args = new getTalentStat_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentStat();
            }
        }

        public void getCompanyUserPublic(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyUserPublic_call method_call = new getCompanyUserPublic_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyUserPublic_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            public getCompanyUserPublic_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyUserPublic", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyUserPublic_args args = new getCompanyUserPublic_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyUserPublic();
            }
        }

        public void getCompanyTalent(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyTalent_call method_call = new getCompanyTalent_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            public getCompanyTalent_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyTalent_args args = new getCompanyTalent_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyTalent();
            }
        }

        public void getHrUserTag(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getHrUserTag_call method_call = new getHrUserTag_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getHrUserTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            public getHrUserTag_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHrUserTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getHrUserTag_args args = new getHrUserTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getHrUserTag();
            }
        }

        public void getUserOrigin(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getUserOrigin_call method_call = new getUserOrigin_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getUserOrigin_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            public getUserOrigin_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserOrigin", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getUserOrigin_args args = new getUserOrigin_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getUserOrigin();
            }
        }

        public void getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentAndPublicHr_call method_call = new getTalentAndPublicHr_call(hr_id, company_id, user_ids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentAndPublicHr_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.util.List<java.lang.Integer> user_ids;
            public getTalentAndPublicHr_call(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_ids = user_ids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentAndPublicHr", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentAndPublicHr_args args = new getTalentAndPublicHr_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_ids(user_ids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentAndPublicHr();
            }
        }

        public void getPositionOrCompanyPast(int company_id, int type, int flag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionOrCompanyPast_call method_call = new getPositionOrCompanyPast_call(company_id, type, flag, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionOrCompanyPast_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int company_id;
            private int type;
            private int flag;
            public getPositionOrCompanyPast_call(int company_id, int type, int flag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.company_id = company_id;
                this.type = type;
                this.flag = flag;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionOrCompanyPast", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionOrCompanyPast_args args = new getPositionOrCompanyPast_args();
                args.setCompany_id(company_id);
                args.setType(type);
                args.setFlag(flag);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionOrCompanyPast();
            }
        }

        public void addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addPositionOrCompanyPast_call method_call = new addPositionOrCompanyPast_call(company_id, type, flag, name, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addPositionOrCompanyPast_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int company_id;
            private int type;
            private int flag;
            private java.lang.String name;
            public addPositionOrCompanyPast_call(int company_id, int type, int flag, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.company_id = company_id;
                this.type = type;
                this.flag = flag;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPositionOrCompanyPast", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addPositionOrCompanyPast_args args = new addPositionOrCompanyPast_args();
                args.setCompany_id(company_id);
                args.setType(type);
                args.setFlag(flag);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addPositionOrCompanyPast();
            }
        }

        public void getCompanyTagList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyTagList_call method_call = new getCompanyTagList_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyTagList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getCompanyTagList_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyTagList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyTagList_args args = new getCompanyTagList_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyTagList();
            }
        }

        public void deleteCompanyTagByIds(int hr_id, int company_id, java.util.List<java.lang.Integer> company_tag_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteCompanyTagByIds_call method_call = new deleteCompanyTagByIds_call(hr_id, company_id, company_tag_ids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteCompanyTagByIds_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.util.List<java.lang.Integer> company_tag_ids;
            public deleteCompanyTagByIds_call(int hr_id, int company_id, java.util.List<java.lang.Integer> company_tag_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.company_tag_ids = company_tag_ids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCompanyTagByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteCompanyTagByIds_args args = new deleteCompanyTagByIds_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setCompany_tag_ids(company_tag_ids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteCompanyTagByIds();
            }
        }

        public void getCompanyIdInfo(int hr_id, int company_id, int company_tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyIdInfo_call method_call = new getCompanyIdInfo_call(hr_id, company_id, company_tag_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyIdInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int company_tag_id;
            public getCompanyIdInfo_call(int hr_id, int company_id, int company_tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.company_tag_id = company_tag_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyIdInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyIdInfo_args args = new getCompanyIdInfo_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setCompany_tag_id(company_tag_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyIdInfo();
            }
        }

        public void addCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addCompanyTag_call method_call = new addCompanyTag_call(companyTagDO, hr_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addCompanyTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO;
            private int hr_id;
            public addCompanyTag_call(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyTagDO = companyTagDO;
                this.hr_id = hr_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCompanyTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addCompanyTag_args args = new addCompanyTag_args();
                args.setCompanyTagDO(companyTagDO);
                args.setHr_id(hr_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addCompanyTag();
            }
        }

        public void updateCompanyTag(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateCompanyTag_call method_call = new updateCompanyTag_call(companyTagDO, hr_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateCompanyTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO;
            private int hr_id;
            public updateCompanyTag_call(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, int hr_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyTagDO = companyTagDO;
                this.hr_id = hr_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCompanyTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateCompanyTag_args args = new updateCompanyTag_args();
                args.setCompanyTagDO(companyTagDO);
                args.setHr_id(hr_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateCompanyTag();
            }
        }

        public void getTalentTagList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentTagList_call method_call = new getTalentTagList_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentTagList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getTalentTagList_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentTagList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentTagList_args args = new getTalentTagList_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentTagList();
            }
        }

        public void getProfileFilterList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProfileFilterList_call method_call = new getProfileFilterList_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProfileFilterList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getProfileFilterList_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileFilterList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProfileFilterList_args args = new getProfileFilterList_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProfileFilterList();
            }
        }

        public void handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            handerProfileFilterByIds_call method_call = new handerProfileFilterByIds_call(hr_id, company_id, disable, filter_ids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class handerProfileFilterByIds_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int disable;
            private java.util.List<java.lang.Integer> filter_ids;
            public handerProfileFilterByIds_call(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.disable = disable;
                this.filter_ids = filter_ids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handerProfileFilterByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
                handerProfileFilterByIds_args args = new handerProfileFilterByIds_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setDisable(disable);
                args.setFilter_ids(filter_ids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_handerProfileFilterByIds();
            }
        }

        public void getProfileFilterInfo(int hr_id, int company_id, int filter_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProfileFilterInfo_call method_call = new getProfileFilterInfo_call(hr_id, company_id, filter_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProfileFilterInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int filter_id;
            public getProfileFilterInfo_call(int hr_id, int company_id, int filter_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.filter_id = filter_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileFilterInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProfileFilterInfo_args args = new getProfileFilterInfo_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setFilter_id(filter_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProfileFilterInfo();
            }
        }

        public void addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addProfileFilter_call method_call = new addProfileFilter_call(companyTagDO, actionForm, positionIdList, hr_id, position_total, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addProfileFilter_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO;
            private java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm;
            private java.util.List<java.lang.Integer> positionIdList;
            private int hr_id;
            private int position_total;
            public addProfileFilter_call(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyTagDO = companyTagDO;
                this.actionForm = actionForm;
                this.positionIdList = positionIdList;
                this.hr_id = hr_id;
                this.position_total = position_total;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProfileFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addProfileFilter_args args = new addProfileFilter_args();
                args.setCompanyTagDO(companyTagDO);
                args.setActionForm(actionForm);
                args.setPositionIdList(positionIdList);
                args.setHr_id(hr_id);
                args.setPosition_total(position_total);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addProfileFilter();
            }
        }

        public void updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateProfileFilter_call method_call = new updateProfileFilter_call(companyTagDO, actionForm, positionIdList, hr_id, position_total, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateProfileFilter_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO;
            private java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm;
            private java.util.List<java.lang.Integer> positionIdList;
            private int hr_id;
            private int position_total;
            public updateProfileFilter_call(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyTagDO = companyTagDO;
                this.actionForm = actionForm;
                this.positionIdList = positionIdList;
                this.hr_id = hr_id;
                this.position_total = position_total;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProfileFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateProfileFilter_args args = new updateProfileFilter_args();
                args.setCompanyTagDO(companyTagDO);
                args.setActionForm(actionForm);
                args.setPositionIdList(positionIdList);
                args.setHr_id(hr_id);
                args.setPosition_total(position_total);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateProfileFilter();
            }
        }

        public void handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            handlerCompanyTagAndProfile_call method_call = new handlerCompanyTagAndProfile_call(userid_list, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class handlerCompanyTagAndProfile_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.util.Set<java.lang.Integer> userid_list;
            private int company_id;
            public handlerCompanyTagAndProfile_call(java.util.Set<java.lang.Integer> userid_list, int company_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userid_list = userid_list;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handlerCompanyTagAndProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                handlerCompanyTagAndProfile_args args = new handlerCompanyTagAndProfile_args();
                args.setUserid_list(userid_list);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void getTalentCountByPositionFilter(int hr_id, int company_id, int position_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentCountByPositionFilter_call method_call = new getTalentCountByPositionFilter_call(hr_id, company_id, position_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentCountByPositionFilter_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int position_id;
            public getTalentCountByPositionFilter_call(int hr_id, int company_id, int position_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.position_id = position_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentCountByPositionFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentCountByPositionFilter_args args = new getTalentCountByPositionFilter_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPosition_id(position_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentCountByPositionFilter();
            }
        }

        public void getEmailBalance(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEmailBalance_call method_call = new getEmailBalance_call(hr_id, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getEmailBalance_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            public getEmailBalance_call(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmailBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEmailBalance_args args = new getEmailBalance_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEmailBalance();
            }
        }

        public void getEmailTemplateList(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEmailTemplateList_call method_call = new getEmailTemplateList_call(hr_id, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getEmailTemplateList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            public getEmailTemplateList_call(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmailTemplateList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEmailTemplateList_args args = new getEmailTemplateList_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEmailTemplateList();
            }
        }

        public void getEmailInfo(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEmailInfo_call method_call = new getEmailInfo_call(hr_id, company_id, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getEmailInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int type;
            public getEmailInfo_call(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmailInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEmailInfo_args args = new getEmailInfo_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEmailInfo();
            }
        }

        public void updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateCompanyEmailInfo_call method_call = new updateCompanyEmailInfo_call(hr_id, company_id, type, disable, context, inscribe, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateCompanyEmailInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int type;
            private int disable;
            private java.lang.String context;
            private java.lang.String inscribe;
            public updateCompanyEmailInfo_call(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.type = type;
                this.disable = disable;
                this.context = context;
                this.inscribe = inscribe;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCompanyEmailInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateCompanyEmailInfo_args args = new updateCompanyEmailInfo_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setType(type);
                args.setDisable(disable);
                args.setContext(context);
                args.setInscribe(inscribe);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateCompanyEmailInfo();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("upsertTalentPoolApp", new upsertTalentPoolApp());
            processMap.put("getTalentAllComment", new getTalentAllComment());
            processMap.put("getHrTag", new getHrTag());
            processMap.put("batchAddTalent", new batchAddTalent());
            processMap.put("batchCancelTalent", new batchCancelTalent());
            processMap.put("hrAddTag", new hrAddTag());
            processMap.put("hrDelTag", new hrDelTag());
            processMap.put("hrUpdateTag", new hrUpdateTag());
            processMap.put("batchCancleTalentTag", new batchCancleTalentTag());
            processMap.put("batchAddTalentTag", new batchAddTalentTag());
            processMap.put("hrAddComment", new hrAddComment());
            processMap.put("hrDelComment", new hrDelComment());
            processMap.put("batchAddPublicTalent", new batchAddPublicTalent());
            processMap.put("batchCancelPublicTalent", new batchCancelPublicTalent());
            processMap.put("getCompanyPulicTalent", new getCompanyPulicTalent());
            processMap.put("batchNewAddTalentTag", new batchNewAddTalentTag());
            processMap.put("getTalentStat", new getTalentStat());
            processMap.put("getCompanyUserPublic", new getCompanyUserPublic());
            processMap.put("getCompanyTalent", new getCompanyTalent());
            processMap.put("getHrUserTag", new getHrUserTag());
            processMap.put("getUserOrigin", new getUserOrigin());
            processMap.put("getTalentAndPublicHr", new getTalentAndPublicHr());
            processMap.put("getPositionOrCompanyPast", new getPositionOrCompanyPast());
            processMap.put("addPositionOrCompanyPast", new addPositionOrCompanyPast());
            processMap.put("getCompanyTagList", new getCompanyTagList());
            processMap.put("deleteCompanyTagByIds", new deleteCompanyTagByIds());
            processMap.put("getCompanyIdInfo", new getCompanyIdInfo());
            processMap.put("addCompanyTag", new addCompanyTag());
            processMap.put("updateCompanyTag", new updateCompanyTag());
            processMap.put("getTalentTagList", new getTalentTagList());
            processMap.put("getProfileFilterList", new getProfileFilterList());
            processMap.put("handerProfileFilterByIds", new handerProfileFilterByIds());
            processMap.put("getProfileFilterInfo", new getProfileFilterInfo());
            processMap.put("addProfileFilter", new addProfileFilter());
            processMap.put("updateProfileFilter", new updateProfileFilter());
            processMap.put("handlerCompanyTagAndProfile", new handlerCompanyTagAndProfile());
            processMap.put("getTalentCountByPositionFilter", new getTalentCountByPositionFilter());
            processMap.put("getEmailBalance", new getEmailBalance());
            processMap.put("getEmailTemplateList", new getEmailTemplateList());
            processMap.put("getEmailInfo", new getEmailInfo());
            processMap.put("updateCompanyEmailInfo", new updateCompanyEmailInfo());
            return processMap;
        }

        public static class upsertTalentPoolApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upsertTalentPoolApp_args> {
            public upsertTalentPoolApp() {
                super("upsertTalentPoolApp");
            }

            public upsertTalentPoolApp_args getEmptyArgsInstance() {
                return new upsertTalentPoolApp_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public upsertTalentPoolApp_result getResult(I iface, upsertTalentPoolApp_args args) throws org.apache.thrift.TException {
                upsertTalentPoolApp_result result = new upsertTalentPoolApp_result();
                try {
                    result.success = iface.upsertTalentPoolApp(args.hrId, args.companyId, args.type);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentAllComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentAllComment_args> {
            public getTalentAllComment() {
                super("getTalentAllComment");
            }

            public getTalentAllComment_args getEmptyArgsInstance() {
                return new getTalentAllComment_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentAllComment_result getResult(I iface, getTalentAllComment_args args) throws org.apache.thrift.TException {
                getTalentAllComment_result result = new getTalentAllComment_result();
                try {
                    result.success = iface.getTalentAllComment(args.hr_id, args.company_id, args.user_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getHrTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHrTag_args> {
            public getHrTag() {
                super("getHrTag");
            }

            public getHrTag_args getEmptyArgsInstance() {
                return new getHrTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getHrTag_result getResult(I iface, getHrTag_args args) throws org.apache.thrift.TException {
                getHrTag_result result = new getHrTag_result();
                try {
                    result.success = iface.getHrTag(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchAddTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddTalent_args> {
            public batchAddTalent() {
                super("batchAddTalent");
            }

            public batchAddTalent_args getEmptyArgsInstance() {
                return new batchAddTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchAddTalent_result getResult(I iface, batchAddTalent_args args) throws org.apache.thrift.TException {
                batchAddTalent_result result = new batchAddTalent_result();
                try {
                    result.success = iface.batchAddTalent(args.hr_id, args.user_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchCancelTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancelTalent_args> {
            public batchCancelTalent() {
                super("batchCancelTalent");
            }

            public batchCancelTalent_args getEmptyArgsInstance() {
                return new batchCancelTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchCancelTalent_result getResult(I iface, batchCancelTalent_args args) throws org.apache.thrift.TException {
                batchCancelTalent_result result = new batchCancelTalent_result();
                try {
                    result.success = iface.batchCancelTalent(args.hr_id, args.user_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrAddTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrAddTag_args> {
            public hrAddTag() {
                super("hrAddTag");
            }

            public hrAddTag_args getEmptyArgsInstance() {
                return new hrAddTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrAddTag_result getResult(I iface, hrAddTag_args args) throws org.apache.thrift.TException {
                hrAddTag_result result = new hrAddTag_result();
                try {
                    result.success = iface.hrAddTag(args.hr_id, args.company_id, args.name);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrDelTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrDelTag_args> {
            public hrDelTag() {
                super("hrDelTag");
            }

            public hrDelTag_args getEmptyArgsInstance() {
                return new hrDelTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrDelTag_result getResult(I iface, hrDelTag_args args) throws org.apache.thrift.TException {
                hrDelTag_result result = new hrDelTag_result();
                try {
                    result.success = iface.hrDelTag(args.hr_id, args.company_id, args.tag_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrUpdateTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrUpdateTag_args> {
            public hrUpdateTag() {
                super("hrUpdateTag");
            }

            public hrUpdateTag_args getEmptyArgsInstance() {
                return new hrUpdateTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrUpdateTag_result getResult(I iface, hrUpdateTag_args args) throws org.apache.thrift.TException {
                hrUpdateTag_result result = new hrUpdateTag_result();
                try {
                    result.success = iface.hrUpdateTag(args.hr_id, args.company_id, args.tag_id, args.name);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchCancleTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancleTalentTag_args> {
            public batchCancleTalentTag() {
                super("batchCancleTalentTag");
            }

            public batchCancleTalentTag_args getEmptyArgsInstance() {
                return new batchCancleTalentTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchCancleTalentTag_result getResult(I iface, batchCancleTalentTag_args args) throws org.apache.thrift.TException {
                batchCancleTalentTag_result result = new batchCancleTalentTag_result();
                try {
                    result.success = iface.batchCancleTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchAddTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddTalentTag_args> {
            public batchAddTalentTag() {
                super("batchAddTalentTag");
            }

            public batchAddTalentTag_args getEmptyArgsInstance() {
                return new batchAddTalentTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchAddTalentTag_result getResult(I iface, batchAddTalentTag_args args) throws org.apache.thrift.TException {
                batchAddTalentTag_result result = new batchAddTalentTag_result();
                try {
                    result.success = iface.batchAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrAddComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrAddComment_args> {
            public hrAddComment() {
                super("hrAddComment");
            }

            public hrAddComment_args getEmptyArgsInstance() {
                return new hrAddComment_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrAddComment_result getResult(I iface, hrAddComment_args args) throws org.apache.thrift.TException {
                hrAddComment_result result = new hrAddComment_result();
                try {
                    result.success = iface.hrAddComment(args.hr_id, args.company_id, args.user_id, args.content);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrDelComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrDelComment_args> {
            public hrDelComment() {
                super("hrDelComment");
            }

            public hrDelComment_args getEmptyArgsInstance() {
                return new hrDelComment_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrDelComment_result getResult(I iface, hrDelComment_args args) throws org.apache.thrift.TException {
                hrDelComment_result result = new hrDelComment_result();
                try {
                    result.success = iface.hrDelComment(args.hr_id, args.company_id, args.comment_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchAddPublicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddPublicTalent_args> {
            public batchAddPublicTalent() {
                super("batchAddPublicTalent");
            }

            public batchAddPublicTalent_args getEmptyArgsInstance() {
                return new batchAddPublicTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchAddPublicTalent_result getResult(I iface, batchAddPublicTalent_args args) throws org.apache.thrift.TException {
                batchAddPublicTalent_result result = new batchAddPublicTalent_result();
                try {
                    result.success = iface.batchAddPublicTalent(args.hr_id, args.company_id, args.user_ids);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchCancelPublicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancelPublicTalent_args> {
            public batchCancelPublicTalent() {
                super("batchCancelPublicTalent");
            }

            public batchCancelPublicTalent_args getEmptyArgsInstance() {
                return new batchCancelPublicTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchCancelPublicTalent_result getResult(I iface, batchCancelPublicTalent_args args) throws org.apache.thrift.TException {
                batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
                try {
                    result.success = iface.batchCancelPublicTalent(args.hr_id, args.company_id, args.user_ids);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyPulicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyPulicTalent_args> {
            public getCompanyPulicTalent() {
                super("getCompanyPulicTalent");
            }

            public getCompanyPulicTalent_args getEmptyArgsInstance() {
                return new getCompanyPulicTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyPulicTalent_result getResult(I iface, getCompanyPulicTalent_args args) throws org.apache.thrift.TException {
                getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
                try {
                    result.success = iface.getCompanyPulicTalent(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchNewAddTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchNewAddTalentTag_args> {
            public batchNewAddTalentTag() {
                super("batchNewAddTalentTag");
            }

            public batchNewAddTalentTag_args getEmptyArgsInstance() {
                return new batchNewAddTalentTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchNewAddTalentTag_result getResult(I iface, batchNewAddTalentTag_args args) throws org.apache.thrift.TException {
                batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
                try {
                    result.success = iface.batchNewAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentStat_args> {
            public getTalentStat() {
                super("getTalentStat");
            }

            public getTalentStat_args getEmptyArgsInstance() {
                return new getTalentStat_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentStat_result getResult(I iface, getTalentStat_args args) throws org.apache.thrift.TException {
                getTalentStat_result result = new getTalentStat_result();
                try {
                    result.success = iface.getTalentStat(args.hr_id, args.company_id, args.type);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyUserPublic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyUserPublic_args> {
            public getCompanyUserPublic() {
                super("getCompanyUserPublic");
            }

            public getCompanyUserPublic_args getEmptyArgsInstance() {
                return new getCompanyUserPublic_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyUserPublic_result getResult(I iface, getCompanyUserPublic_args args) throws org.apache.thrift.TException {
                getCompanyUserPublic_result result = new getCompanyUserPublic_result();
                try {
                    result.success = iface.getCompanyUserPublic(args.hr_id, args.company_id, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyTalent_args> {
            public getCompanyTalent() {
                super("getCompanyTalent");
            }

            public getCompanyTalent_args getEmptyArgsInstance() {
                return new getCompanyTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyTalent_result getResult(I iface, getCompanyTalent_args args) throws org.apache.thrift.TException {
                getCompanyTalent_result result = new getCompanyTalent_result();
                try {
                    result.success = iface.getCompanyTalent(args.hr_id, args.company_id, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getHrUserTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHrUserTag_args> {
            public getHrUserTag() {
                super("getHrUserTag");
            }

            public getHrUserTag_args getEmptyArgsInstance() {
                return new getHrUserTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getHrUserTag_result getResult(I iface, getHrUserTag_args args) throws org.apache.thrift.TException {
                getHrUserTag_result result = new getHrUserTag_result();
                try {
                    result.success = iface.getHrUserTag(args.hr_id, args.company_id, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getUserOrigin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserOrigin_args> {
            public getUserOrigin() {
                super("getUserOrigin");
            }

            public getUserOrigin_args getEmptyArgsInstance() {
                return new getUserOrigin_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getUserOrigin_result getResult(I iface, getUserOrigin_args args) throws org.apache.thrift.TException {
                getUserOrigin_result result = new getUserOrigin_result();
                try {
                    result.success = iface.getUserOrigin(args.hr_id, args.company_id, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentAndPublicHr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentAndPublicHr_args> {
            public getTalentAndPublicHr() {
                super("getTalentAndPublicHr");
            }

            public getTalentAndPublicHr_args getEmptyArgsInstance() {
                return new getTalentAndPublicHr_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentAndPublicHr_result getResult(I iface, getTalentAndPublicHr_args args) throws org.apache.thrift.TException {
                getTalentAndPublicHr_result result = new getTalentAndPublicHr_result();
                try {
                    result.success = iface.getTalentAndPublicHr(args.hr_id, args.company_id, args.user_ids);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getPositionOrCompanyPast<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionOrCompanyPast_args> {
            public getPositionOrCompanyPast() {
                super("getPositionOrCompanyPast");
            }

            public getPositionOrCompanyPast_args getEmptyArgsInstance() {
                return new getPositionOrCompanyPast_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionOrCompanyPast_result getResult(I iface, getPositionOrCompanyPast_args args) throws org.apache.thrift.TException {
                getPositionOrCompanyPast_result result = new getPositionOrCompanyPast_result();
                try {
                    result.success = iface.getPositionOrCompanyPast(args.company_id, args.type, args.flag);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addPositionOrCompanyPast<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPositionOrCompanyPast_args> {
            public addPositionOrCompanyPast() {
                super("addPositionOrCompanyPast");
            }

            public addPositionOrCompanyPast_args getEmptyArgsInstance() {
                return new addPositionOrCompanyPast_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addPositionOrCompanyPast_result getResult(I iface, addPositionOrCompanyPast_args args) throws org.apache.thrift.TException {
                addPositionOrCompanyPast_result result = new addPositionOrCompanyPast_result();
                try {
                    result.success = iface.addPositionOrCompanyPast(args.company_id, args.type, args.flag, args.name);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyTagList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyTagList_args> {
            public getCompanyTagList() {
                super("getCompanyTagList");
            }

            public getCompanyTagList_args getEmptyArgsInstance() {
                return new getCompanyTagList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyTagList_result getResult(I iface, getCompanyTagList_args args) throws org.apache.thrift.TException {
                getCompanyTagList_result result = new getCompanyTagList_result();
                try {
                    result.success = iface.getCompanyTagList(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class deleteCompanyTagByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCompanyTagByIds_args> {
            public deleteCompanyTagByIds() {
                super("deleteCompanyTagByIds");
            }

            public deleteCompanyTagByIds_args getEmptyArgsInstance() {
                return new deleteCompanyTagByIds_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deleteCompanyTagByIds_result getResult(I iface, deleteCompanyTagByIds_args args) throws org.apache.thrift.TException {
                deleteCompanyTagByIds_result result = new deleteCompanyTagByIds_result();
                try {
                    result.success = iface.deleteCompanyTagByIds(args.hr_id, args.company_id, args.company_tag_ids);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyIdInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyIdInfo_args> {
            public getCompanyIdInfo() {
                super("getCompanyIdInfo");
            }

            public getCompanyIdInfo_args getEmptyArgsInstance() {
                return new getCompanyIdInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyIdInfo_result getResult(I iface, getCompanyIdInfo_args args) throws org.apache.thrift.TException {
                getCompanyIdInfo_result result = new getCompanyIdInfo_result();
                try {
                    result.success = iface.getCompanyIdInfo(args.hr_id, args.company_id, args.company_tag_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addCompanyTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCompanyTag_args> {
            public addCompanyTag() {
                super("addCompanyTag");
            }

            public addCompanyTag_args getEmptyArgsInstance() {
                return new addCompanyTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addCompanyTag_result getResult(I iface, addCompanyTag_args args) throws org.apache.thrift.TException {
                addCompanyTag_result result = new addCompanyTag_result();
                try {
                    result.success = iface.addCompanyTag(args.companyTagDO, args.hr_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateCompanyTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCompanyTag_args> {
            public updateCompanyTag() {
                super("updateCompanyTag");
            }

            public updateCompanyTag_args getEmptyArgsInstance() {
                return new updateCompanyTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateCompanyTag_result getResult(I iface, updateCompanyTag_args args) throws org.apache.thrift.TException {
                updateCompanyTag_result result = new updateCompanyTag_result();
                try {
                    result.success = iface.updateCompanyTag(args.companyTagDO, args.hr_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentTagList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentTagList_args> {
            public getTalentTagList() {
                super("getTalentTagList");
            }

            public getTalentTagList_args getEmptyArgsInstance() {
                return new getTalentTagList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentTagList_result getResult(I iface, getTalentTagList_args args) throws org.apache.thrift.TException {
                getTalentTagList_result result = new getTalentTagList_result();
                try {
                    result.success = iface.getTalentTagList(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getProfileFilterList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileFilterList_args> {
            public getProfileFilterList() {
                super("getProfileFilterList");
            }

            public getProfileFilterList_args getEmptyArgsInstance() {
                return new getProfileFilterList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getProfileFilterList_result getResult(I iface, getProfileFilterList_args args) throws org.apache.thrift.TException {
                getProfileFilterList_result result = new getProfileFilterList_result();
                try {
                    result.success = iface.getProfileFilterList(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class handerProfileFilterByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handerProfileFilterByIds_args> {
            public handerProfileFilterByIds() {
                super("handerProfileFilterByIds");
            }

            public handerProfileFilterByIds_args getEmptyArgsInstance() {
                return new handerProfileFilterByIds_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public handerProfileFilterByIds_result getResult(I iface, handerProfileFilterByIds_args args) throws org.apache.thrift.TException {
                handerProfileFilterByIds_result result = new handerProfileFilterByIds_result();
                try {
                    result.success = iface.handerProfileFilterByIds(args.hr_id, args.company_id, args.disable, args.filter_ids);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getProfileFilterInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileFilterInfo_args> {
            public getProfileFilterInfo() {
                super("getProfileFilterInfo");
            }

            public getProfileFilterInfo_args getEmptyArgsInstance() {
                return new getProfileFilterInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getProfileFilterInfo_result getResult(I iface, getProfileFilterInfo_args args) throws org.apache.thrift.TException {
                getProfileFilterInfo_result result = new getProfileFilterInfo_result();
                try {
                    result.success = iface.getProfileFilterInfo(args.hr_id, args.company_id, args.filter_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addProfileFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProfileFilter_args> {
            public addProfileFilter() {
                super("addProfileFilter");
            }

            public addProfileFilter_args getEmptyArgsInstance() {
                return new addProfileFilter_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addProfileFilter_result getResult(I iface, addProfileFilter_args args) throws org.apache.thrift.TException {
                addProfileFilter_result result = new addProfileFilter_result();
                try {
                    result.success = iface.addProfileFilter(args.companyTagDO, args.actionForm, args.positionIdList, args.hr_id, args.position_total);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateProfileFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProfileFilter_args> {
            public updateProfileFilter() {
                super("updateProfileFilter");
            }

            public updateProfileFilter_args getEmptyArgsInstance() {
                return new updateProfileFilter_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateProfileFilter_result getResult(I iface, updateProfileFilter_args args) throws org.apache.thrift.TException {
                updateProfileFilter_result result = new updateProfileFilter_result();
                try {
                    result.success = iface.updateProfileFilter(args.companyTagDO, args.actionForm, args.positionIdList, args.hr_id, args.position_total);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class handlerCompanyTagAndProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handlerCompanyTagAndProfile_args> {
            public handlerCompanyTagAndProfile() {
                super("handlerCompanyTagAndProfile");
            }

            public handlerCompanyTagAndProfile_args getEmptyArgsInstance() {
                return new handlerCompanyTagAndProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public handlerCompanyTagAndProfile_result getResult(I iface, handlerCompanyTagAndProfile_args args) throws org.apache.thrift.TException {
                handlerCompanyTagAndProfile_result result = new handlerCompanyTagAndProfile_result();
                try {
                    iface.handlerCompanyTagAndProfile(args.userid_list, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentCountByPositionFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentCountByPositionFilter_args> {
            public getTalentCountByPositionFilter() {
                super("getTalentCountByPositionFilter");
            }

            public getTalentCountByPositionFilter_args getEmptyArgsInstance() {
                return new getTalentCountByPositionFilter_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentCountByPositionFilter_result getResult(I iface, getTalentCountByPositionFilter_args args) throws org.apache.thrift.TException {
                getTalentCountByPositionFilter_result result = new getTalentCountByPositionFilter_result();
                try {
                    result.success = iface.getTalentCountByPositionFilter(args.hr_id, args.company_id, args.position_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getEmailBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmailBalance_args> {
            public getEmailBalance() {
                super("getEmailBalance");
            }

            public getEmailBalance_args getEmptyArgsInstance() {
                return new getEmailBalance_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getEmailBalance_result getResult(I iface, getEmailBalance_args args) throws org.apache.thrift.TException {
                getEmailBalance_result result = new getEmailBalance_result();
                try {
                    result.success = iface.getEmailBalance(args.hr_id, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getEmailTemplateList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmailTemplateList_args> {
            public getEmailTemplateList() {
                super("getEmailTemplateList");
            }

            public getEmailTemplateList_args getEmptyArgsInstance() {
                return new getEmailTemplateList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getEmailTemplateList_result getResult(I iface, getEmailTemplateList_args args) throws org.apache.thrift.TException {
                getEmailTemplateList_result result = new getEmailTemplateList_result();
                try {
                    result.success = iface.getEmailTemplateList(args.hr_id, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getEmailInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmailInfo_args> {
            public getEmailInfo() {
                super("getEmailInfo");
            }

            public getEmailInfo_args getEmptyArgsInstance() {
                return new getEmailInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getEmailInfo_result getResult(I iface, getEmailInfo_args args) throws org.apache.thrift.TException {
                getEmailInfo_result result = new getEmailInfo_result();
                try {
                    result.success = iface.getEmailInfo(args.hr_id, args.company_id, args.type);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateCompanyEmailInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCompanyEmailInfo_args> {
            public updateCompanyEmailInfo() {
                super("updateCompanyEmailInfo");
            }

            public updateCompanyEmailInfo_args getEmptyArgsInstance() {
                return new updateCompanyEmailInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateCompanyEmailInfo_result getResult(I iface, updateCompanyEmailInfo_args args) throws org.apache.thrift.TException {
                updateCompanyEmailInfo_result result = new updateCompanyEmailInfo_result();
                try {
                    result.success = iface.updateCompanyEmailInfo(args.hr_id, args.company_id, args.type, args.disable, args.context, args.inscribe);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("upsertTalentPoolApp", new upsertTalentPoolApp());
            processMap.put("getTalentAllComment", new getTalentAllComment());
            processMap.put("getHrTag", new getHrTag());
            processMap.put("batchAddTalent", new batchAddTalent());
            processMap.put("batchCancelTalent", new batchCancelTalent());
            processMap.put("hrAddTag", new hrAddTag());
            processMap.put("hrDelTag", new hrDelTag());
            processMap.put("hrUpdateTag", new hrUpdateTag());
            processMap.put("batchCancleTalentTag", new batchCancleTalentTag());
            processMap.put("batchAddTalentTag", new batchAddTalentTag());
            processMap.put("hrAddComment", new hrAddComment());
            processMap.put("hrDelComment", new hrDelComment());
            processMap.put("batchAddPublicTalent", new batchAddPublicTalent());
            processMap.put("batchCancelPublicTalent", new batchCancelPublicTalent());
            processMap.put("getCompanyPulicTalent", new getCompanyPulicTalent());
            processMap.put("batchNewAddTalentTag", new batchNewAddTalentTag());
            processMap.put("getTalentStat", new getTalentStat());
            processMap.put("getCompanyUserPublic", new getCompanyUserPublic());
            processMap.put("getCompanyTalent", new getCompanyTalent());
            processMap.put("getHrUserTag", new getHrUserTag());
            processMap.put("getUserOrigin", new getUserOrigin());
            processMap.put("getTalentAndPublicHr", new getTalentAndPublicHr());
            processMap.put("getPositionOrCompanyPast", new getPositionOrCompanyPast());
            processMap.put("addPositionOrCompanyPast", new addPositionOrCompanyPast());
            processMap.put("getCompanyTagList", new getCompanyTagList());
            processMap.put("deleteCompanyTagByIds", new deleteCompanyTagByIds());
            processMap.put("getCompanyIdInfo", new getCompanyIdInfo());
            processMap.put("addCompanyTag", new addCompanyTag());
            processMap.put("updateCompanyTag", new updateCompanyTag());
            processMap.put("getTalentTagList", new getTalentTagList());
            processMap.put("getProfileFilterList", new getProfileFilterList());
            processMap.put("handerProfileFilterByIds", new handerProfileFilterByIds());
            processMap.put("getProfileFilterInfo", new getProfileFilterInfo());
            processMap.put("addProfileFilter", new addProfileFilter());
            processMap.put("updateProfileFilter", new updateProfileFilter());
            processMap.put("handlerCompanyTagAndProfile", new handlerCompanyTagAndProfile());
            processMap.put("getTalentCountByPositionFilter", new getTalentCountByPositionFilter());
            processMap.put("getEmailBalance", new getEmailBalance());
            processMap.put("getEmailTemplateList", new getEmailTemplateList());
            processMap.put("getEmailInfo", new getEmailInfo());
            processMap.put("updateCompanyEmailInfo", new updateCompanyEmailInfo());
            return processMap;
        }

        public static class upsertTalentPoolApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upsertTalentPoolApp_args, com.moseeker.thrift.gen.common.struct.Response> {
            public upsertTalentPoolApp() {
                super("upsertTalentPoolApp");
            }

            public upsertTalentPoolApp_args getEmptyArgsInstance() {
                return new upsertTalentPoolApp_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        upsertTalentPoolApp_result result = new upsertTalentPoolApp_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        upsertTalentPoolApp_result result = new upsertTalentPoolApp_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, upsertTalentPoolApp_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.upsertTalentPoolApp(args.hrId, args.companyId, args.type,resultHandler);
            }
        }

        public static class getTalentAllComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentAllComment_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentAllComment() {
                super("getTalentAllComment");
            }

            public getTalentAllComment_args getEmptyArgsInstance() {
                return new getTalentAllComment_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentAllComment_result result = new getTalentAllComment_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentAllComment_result result = new getTalentAllComment_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentAllComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentAllComment(args.hr_id, args.company_id, args.user_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class getHrTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHrTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getHrTag() {
                super("getHrTag");
            }

            public getHrTag_args getEmptyArgsInstance() {
                return new getHrTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getHrTag_result result = new getHrTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getHrTag_result result = new getHrTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getHrTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getHrTag(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class batchAddTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchAddTalent() {
                super("batchAddTalent");
            }

            public batchAddTalent_args getEmptyArgsInstance() {
                return new batchAddTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchAddTalent_result result = new batchAddTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchAddTalent_result result = new batchAddTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchAddTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchAddTalent(args.hr_id, args.user_ids, args.company_id,resultHandler);
            }
        }

        public static class batchCancelTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancelTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchCancelTalent() {
                super("batchCancelTalent");
            }

            public batchCancelTalent_args getEmptyArgsInstance() {
                return new batchCancelTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchCancelTalent_result result = new batchCancelTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchCancelTalent_result result = new batchCancelTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchCancelTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchCancelTalent(args.hr_id, args.user_ids, args.company_id,resultHandler);
            }
        }

        public static class hrAddTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrAddTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrAddTag() {
                super("hrAddTag");
            }

            public hrAddTag_args getEmptyArgsInstance() {
                return new hrAddTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrAddTag_result result = new hrAddTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrAddTag_result result = new hrAddTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrAddTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrAddTag(args.hr_id, args.company_id, args.name,resultHandler);
            }
        }

        public static class hrDelTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrDelTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrDelTag() {
                super("hrDelTag");
            }

            public hrDelTag_args getEmptyArgsInstance() {
                return new hrDelTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrDelTag_result result = new hrDelTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrDelTag_result result = new hrDelTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrDelTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrDelTag(args.hr_id, args.company_id, args.tag_id,resultHandler);
            }
        }

        public static class hrUpdateTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrUpdateTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrUpdateTag() {
                super("hrUpdateTag");
            }

            public hrUpdateTag_args getEmptyArgsInstance() {
                return new hrUpdateTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrUpdateTag_result result = new hrUpdateTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrUpdateTag_result result = new hrUpdateTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrUpdateTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrUpdateTag(args.hr_id, args.company_id, args.tag_id, args.name,resultHandler);
            }
        }

        public static class batchCancleTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancleTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchCancleTalentTag() {
                super("batchCancleTalentTag");
            }

            public batchCancleTalentTag_args getEmptyArgsInstance() {
                return new batchCancleTalentTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchCancleTalentTag_result result = new batchCancleTalentTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchCancleTalentTag_result result = new batchCancleTalentTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchCancleTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchCancleTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
            }
        }

        public static class batchAddTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchAddTalentTag() {
                super("batchAddTalentTag");
            }

            public batchAddTalentTag_args getEmptyArgsInstance() {
                return new batchAddTalentTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchAddTalentTag_result result = new batchAddTalentTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchAddTalentTag_result result = new batchAddTalentTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchAddTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
            }
        }

        public static class hrAddComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrAddComment_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrAddComment() {
                super("hrAddComment");
            }

            public hrAddComment_args getEmptyArgsInstance() {
                return new hrAddComment_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrAddComment_result result = new hrAddComment_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrAddComment_result result = new hrAddComment_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrAddComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrAddComment(args.hr_id, args.company_id, args.user_id, args.content,resultHandler);
            }
        }

        public static class hrDelComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrDelComment_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrDelComment() {
                super("hrDelComment");
            }

            public hrDelComment_args getEmptyArgsInstance() {
                return new hrDelComment_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrDelComment_result result = new hrDelComment_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrDelComment_result result = new hrDelComment_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrDelComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrDelComment(args.hr_id, args.company_id, args.comment_id,resultHandler);
            }
        }

        public static class batchAddPublicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddPublicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchAddPublicTalent() {
                super("batchAddPublicTalent");
            }

            public batchAddPublicTalent_args getEmptyArgsInstance() {
                return new batchAddPublicTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchAddPublicTalent_result result = new batchAddPublicTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchAddPublicTalent_result result = new batchAddPublicTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchAddPublicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchAddPublicTalent(args.hr_id, args.company_id, args.user_ids,resultHandler);
            }
        }

        public static class batchCancelPublicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancelPublicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchCancelPublicTalent() {
                super("batchCancelPublicTalent");
            }

            public batchCancelPublicTalent_args getEmptyArgsInstance() {
                return new batchCancelPublicTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchCancelPublicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchCancelPublicTalent(args.hr_id, args.company_id, args.user_ids,resultHandler);
            }
        }

        public static class getCompanyPulicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyPulicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyPulicTalent() {
                super("getCompanyPulicTalent");
            }

            public getCompanyPulicTalent_args getEmptyArgsInstance() {
                return new getCompanyPulicTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyPulicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyPulicTalent(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class batchNewAddTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchNewAddTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchNewAddTalentTag() {
                super("batchNewAddTalentTag");
            }

            public batchNewAddTalentTag_args getEmptyArgsInstance() {
                return new batchNewAddTalentTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchNewAddTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchNewAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
            }
        }

        public static class getTalentStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentStat_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentStat() {
                super("getTalentStat");
            }

            public getTalentStat_args getEmptyArgsInstance() {
                return new getTalentStat_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentStat_result result = new getTalentStat_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentStat_result result = new getTalentStat_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentStat_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentStat(args.hr_id, args.company_id, args.type,resultHandler);
            }
        }

        public static class getCompanyUserPublic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyUserPublic_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyUserPublic() {
                super("getCompanyUserPublic");
            }

            public getCompanyUserPublic_args getEmptyArgsInstance() {
                return new getCompanyUserPublic_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyUserPublic_result result = new getCompanyUserPublic_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyUserPublic_result result = new getCompanyUserPublic_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyUserPublic_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyUserPublic(args.hr_id, args.company_id, args.user_id,resultHandler);
            }
        }

        public static class getCompanyTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyTalent() {
                super("getCompanyTalent");
            }

            public getCompanyTalent_args getEmptyArgsInstance() {
                return new getCompanyTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyTalent_result result = new getCompanyTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyTalent_result result = new getCompanyTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyTalent(args.hr_id, args.company_id, args.user_id,resultHandler);
            }
        }

        public static class getHrUserTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHrUserTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getHrUserTag() {
                super("getHrUserTag");
            }

            public getHrUserTag_args getEmptyArgsInstance() {
                return new getHrUserTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getHrUserTag_result result = new getHrUserTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getHrUserTag_result result = new getHrUserTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getHrUserTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getHrUserTag(args.hr_id, args.company_id, args.user_id,resultHandler);
            }
        }

        public static class getUserOrigin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserOrigin_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getUserOrigin() {
                super("getUserOrigin");
            }

            public getUserOrigin_args getEmptyArgsInstance() {
                return new getUserOrigin_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getUserOrigin_result result = new getUserOrigin_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getUserOrigin_result result = new getUserOrigin_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getUserOrigin_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getUserOrigin(args.hr_id, args.company_id, args.user_id,resultHandler);
            }
        }

        public static class getTalentAndPublicHr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentAndPublicHr_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentAndPublicHr() {
                super("getTalentAndPublicHr");
            }

            public getTalentAndPublicHr_args getEmptyArgsInstance() {
                return new getTalentAndPublicHr_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentAndPublicHr_result result = new getTalentAndPublicHr_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentAndPublicHr_result result = new getTalentAndPublicHr_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentAndPublicHr_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentAndPublicHr(args.hr_id, args.company_id, args.user_ids,resultHandler);
            }
        }

        public static class getPositionOrCompanyPast<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionOrCompanyPast_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPositionOrCompanyPast() {
                super("getPositionOrCompanyPast");
            }

            public getPositionOrCompanyPast_args getEmptyArgsInstance() {
                return new getPositionOrCompanyPast_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPositionOrCompanyPast_result result = new getPositionOrCompanyPast_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionOrCompanyPast_result result = new getPositionOrCompanyPast_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionOrCompanyPast_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionOrCompanyPast(args.company_id, args.type, args.flag,resultHandler);
            }
        }

        public static class addPositionOrCompanyPast<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPositionOrCompanyPast_args, com.moseeker.thrift.gen.common.struct.Response> {
            public addPositionOrCompanyPast() {
                super("addPositionOrCompanyPast");
            }

            public addPositionOrCompanyPast_args getEmptyArgsInstance() {
                return new addPositionOrCompanyPast_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        addPositionOrCompanyPast_result result = new addPositionOrCompanyPast_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addPositionOrCompanyPast_result result = new addPositionOrCompanyPast_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addPositionOrCompanyPast_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.addPositionOrCompanyPast(args.company_id, args.type, args.flag, args.name,resultHandler);
            }
        }

        public static class getCompanyTagList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyTagList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyTagList() {
                super("getCompanyTagList");
            }

            public getCompanyTagList_args getEmptyArgsInstance() {
                return new getCompanyTagList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyTagList_result result = new getCompanyTagList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyTagList_result result = new getCompanyTagList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyTagList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyTagList(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class deleteCompanyTagByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCompanyTagByIds_args, com.moseeker.thrift.gen.common.struct.Response> {
            public deleteCompanyTagByIds() {
                super("deleteCompanyTagByIds");
            }

            public deleteCompanyTagByIds_args getEmptyArgsInstance() {
                return new deleteCompanyTagByIds_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        deleteCompanyTagByIds_result result = new deleteCompanyTagByIds_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        deleteCompanyTagByIds_result result = new deleteCompanyTagByIds_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteCompanyTagByIds_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.deleteCompanyTagByIds(args.hr_id, args.company_id, args.company_tag_ids,resultHandler);
            }
        }

        public static class getCompanyIdInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyIdInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyIdInfo() {
                super("getCompanyIdInfo");
            }

            public getCompanyIdInfo_args getEmptyArgsInstance() {
                return new getCompanyIdInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyIdInfo_result result = new getCompanyIdInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyIdInfo_result result = new getCompanyIdInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyIdInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyIdInfo(args.hr_id, args.company_id, args.company_tag_id,resultHandler);
            }
        }

        public static class addCompanyTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCompanyTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public addCompanyTag() {
                super("addCompanyTag");
            }

            public addCompanyTag_args getEmptyArgsInstance() {
                return new addCompanyTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        addCompanyTag_result result = new addCompanyTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addCompanyTag_result result = new addCompanyTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addCompanyTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.addCompanyTag(args.companyTagDO, args.hr_id,resultHandler);
            }
        }

        public static class updateCompanyTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCompanyTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updateCompanyTag() {
                super("updateCompanyTag");
            }

            public updateCompanyTag_args getEmptyArgsInstance() {
                return new updateCompanyTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updateCompanyTag_result result = new updateCompanyTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateCompanyTag_result result = new updateCompanyTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateCompanyTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updateCompanyTag(args.companyTagDO, args.hr_id,resultHandler);
            }
        }

        public static class getTalentTagList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentTagList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentTagList() {
                super("getTalentTagList");
            }

            public getTalentTagList_args getEmptyArgsInstance() {
                return new getTalentTagList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentTagList_result result = new getTalentTagList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentTagList_result result = new getTalentTagList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentTagList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentTagList(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class getProfileFilterList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileFilterList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getProfileFilterList() {
                super("getProfileFilterList");
            }

            public getProfileFilterList_args getEmptyArgsInstance() {
                return new getProfileFilterList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getProfileFilterList_result result = new getProfileFilterList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProfileFilterList_result result = new getProfileFilterList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProfileFilterList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getProfileFilterList(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class handerProfileFilterByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handerProfileFilterByIds_args, com.moseeker.thrift.gen.common.struct.Response> {
            public handerProfileFilterByIds() {
                super("handerProfileFilterByIds");
            }

            public handerProfileFilterByIds_args getEmptyArgsInstance() {
                return new handerProfileFilterByIds_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        handerProfileFilterByIds_result result = new handerProfileFilterByIds_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        handerProfileFilterByIds_result result = new handerProfileFilterByIds_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, handerProfileFilterByIds_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.handerProfileFilterByIds(args.hr_id, args.company_id, args.disable, args.filter_ids,resultHandler);
            }
        }

        public static class getProfileFilterInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileFilterInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getProfileFilterInfo() {
                super("getProfileFilterInfo");
            }

            public getProfileFilterInfo_args getEmptyArgsInstance() {
                return new getProfileFilterInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getProfileFilterInfo_result result = new getProfileFilterInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProfileFilterInfo_result result = new getProfileFilterInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProfileFilterInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getProfileFilterInfo(args.hr_id, args.company_id, args.filter_id,resultHandler);
            }
        }

        public static class addProfileFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProfileFilter_args, com.moseeker.thrift.gen.common.struct.Response> {
            public addProfileFilter() {
                super("addProfileFilter");
            }

            public addProfileFilter_args getEmptyArgsInstance() {
                return new addProfileFilter_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        addProfileFilter_result result = new addProfileFilter_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addProfileFilter_result result = new addProfileFilter_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addProfileFilter_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.addProfileFilter(args.companyTagDO, args.actionForm, args.positionIdList, args.hr_id, args.position_total,resultHandler);
            }
        }

        public static class updateProfileFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProfileFilter_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updateProfileFilter() {
                super("updateProfileFilter");
            }

            public updateProfileFilter_args getEmptyArgsInstance() {
                return new updateProfileFilter_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updateProfileFilter_result result = new updateProfileFilter_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateProfileFilter_result result = new updateProfileFilter_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateProfileFilter_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updateProfileFilter(args.companyTagDO, args.actionForm, args.positionIdList, args.hr_id, args.position_total,resultHandler);
            }
        }

        public static class handlerCompanyTagAndProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handlerCompanyTagAndProfile_args, Void> {
            public handlerCompanyTagAndProfile() {
                super("handlerCompanyTagAndProfile");
            }

            public handlerCompanyTagAndProfile_args getEmptyArgsInstance() {
                return new handlerCompanyTagAndProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        handlerCompanyTagAndProfile_result result = new handlerCompanyTagAndProfile_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        handlerCompanyTagAndProfile_result result = new handlerCompanyTagAndProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, handlerCompanyTagAndProfile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.handlerCompanyTagAndProfile(args.userid_list, args.company_id,resultHandler);
            }
        }

        public static class getTalentCountByPositionFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentCountByPositionFilter_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentCountByPositionFilter() {
                super("getTalentCountByPositionFilter");
            }

            public getTalentCountByPositionFilter_args getEmptyArgsInstance() {
                return new getTalentCountByPositionFilter_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentCountByPositionFilter_result result = new getTalentCountByPositionFilter_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentCountByPositionFilter_result result = new getTalentCountByPositionFilter_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentCountByPositionFilter_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentCountByPositionFilter(args.hr_id, args.company_id, args.position_id,resultHandler);
            }
        }

        public static class getEmailBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmailBalance_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getEmailBalance() {
                super("getEmailBalance");
            }

            public getEmailBalance_args getEmptyArgsInstance() {
                return new getEmailBalance_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getEmailBalance_result result = new getEmailBalance_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getEmailBalance_result result = new getEmailBalance_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getEmailBalance_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getEmailBalance(args.hr_id, args.company_id,resultHandler);
            }
        }

        public static class getEmailTemplateList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmailTemplateList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getEmailTemplateList() {
                super("getEmailTemplateList");
            }

            public getEmailTemplateList_args getEmptyArgsInstance() {
                return new getEmailTemplateList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getEmailTemplateList_result result = new getEmailTemplateList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getEmailTemplateList_result result = new getEmailTemplateList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getEmailTemplateList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getEmailTemplateList(args.hr_id, args.company_id,resultHandler);
            }
        }

        public static class getEmailInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmailInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getEmailInfo() {
                super("getEmailInfo");
            }

            public getEmailInfo_args getEmptyArgsInstance() {
                return new getEmailInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getEmailInfo_result result = new getEmailInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getEmailInfo_result result = new getEmailInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getEmailInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getEmailInfo(args.hr_id, args.company_id, args.type,resultHandler);
            }
        }

        public static class updateCompanyEmailInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCompanyEmailInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updateCompanyEmailInfo() {
                super("updateCompanyEmailInfo");
            }

            public updateCompanyEmailInfo_args getEmptyArgsInstance() {
                return new updateCompanyEmailInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updateCompanyEmailInfo_result result = new updateCompanyEmailInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateCompanyEmailInfo_result result = new updateCompanyEmailInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateCompanyEmailInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updateCompanyEmailInfo(args.hr_id, args.company_id, args.type, args.disable, args.context, args.inscribe,resultHandler);
            }
        }

    }

    public static class upsertTalentPoolApp_args implements org.apache.thrift.TBase<upsertTalentPoolApp_args, upsertTalentPoolApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<upsertTalentPoolApp_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upsertTalentPoolApp_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new upsertTalentPoolApp_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new upsertTalentPoolApp_argsTupleSchemeFactory();

        public int hrId; // required
        public int companyId; // required
        public int type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            COMPANY_ID((short)2, "companyId"),
            TYPE((short)3, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upsertTalentPoolApp_args.class, metaDataMap);
        }

        public upsertTalentPoolApp_args() {
        }

        public upsertTalentPoolApp_args(
                int hrId,
                int companyId,
                int type)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.type = type;
            setTypeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public upsertTalentPoolApp_args(upsertTalentPoolApp_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            this.companyId = other.companyId;
            this.type = other.type;
        }

        public upsertTalentPoolApp_args deepCopy() {
            return new upsertTalentPoolApp_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setTypeIsSet(false);
            this.type = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public upsertTalentPoolApp_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public upsertTalentPoolApp_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public upsertTalentPoolApp_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case COMPANY_ID:
                    return getCompanyId();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof upsertTalentPoolApp_args)
                return this.equals((upsertTalentPoolApp_args)that);
            return false;
        }

        public boolean equals(upsertTalentPoolApp_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + type;

            return hashCode;
        }

        @Override
        public int compareTo(upsertTalentPoolApp_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("upsertTalentPoolApp_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class upsertTalentPoolApp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public upsertTalentPoolApp_argsStandardScheme getScheme() {
                return new upsertTalentPoolApp_argsStandardScheme();
            }
        }

        private static class upsertTalentPoolApp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<upsertTalentPoolApp_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, upsertTalentPoolApp_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, upsertTalentPoolApp_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class upsertTalentPoolApp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public upsertTalentPoolApp_argsTupleScheme getScheme() {
                return new upsertTalentPoolApp_argsTupleScheme();
            }
        }

        private static class upsertTalentPoolApp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<upsertTalentPoolApp_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, upsertTalentPoolApp_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, upsertTalentPoolApp_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class upsertTalentPoolApp_result implements org.apache.thrift.TBase<upsertTalentPoolApp_result, upsertTalentPoolApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<upsertTalentPoolApp_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upsertTalentPoolApp_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new upsertTalentPoolApp_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new upsertTalentPoolApp_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upsertTalentPoolApp_result.class, metaDataMap);
        }

        public upsertTalentPoolApp_result() {
        }

        public upsertTalentPoolApp_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public upsertTalentPoolApp_result(upsertTalentPoolApp_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public upsertTalentPoolApp_result deepCopy() {
            return new upsertTalentPoolApp_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public upsertTalentPoolApp_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public upsertTalentPoolApp_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof upsertTalentPoolApp_result)
                return this.equals((upsertTalentPoolApp_result)that);
            return false;
        }

        public boolean equals(upsertTalentPoolApp_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(upsertTalentPoolApp_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("upsertTalentPoolApp_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class upsertTalentPoolApp_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public upsertTalentPoolApp_resultStandardScheme getScheme() {
                return new upsertTalentPoolApp_resultStandardScheme();
            }
        }

        private static class upsertTalentPoolApp_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<upsertTalentPoolApp_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, upsertTalentPoolApp_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, upsertTalentPoolApp_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class upsertTalentPoolApp_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public upsertTalentPoolApp_resultTupleScheme getScheme() {
                return new upsertTalentPoolApp_resultTupleScheme();
            }
        }

        private static class upsertTalentPoolApp_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<upsertTalentPoolApp_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, upsertTalentPoolApp_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, upsertTalentPoolApp_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentAllComment_args implements org.apache.thrift.TBase<getTalentAllComment_args, getTalentAllComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAllComment_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAllComment_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAllComment_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAllComment_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id"),
            PAGE_NUMBER((short)4, "page_number"),
            PAGE_SIZE((short)5, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    case 4: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 5: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private static final int __PAGE_NUMBER_ISSET_ID = 3;
        private static final int __PAGE_SIZE_ISSET_ID = 4;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAllComment_args.class, metaDataMap);
        }

        public getTalentAllComment_args() {
        }

        public getTalentAllComment_args(
                int hr_id,
                int company_id,
                int user_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentAllComment_args(getTalentAllComment_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getTalentAllComment_args deepCopy() {
            return new getTalentAllComment_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentAllComment_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentAllComment_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getTalentAllComment_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getTalentAllComment_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getTalentAllComment_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentAllComment_args)
                return this.equals((getTalentAllComment_args)that);
            return false;
        }

        public boolean equals(getTalentAllComment_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getTalentAllComment_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAllComment_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentAllComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAllComment_argsStandardScheme getScheme() {
                return new getTalentAllComment_argsStandardScheme();
            }
        }

        private static class getTalentAllComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAllComment_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentAllComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAllComment_argsTupleScheme getScheme() {
                return new getTalentAllComment_argsTupleScheme();
            }
        }

        private static class getTalentAllComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAllComment_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(3);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentAllComment_result implements org.apache.thrift.TBase<getTalentAllComment_result, getTalentAllComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAllComment_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAllComment_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAllComment_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAllComment_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAllComment_result.class, metaDataMap);
        }

        public getTalentAllComment_result() {
        }

        public getTalentAllComment_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentAllComment_result(getTalentAllComment_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentAllComment_result deepCopy() {
            return new getTalentAllComment_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentAllComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentAllComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentAllComment_result)
                return this.equals((getTalentAllComment_result)that);
            return false;
        }

        public boolean equals(getTalentAllComment_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentAllComment_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAllComment_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentAllComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAllComment_resultStandardScheme getScheme() {
                return new getTalentAllComment_resultStandardScheme();
            }
        }

        private static class getTalentAllComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAllComment_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentAllComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAllComment_resultTupleScheme getScheme() {
                return new getTalentAllComment_resultTupleScheme();
            }
        }

        private static class getTalentAllComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAllComment_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getHrTag_args implements org.apache.thrift.TBase<getHrTag_args, getHrTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHrTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrTag_args.class, metaDataMap);
        }

        public getHrTag_args() {
        }

        public getHrTag_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHrTag_args(getHrTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getHrTag_args deepCopy() {
            return new getHrTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getHrTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getHrTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getHrTag_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getHrTag_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getHrTag_args)
                return this.equals((getHrTag_args)that);
            return false;
        }

        public boolean equals(getHrTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getHrTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHrTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrTag_argsStandardScheme getScheme() {
                return new getHrTag_argsStandardScheme();
            }
        }

        private static class getHrTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHrTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHrTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHrTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrTag_argsTupleScheme getScheme() {
                return new getHrTag_argsTupleScheme();
            }
        }

        private static class getHrTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHrTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHrTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getHrTag_result implements org.apache.thrift.TBase<getHrTag_result, getHrTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHrTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrTag_result.class, metaDataMap);
        }

        public getHrTag_result() {
        }

        public getHrTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHrTag_result(getHrTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getHrTag_result deepCopy() {
            return new getHrTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getHrTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getHrTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getHrTag_result)
                return this.equals((getHrTag_result)that);
            return false;
        }

        public boolean equals(getHrTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getHrTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHrTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrTag_resultStandardScheme getScheme() {
                return new getHrTag_resultStandardScheme();
            }
        }

        private static class getHrTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHrTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHrTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHrTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrTag_resultTupleScheme getScheme() {
                return new getHrTag_resultTupleScheme();
            }
        }

        private static class getHrTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHrTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHrTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddTalent_args implements org.apache.thrift.TBase<batchAddTalent_args, batchAddTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            COMPANY_ID((short)3, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalent_args.class, metaDataMap);
        }

        public batchAddTalent_args() {
        }

        public batchAddTalent_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddTalent_args(batchAddTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            this.company_id = other.company_id;
        }

        public batchAddTalent_args deepCopy() {
            return new batchAddTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchAddTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchAddTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchAddTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddTalent_args)
                return this.equals((batchAddTalent_args)that);
            return false;
        }

        public boolean equals(batchAddTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchAddTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalent_argsStandardScheme getScheme() {
                return new batchAddTalent_argsStandardScheme();
            }
        }

        private static class batchAddTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list64.size);
                                    int _elem65;
                                    for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                                    {
                                        _elem65 = iprot.readI32();
                                        struct.user_ids.add(_elem65);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter67 : struct.user_ids)
                        {
                            oprot.writeI32(_iter67);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalent_argsTupleScheme getScheme() {
                return new batchAddTalent_argsTupleScheme();
            }
        }

        private static class batchAddTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter68 : struct.user_ids)
                        {
                            oprot.writeI32(_iter68);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list69.size);
                        int _elem70;
                        for (int _i71 = 0; _i71 < _list69.size; ++_i71)
                        {
                            _elem70 = iprot.readI32();
                            struct.user_ids.add(_elem70);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddTalent_result implements org.apache.thrift.TBase<batchAddTalent_result, batchAddTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalent_result.class, metaDataMap);
        }

        public batchAddTalent_result() {
        }

        public batchAddTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddTalent_result(batchAddTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchAddTalent_result deepCopy() {
            return new batchAddTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchAddTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchAddTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddTalent_result)
                return this.equals((batchAddTalent_result)that);
            return false;
        }

        public boolean equals(batchAddTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchAddTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalent_resultStandardScheme getScheme() {
                return new batchAddTalent_resultStandardScheme();
            }
        }

        private static class batchAddTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalent_resultTupleScheme getScheme() {
                return new batchAddTalent_resultTupleScheme();
            }
        }

        private static class batchAddTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancelTalent_args implements org.apache.thrift.TBase<batchCancelTalent_args, batchCancelTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            COMPANY_ID((short)3, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelTalent_args.class, metaDataMap);
        }

        public batchCancelTalent_args() {
        }

        public batchCancelTalent_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancelTalent_args(batchCancelTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            this.company_id = other.company_id;
        }

        public batchCancelTalent_args deepCopy() {
            return new batchCancelTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchCancelTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchCancelTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchCancelTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancelTalent_args)
                return this.equals((batchCancelTalent_args)that);
            return false;
        }

        public boolean equals(batchCancelTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchCancelTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancelTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelTalent_argsStandardScheme getScheme() {
                return new batchCancelTalent_argsStandardScheme();
            }
        }

        private static class batchCancelTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list72.size);
                                    int _elem73;
                                    for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                                    {
                                        _elem73 = iprot.readI32();
                                        struct.user_ids.add(_elem73);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter75 : struct.user_ids)
                        {
                            oprot.writeI32(_iter75);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancelTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelTalent_argsTupleScheme getScheme() {
                return new batchCancelTalent_argsTupleScheme();
            }
        }

        private static class batchCancelTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter76 : struct.user_ids)
                        {
                            oprot.writeI32(_iter76);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list77.size);
                        int _elem78;
                        for (int _i79 = 0; _i79 < _list77.size; ++_i79)
                        {
                            _elem78 = iprot.readI32();
                            struct.user_ids.add(_elem78);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancelTalent_result implements org.apache.thrift.TBase<batchCancelTalent_result, batchCancelTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelTalent_result.class, metaDataMap);
        }

        public batchCancelTalent_result() {
        }

        public batchCancelTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancelTalent_result(batchCancelTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchCancelTalent_result deepCopy() {
            return new batchCancelTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchCancelTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchCancelTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancelTalent_result)
                return this.equals((batchCancelTalent_result)that);
            return false;
        }

        public boolean equals(batchCancelTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchCancelTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancelTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelTalent_resultStandardScheme getScheme() {
                return new batchCancelTalent_resultStandardScheme();
            }
        }

        private static class batchCancelTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancelTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelTalent_resultTupleScheme getScheme() {
                return new batchCancelTalent_resultTupleScheme();
            }
        }

        private static class batchCancelTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrAddTag_args implements org.apache.thrift.TBase<hrAddTag_args, hrAddTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.lang.String name; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            NAME((short)3, "name");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddTag_args.class, metaDataMap);
        }

        public hrAddTag_args() {
        }

        public hrAddTag_args(
                int hr_id,
                int company_id,
                java.lang.String name)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrAddTag_args(hrAddTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetName()) {
                this.name = other.name;
            }
        }

        public hrAddTag_args deepCopy() {
            return new hrAddTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.name = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrAddTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrAddTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public java.lang.String getName() {
            return this.name;
        }

        public hrAddTag_args setName(java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case NAME:
                    return getName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case NAME:
                    return isSetName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrAddTag_args)
                return this.equals((hrAddTag_args)that);
            return false;
        }

        public boolean equals(hrAddTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrAddTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrAddTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddTag_argsStandardScheme getScheme() {
                return new hrAddTag_argsStandardScheme();
            }
        }

        private static class hrAddTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrAddTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddTag_argsTupleScheme getScheme() {
                return new hrAddTag_argsTupleScheme();
            }
        }

        private static class hrAddTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrAddTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetName()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrAddTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrAddTag_result implements org.apache.thrift.TBase<hrAddTag_result, hrAddTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddTag_result.class, metaDataMap);
        }

        public hrAddTag_result() {
        }

        public hrAddTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrAddTag_result(hrAddTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrAddTag_result deepCopy() {
            return new hrAddTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrAddTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrAddTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrAddTag_result)
                return this.equals((hrAddTag_result)that);
            return false;
        }

        public boolean equals(hrAddTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrAddTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrAddTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddTag_resultStandardScheme getScheme() {
                return new hrAddTag_resultStandardScheme();
            }
        }

        private static class hrAddTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrAddTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddTag_resultTupleScheme getScheme() {
                return new hrAddTag_resultTupleScheme();
            }
        }

        private static class hrAddTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrAddTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrAddTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrDelTag_args implements org.apache.thrift.TBase<hrDelTag_args, hrDelTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int tag_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TAG_ID((short)3, "tag_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TAG_ID
                        return TAG_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TAG_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelTag_args.class, metaDataMap);
        }

        public hrDelTag_args() {
        }

        public hrDelTag_args(
                int hr_id,
                int company_id,
                int tag_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.tag_id = tag_id;
            setTag_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrDelTag_args(hrDelTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.tag_id = other.tag_id;
        }

        public hrDelTag_args deepCopy() {
            return new hrDelTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTag_idIsSet(false);
            this.tag_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrDelTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrDelTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getTag_id() {
            return this.tag_id;
        }

        public hrDelTag_args setTag_id(int tag_id) {
            this.tag_id = tag_id;
            setTag_idIsSet(true);
            return this;
        }

        public void unsetTag_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAG_ID_ISSET_ID);
        }

        /** Returns true if field tag_id is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAG_ID_ISSET_ID);
        }

        public void setTag_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAG_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TAG_ID:
                    if (value == null) {
                        unsetTag_id();
                    } else {
                        setTag_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TAG_ID:
                    return getTag_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TAG_ID:
                    return isSetTag_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrDelTag_args)
                return this.equals((hrDelTag_args)that);
            return false;
        }

        public boolean equals(hrDelTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_tag_id = true;
            boolean that_present_tag_id = true;
            if (this_present_tag_id || that_present_tag_id) {
                if (!(this_present_tag_id && that_present_tag_id))
                    return false;
                if (this.tag_id != that.tag_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + tag_id;

            return hashCode;
        }

        @Override
        public int compareTo(hrDelTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_id()).compareTo(other.isSetTag_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_id, other.tag_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_id:");
            sb.append(this.tag_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrDelTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelTag_argsStandardScheme getScheme() {
                return new hrDelTag_argsStandardScheme();
            }
        }

        private static class hrDelTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.tag_id = iprot.readI32();
                                struct.setTag_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
                oprot.writeI32(struct.tag_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrDelTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelTag_argsTupleScheme getScheme() {
                return new hrDelTag_argsTupleScheme();
            }
        }

        private static class hrDelTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrDelTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetTag_id()) {
                    oprot.writeI32(struct.tag_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrDelTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.tag_id = iprot.readI32();
                    struct.setTag_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrDelTag_result implements org.apache.thrift.TBase<hrDelTag_result, hrDelTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelTag_result.class, metaDataMap);
        }

        public hrDelTag_result() {
        }

        public hrDelTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrDelTag_result(hrDelTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrDelTag_result deepCopy() {
            return new hrDelTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrDelTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrDelTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrDelTag_result)
                return this.equals((hrDelTag_result)that);
            return false;
        }

        public boolean equals(hrDelTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrDelTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrDelTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelTag_resultStandardScheme getScheme() {
                return new hrDelTag_resultStandardScheme();
            }
        }

        private static class hrDelTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrDelTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelTag_resultTupleScheme getScheme() {
                return new hrDelTag_resultTupleScheme();
            }
        }

        private static class hrDelTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrDelTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrDelTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrUpdateTag_args implements org.apache.thrift.TBase<hrUpdateTag_args, hrUpdateTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrUpdateTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrUpdateTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_id", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrUpdateTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrUpdateTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int tag_id; // required
        public java.lang.String name; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TAG_ID((short)3, "tag_id"),
            NAME((short)4, "name");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TAG_ID
                        return TAG_ID;
                    case 4: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TAG_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrUpdateTag_args.class, metaDataMap);
        }

        public hrUpdateTag_args() {
        }

        public hrUpdateTag_args(
                int hr_id,
                int company_id,
                int tag_id,
                java.lang.String name)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.tag_id = tag_id;
            setTag_idIsSet(true);
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrUpdateTag_args(hrUpdateTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.tag_id = other.tag_id;
            if (other.isSetName()) {
                this.name = other.name;
            }
        }

        public hrUpdateTag_args deepCopy() {
            return new hrUpdateTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTag_idIsSet(false);
            this.tag_id = 0;
            this.name = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrUpdateTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrUpdateTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getTag_id() {
            return this.tag_id;
        }

        public hrUpdateTag_args setTag_id(int tag_id) {
            this.tag_id = tag_id;
            setTag_idIsSet(true);
            return this;
        }

        public void unsetTag_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAG_ID_ISSET_ID);
        }

        /** Returns true if field tag_id is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAG_ID_ISSET_ID);
        }

        public void setTag_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAG_ID_ISSET_ID, value);
        }

        public java.lang.String getName() {
            return this.name;
        }

        public hrUpdateTag_args setName(java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TAG_ID:
                    if (value == null) {
                        unsetTag_id();
                    } else {
                        setTag_id((java.lang.Integer)value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TAG_ID:
                    return getTag_id();

                case NAME:
                    return getName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TAG_ID:
                    return isSetTag_id();
                case NAME:
                    return isSetName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrUpdateTag_args)
                return this.equals((hrUpdateTag_args)that);
            return false;
        }

        public boolean equals(hrUpdateTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_tag_id = true;
            boolean that_present_tag_id = true;
            if (this_present_tag_id || that_present_tag_id) {
                if (!(this_present_tag_id && that_present_tag_id))
                    return false;
                if (this.tag_id != that.tag_id)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + tag_id;

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrUpdateTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_id()).compareTo(other.isSetTag_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_id, other.tag_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrUpdateTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_id:");
            sb.append(this.tag_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrUpdateTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrUpdateTag_argsStandardScheme getScheme() {
                return new hrUpdateTag_argsStandardScheme();
            }
        }

        private static class hrUpdateTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrUpdateTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.tag_id = iprot.readI32();
                                struct.setTag_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
                oprot.writeI32(struct.tag_id);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrUpdateTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrUpdateTag_argsTupleScheme getScheme() {
                return new hrUpdateTag_argsTupleScheme();
            }
        }

        private static class hrUpdateTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrUpdateTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_id()) {
                    optionals.set(2);
                }
                if (struct.isSetName()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetTag_id()) {
                    oprot.writeI32(struct.tag_id);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.tag_id = iprot.readI32();
                    struct.setTag_idIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrUpdateTag_result implements org.apache.thrift.TBase<hrUpdateTag_result, hrUpdateTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrUpdateTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrUpdateTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrUpdateTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrUpdateTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrUpdateTag_result.class, metaDataMap);
        }

        public hrUpdateTag_result() {
        }

        public hrUpdateTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrUpdateTag_result(hrUpdateTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrUpdateTag_result deepCopy() {
            return new hrUpdateTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrUpdateTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrUpdateTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrUpdateTag_result)
                return this.equals((hrUpdateTag_result)that);
            return false;
        }

        public boolean equals(hrUpdateTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrUpdateTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrUpdateTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrUpdateTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrUpdateTag_resultStandardScheme getScheme() {
                return new hrUpdateTag_resultStandardScheme();
            }
        }

        private static class hrUpdateTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrUpdateTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrUpdateTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrUpdateTag_resultTupleScheme getScheme() {
                return new hrUpdateTag_resultTupleScheme();
            }
        }

        private static class hrUpdateTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrUpdateTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancleTalentTag_args implements org.apache.thrift.TBase<batchCancleTalentTag_args, batchCancleTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancleTalentTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancleTalentTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancleTalentTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancleTalentTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public java.util.List<java.lang.Integer> tag_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            TAG_IDS((short)3, "tag_ids"),
            COMPANY_ID((short)4, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // TAG_IDS
                        return TAG_IDS;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancleTalentTag_args.class, metaDataMap);
        }

        public batchCancleTalentTag_args() {
        }

        public batchCancleTalentTag_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                java.util.List<java.lang.Integer> tag_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.tag_ids = tag_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancleTalentTag_args(batchCancleTalentTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            if (other.isSetTag_ids()) {
                java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
                this.tag_ids = __this__tag_ids;
            }
            this.company_id = other.company_id;
        }

        public batchCancleTalentTag_args deepCopy() {
            return new batchCancleTalentTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            this.tag_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchCancleTalentTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchCancleTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getTag_idsSize() {
            return (this.tag_ids == null) ? 0 : this.tag_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
            return (this.tag_ids == null) ? null : this.tag_ids.iterator();
        }

        public void addToTag_ids(int elem) {
            if (this.tag_ids == null) {
                this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.tag_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getTag_ids() {
            return this.tag_ids;
        }

        public batchCancleTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
            this.tag_ids = tag_ids;
            return this;
        }

        public void unsetTag_ids() {
            this.tag_ids = null;
        }

        /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_ids() {
            return this.tag_ids != null;
        }

        public void setTag_idsIsSet(boolean value) {
            if (!value) {
                this.tag_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchCancleTalentTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case TAG_IDS:
                    if (value == null) {
                        unsetTag_ids();
                    } else {
                        setTag_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case TAG_IDS:
                    return getTag_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case TAG_IDS:
                    return isSetTag_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancleTalentTag_args)
                return this.equals((batchCancleTalentTag_args)that);
            return false;
        }

        public boolean equals(batchCancleTalentTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_tag_ids = true && this.isSetTag_ids();
            boolean that_present_tag_ids = true && that.isSetTag_ids();
            if (this_present_tag_ids || that_present_tag_ids) {
                if (!(this_present_tag_ids && that_present_tag_ids))
                    return false;
                if (!this.tag_ids.equals(that.tag_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
            if (isSetTag_ids())
                hashCode = hashCode * 8191 + tag_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchCancleTalentTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancleTalentTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_ids:");
            if (this.tag_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.tag_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancleTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancleTalentTag_argsStandardScheme getScheme() {
                return new batchCancleTalentTag_argsStandardScheme();
            }
        }

        private static class batchCancleTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancleTalentTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list80.size);
                                    int _elem81;
                                    for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                                    {
                                        _elem81 = iprot.readI32();
                                        struct.user_ids.add(_elem81);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                                    struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list83.size);
                                    int _elem84;
                                    for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                                    {
                                        _elem84 = iprot.readI32();
                                        struct.tag_ids.add(_elem84);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setTag_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter86 : struct.user_ids)
                        {
                            oprot.writeI32(_iter86);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.tag_ids != null) {
                    oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
                        for (int _iter87 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter87);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancleTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancleTalentTag_argsTupleScheme getScheme() {
                return new batchCancleTalentTag_argsTupleScheme();
            }
        }

        private static class batchCancleTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancleTalentTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_ids()) {
                    optionals.set(2);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter88 : struct.user_ids)
                        {
                            oprot.writeI32(_iter88);
                        }
                    }
                }
                if (struct.isSetTag_ids()) {
                    {
                        oprot.writeI32(struct.tag_ids.size());
                        for (int _iter89 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter89);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list90.size);
                        int _elem91;
                        for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                        {
                            _elem91 = iprot.readI32();
                            struct.user_ids.add(_elem91);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list93.size);
                        int _elem94;
                        for (int _i95 = 0; _i95 < _list93.size; ++_i95)
                        {
                            _elem94 = iprot.readI32();
                            struct.tag_ids.add(_elem94);
                        }
                    }
                    struct.setTag_idsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancleTalentTag_result implements org.apache.thrift.TBase<batchCancleTalentTag_result, batchCancleTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancleTalentTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancleTalentTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancleTalentTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancleTalentTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancleTalentTag_result.class, metaDataMap);
        }

        public batchCancleTalentTag_result() {
        }

        public batchCancleTalentTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancleTalentTag_result(batchCancleTalentTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchCancleTalentTag_result deepCopy() {
            return new batchCancleTalentTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchCancleTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchCancleTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancleTalentTag_result)
                return this.equals((batchCancleTalentTag_result)that);
            return false;
        }

        public boolean equals(batchCancleTalentTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchCancleTalentTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancleTalentTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancleTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancleTalentTag_resultStandardScheme getScheme() {
                return new batchCancleTalentTag_resultStandardScheme();
            }
        }

        private static class batchCancleTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancleTalentTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancleTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancleTalentTag_resultTupleScheme getScheme() {
                return new batchCancleTalentTag_resultTupleScheme();
            }
        }

        private static class batchCancleTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancleTalentTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddTalentTag_args implements org.apache.thrift.TBase<batchAddTalentTag_args, batchAddTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalentTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalentTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalentTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalentTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public java.util.List<java.lang.Integer> tag_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            TAG_IDS((short)3, "tag_ids"),
            COMPANY_ID((short)4, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // TAG_IDS
                        return TAG_IDS;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalentTag_args.class, metaDataMap);
        }

        public batchAddTalentTag_args() {
        }

        public batchAddTalentTag_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                java.util.List<java.lang.Integer> tag_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.tag_ids = tag_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddTalentTag_args(batchAddTalentTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            if (other.isSetTag_ids()) {
                java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
                this.tag_ids = __this__tag_ids;
            }
            this.company_id = other.company_id;
        }

        public batchAddTalentTag_args deepCopy() {
            return new batchAddTalentTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            this.tag_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchAddTalentTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchAddTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getTag_idsSize() {
            return (this.tag_ids == null) ? 0 : this.tag_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
            return (this.tag_ids == null) ? null : this.tag_ids.iterator();
        }

        public void addToTag_ids(int elem) {
            if (this.tag_ids == null) {
                this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.tag_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getTag_ids() {
            return this.tag_ids;
        }

        public batchAddTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
            this.tag_ids = tag_ids;
            return this;
        }

        public void unsetTag_ids() {
            this.tag_ids = null;
        }

        /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_ids() {
            return this.tag_ids != null;
        }

        public void setTag_idsIsSet(boolean value) {
            if (!value) {
                this.tag_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchAddTalentTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case TAG_IDS:
                    if (value == null) {
                        unsetTag_ids();
                    } else {
                        setTag_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case TAG_IDS:
                    return getTag_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case TAG_IDS:
                    return isSetTag_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddTalentTag_args)
                return this.equals((batchAddTalentTag_args)that);
            return false;
        }

        public boolean equals(batchAddTalentTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_tag_ids = true && this.isSetTag_ids();
            boolean that_present_tag_ids = true && that.isSetTag_ids();
            if (this_present_tag_ids || that_present_tag_ids) {
                if (!(this_present_tag_ids && that_present_tag_ids))
                    return false;
                if (!this.tag_ids.equals(that.tag_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
            if (isSetTag_ids())
                hashCode = hashCode * 8191 + tag_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchAddTalentTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalentTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_ids:");
            if (this.tag_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.tag_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalentTag_argsStandardScheme getScheme() {
                return new batchAddTalentTag_argsStandardScheme();
            }
        }

        private static class batchAddTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalentTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list96.size);
                                    int _elem97;
                                    for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                                    {
                                        _elem97 = iprot.readI32();
                                        struct.user_ids.add(_elem97);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                                    struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list99.size);
                                    int _elem100;
                                    for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                                    {
                                        _elem100 = iprot.readI32();
                                        struct.tag_ids.add(_elem100);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setTag_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter102 : struct.user_ids)
                        {
                            oprot.writeI32(_iter102);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.tag_ids != null) {
                    oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
                        for (int _iter103 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter103);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalentTag_argsTupleScheme getScheme() {
                return new batchAddTalentTag_argsTupleScheme();
            }
        }

        private static class batchAddTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalentTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_ids()) {
                    optionals.set(2);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter104 : struct.user_ids)
                        {
                            oprot.writeI32(_iter104);
                        }
                    }
                }
                if (struct.isSetTag_ids()) {
                    {
                        oprot.writeI32(struct.tag_ids.size());
                        for (int _iter105 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter105);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list106.size);
                        int _elem107;
                        for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                        {
                            _elem107 = iprot.readI32();
                            struct.user_ids.add(_elem107);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list109.size);
                        int _elem110;
                        for (int _i111 = 0; _i111 < _list109.size; ++_i111)
                        {
                            _elem110 = iprot.readI32();
                            struct.tag_ids.add(_elem110);
                        }
                    }
                    struct.setTag_idsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddTalentTag_result implements org.apache.thrift.TBase<batchAddTalentTag_result, batchAddTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalentTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalentTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalentTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalentTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalentTag_result.class, metaDataMap);
        }

        public batchAddTalentTag_result() {
        }

        public batchAddTalentTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddTalentTag_result(batchAddTalentTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchAddTalentTag_result deepCopy() {
            return new batchAddTalentTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchAddTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchAddTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddTalentTag_result)
                return this.equals((batchAddTalentTag_result)that);
            return false;
        }

        public boolean equals(batchAddTalentTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchAddTalentTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalentTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalentTag_resultStandardScheme getScheme() {
                return new batchAddTalentTag_resultStandardScheme();
            }
        }

        private static class batchAddTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalentTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalentTag_resultTupleScheme getScheme() {
                return new batchAddTalentTag_resultTupleScheme();
            }
        }

        private static class batchAddTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalentTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrAddComment_args implements org.apache.thrift.TBase<hrAddComment_args, hrAddComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddComment_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddComment_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddComment_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddComment_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required
        public java.lang.String content; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id"),
            CONTENT((short)4, "content");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    case 4: // CONTENT
                        return CONTENT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddComment_args.class, metaDataMap);
        }

        public hrAddComment_args() {
        }

        public hrAddComment_args(
                int hr_id,
                int company_id,
                int user_id,
                java.lang.String content)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
            this.content = content;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrAddComment_args(hrAddComment_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
            if (other.isSetContent()) {
                this.content = other.content;
            }
        }

        public hrAddComment_args deepCopy() {
            return new hrAddComment_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
            this.content = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrAddComment_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrAddComment_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public hrAddComment_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public java.lang.String getContent() {
            return this.content;
        }

        public hrAddComment_args setContent(java.lang.String content) {
            this.content = content;
            return this;
        }

        public void unsetContent() {
            this.content = null;
        }

        /** Returns true if field content is set (has been assigned a value) and false otherwise */
        public boolean isSetContent() {
            return this.content != null;
        }

        public void setContentIsSet(boolean value) {
            if (!value) {
                this.content = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

                case CONTENT:
                    if (value == null) {
                        unsetContent();
                    } else {
                        setContent((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

                case CONTENT:
                    return getContent();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
                case CONTENT:
                    return isSetContent();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrAddComment_args)
                return this.equals((hrAddComment_args)that);
            return false;
        }

        public boolean equals(hrAddComment_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            boolean this_present_content = true && this.isSetContent();
            boolean that_present_content = true && that.isSetContent();
            if (this_present_content || that_present_content) {
                if (!(this_present_content && that_present_content))
                    return false;
                if (!this.content.equals(that.content))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
            if (isSetContent())
                hashCode = hashCode * 8191 + content.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrAddComment_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetContent()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddComment_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("content:");
            if (this.content == null) {
                sb.append("null");
            } else {
                sb.append(this.content);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrAddComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddComment_argsStandardScheme getScheme() {
                return new hrAddComment_argsStandardScheme();
            }
        }

        private static class hrAddComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddComment_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // CONTENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.content = iprot.readString();
                                struct.setContentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddComment_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                if (struct.content != null) {
                    oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                    oprot.writeString(struct.content);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrAddComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddComment_argsTupleScheme getScheme() {
                return new hrAddComment_argsTupleScheme();
            }
        }

        private static class hrAddComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddComment_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrAddComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                if (struct.isSetContent()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
                if (struct.isSetContent()) {
                    oprot.writeString(struct.content);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrAddComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.content = iprot.readString();
                    struct.setContentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrAddComment_result implements org.apache.thrift.TBase<hrAddComment_result, hrAddComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddComment_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddComment_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddComment_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddComment_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddComment_result.class, metaDataMap);
        }

        public hrAddComment_result() {
        }

        public hrAddComment_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrAddComment_result(hrAddComment_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrAddComment_result deepCopy() {
            return new hrAddComment_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrAddComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrAddComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrAddComment_result)
                return this.equals((hrAddComment_result)that);
            return false;
        }

        public boolean equals(hrAddComment_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrAddComment_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddComment_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrAddComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddComment_resultStandardScheme getScheme() {
                return new hrAddComment_resultStandardScheme();
            }
        }

        private static class hrAddComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddComment_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddComment_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrAddComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddComment_resultTupleScheme getScheme() {
                return new hrAddComment_resultTupleScheme();
            }
        }

        private static class hrAddComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddComment_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrAddComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrAddComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrDelComment_args implements org.apache.thrift.TBase<hrDelComment_args, hrDelComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelComment_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelComment_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comment_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelComment_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelComment_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int comment_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            COMMENT_ID((short)3, "comment_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // COMMENT_ID
                        return COMMENT_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __COMMENT_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("comment_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelComment_args.class, metaDataMap);
        }

        public hrDelComment_args() {
        }

        public hrDelComment_args(
                int hr_id,
                int company_id,
                int comment_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.comment_id = comment_id;
            setComment_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrDelComment_args(hrDelComment_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.comment_id = other.comment_id;
        }

        public hrDelComment_args deepCopy() {
            return new hrDelComment_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setComment_idIsSet(false);
            this.comment_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrDelComment_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrDelComment_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getComment_id() {
            return this.comment_id;
        }

        public hrDelComment_args setComment_id(int comment_id) {
            this.comment_id = comment_id;
            setComment_idIsSet(true);
            return this;
        }

        public void unsetComment_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENT_ID_ISSET_ID);
        }

        /** Returns true if field comment_id is set (has been assigned a value) and false otherwise */
        public boolean isSetComment_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENT_ID_ISSET_ID);
        }

        public void setComment_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENT_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case COMMENT_ID:
                    if (value == null) {
                        unsetComment_id();
                    } else {
                        setComment_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case COMMENT_ID:
                    return getComment_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case COMMENT_ID:
                    return isSetComment_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrDelComment_args)
                return this.equals((hrDelComment_args)that);
            return false;
        }

        public boolean equals(hrDelComment_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_comment_id = true;
            boolean that_present_comment_id = true;
            if (this_present_comment_id || that_present_comment_id) {
                if (!(this_present_comment_id && that_present_comment_id))
                    return false;
                if (this.comment_id != that.comment_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + comment_id;

            return hashCode;
        }

        @Override
        public int compareTo(hrDelComment_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetComment_id()).compareTo(other.isSetComment_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComment_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment_id, other.comment_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelComment_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("comment_id:");
            sb.append(this.comment_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrDelComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelComment_argsStandardScheme getScheme() {
                return new hrDelComment_argsStandardScheme();
            }
        }

        private static class hrDelComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelComment_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMMENT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.comment_id = iprot.readI32();
                                struct.setComment_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelComment_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
                oprot.writeI32(struct.comment_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrDelComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelComment_argsTupleScheme getScheme() {
                return new hrDelComment_argsTupleScheme();
            }
        }

        private static class hrDelComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelComment_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrDelComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetComment_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetComment_id()) {
                    oprot.writeI32(struct.comment_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrDelComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.comment_id = iprot.readI32();
                    struct.setComment_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrDelComment_result implements org.apache.thrift.TBase<hrDelComment_result, hrDelComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelComment_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelComment_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelComment_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelComment_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelComment_result.class, metaDataMap);
        }

        public hrDelComment_result() {
        }

        public hrDelComment_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrDelComment_result(hrDelComment_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrDelComment_result deepCopy() {
            return new hrDelComment_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrDelComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrDelComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrDelComment_result)
                return this.equals((hrDelComment_result)that);
            return false;
        }

        public boolean equals(hrDelComment_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrDelComment_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelComment_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrDelComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelComment_resultStandardScheme getScheme() {
                return new hrDelComment_resultStandardScheme();
            }
        }

        private static class hrDelComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelComment_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelComment_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrDelComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelComment_resultTupleScheme getScheme() {
                return new hrDelComment_resultTupleScheme();
            }
        }

        private static class hrDelComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelComment_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrDelComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrDelComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddPublicTalent_args implements org.apache.thrift.TBase<batchAddPublicTalent_args, batchAddPublicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddPublicTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddPublicTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddPublicTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddPublicTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_IDS((short)3, "user_ids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_IDS
                        return USER_IDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddPublicTalent_args.class, metaDataMap);
        }

        public batchAddPublicTalent_args() {
        }

        public batchAddPublicTalent_args(
                int hr_id,
                int company_id,
                java.util.List<java.lang.Integer> user_ids)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_ids = user_ids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddPublicTalent_args(batchAddPublicTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
        }

        public batchAddPublicTalent_args deepCopy() {
            return new batchAddPublicTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.user_ids = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchAddPublicTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchAddPublicTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchAddPublicTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_IDS:
                    return getUser_ids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_IDS:
                    return isSetUser_ids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddPublicTalent_args)
                return this.equals((batchAddPublicTalent_args)that);
            return false;
        }

        public boolean equals(batchAddPublicTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchAddPublicTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddPublicTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddPublicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddPublicTalent_argsStandardScheme getScheme() {
                return new batchAddPublicTalent_argsStandardScheme();
            }
        }

        private static class batchAddPublicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddPublicTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list112.size);
                                    int _elem113;
                                    for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                                    {
                                        _elem113 = iprot.readI32();
                                        struct.user_ids.add(_elem113);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter115 : struct.user_ids)
                        {
                            oprot.writeI32(_iter115);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddPublicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddPublicTalent_argsTupleScheme getScheme() {
                return new batchAddPublicTalent_argsTupleScheme();
            }
        }

        private static class batchAddPublicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddPublicTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter116 : struct.user_ids)
                        {
                            oprot.writeI32(_iter116);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list117.size);
                        int _elem118;
                        for (int _i119 = 0; _i119 < _list117.size; ++_i119)
                        {
                            _elem118 = iprot.readI32();
                            struct.user_ids.add(_elem118);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddPublicTalent_result implements org.apache.thrift.TBase<batchAddPublicTalent_result, batchAddPublicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddPublicTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddPublicTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddPublicTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddPublicTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddPublicTalent_result.class, metaDataMap);
        }

        public batchAddPublicTalent_result() {
        }

        public batchAddPublicTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddPublicTalent_result(batchAddPublicTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchAddPublicTalent_result deepCopy() {
            return new batchAddPublicTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchAddPublicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchAddPublicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddPublicTalent_result)
                return this.equals((batchAddPublicTalent_result)that);
            return false;
        }

        public boolean equals(batchAddPublicTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchAddPublicTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddPublicTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddPublicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddPublicTalent_resultStandardScheme getScheme() {
                return new batchAddPublicTalent_resultStandardScheme();
            }
        }

        private static class batchAddPublicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddPublicTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddPublicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddPublicTalent_resultTupleScheme getScheme() {
                return new batchAddPublicTalent_resultTupleScheme();
            }
        }

        private static class batchAddPublicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddPublicTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancelPublicTalent_args implements org.apache.thrift.TBase<batchCancelPublicTalent_args, batchCancelPublicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelPublicTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelPublicTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelPublicTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelPublicTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_IDS((short)3, "user_ids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_IDS
                        return USER_IDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelPublicTalent_args.class, metaDataMap);
        }

        public batchCancelPublicTalent_args() {
        }

        public batchCancelPublicTalent_args(
                int hr_id,
                int company_id,
                java.util.List<java.lang.Integer> user_ids)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_ids = user_ids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancelPublicTalent_args(batchCancelPublicTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
        }

        public batchCancelPublicTalent_args deepCopy() {
            return new batchCancelPublicTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.user_ids = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchCancelPublicTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchCancelPublicTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchCancelPublicTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_IDS:
                    return getUser_ids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_IDS:
                    return isSetUser_ids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancelPublicTalent_args)
                return this.equals((batchCancelPublicTalent_args)that);
            return false;
        }

        public boolean equals(batchCancelPublicTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchCancelPublicTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelPublicTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancelPublicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelPublicTalent_argsStandardScheme getScheme() {
                return new batchCancelPublicTalent_argsStandardScheme();
            }
        }

        private static class batchCancelPublicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelPublicTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list120.size);
                                    int _elem121;
                                    for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                                    {
                                        _elem121 = iprot.readI32();
                                        struct.user_ids.add(_elem121);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter123 : struct.user_ids)
                        {
                            oprot.writeI32(_iter123);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancelPublicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelPublicTalent_argsTupleScheme getScheme() {
                return new batchCancelPublicTalent_argsTupleScheme();
            }
        }

        private static class batchCancelPublicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelPublicTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter124 : struct.user_ids)
                        {
                            oprot.writeI32(_iter124);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list125.size);
                        int _elem126;
                        for (int _i127 = 0; _i127 < _list125.size; ++_i127)
                        {
                            _elem126 = iprot.readI32();
                            struct.user_ids.add(_elem126);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancelPublicTalent_result implements org.apache.thrift.TBase<batchCancelPublicTalent_result, batchCancelPublicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelPublicTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelPublicTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelPublicTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelPublicTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelPublicTalent_result.class, metaDataMap);
        }

        public batchCancelPublicTalent_result() {
        }

        public batchCancelPublicTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancelPublicTalent_result(batchCancelPublicTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchCancelPublicTalent_result deepCopy() {
            return new batchCancelPublicTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchCancelPublicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchCancelPublicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancelPublicTalent_result)
                return this.equals((batchCancelPublicTalent_result)that);
            return false;
        }

        public boolean equals(batchCancelPublicTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchCancelPublicTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelPublicTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancelPublicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelPublicTalent_resultStandardScheme getScheme() {
                return new batchCancelPublicTalent_resultStandardScheme();
            }
        }

        private static class batchCancelPublicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelPublicTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancelPublicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelPublicTalent_resultTupleScheme getScheme() {
                return new batchCancelPublicTalent_resultTupleScheme();
            }
        }

        private static class batchCancelPublicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelPublicTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyPulicTalent_args implements org.apache.thrift.TBase<getCompanyPulicTalent_args, getCompanyPulicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyPulicTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyPulicTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyPulicTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyPulicTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyPulicTalent_args.class, metaDataMap);
        }

        public getCompanyPulicTalent_args() {
        }

        public getCompanyPulicTalent_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyPulicTalent_args(getCompanyPulicTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getCompanyPulicTalent_args deepCopy() {
            return new getCompanyPulicTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getCompanyPulicTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getCompanyPulicTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getCompanyPulicTalent_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getCompanyPulicTalent_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyPulicTalent_args)
                return this.equals((getCompanyPulicTalent_args)that);
            return false;
        }

        public boolean equals(getCompanyPulicTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyPulicTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyPulicTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyPulicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyPulicTalent_argsStandardScheme getScheme() {
                return new getCompanyPulicTalent_argsStandardScheme();
            }
        }

        private static class getCompanyPulicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyPulicTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyPulicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyPulicTalent_argsTupleScheme getScheme() {
                return new getCompanyPulicTalent_argsTupleScheme();
            }
        }

        private static class getCompanyPulicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyPulicTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyPulicTalent_result implements org.apache.thrift.TBase<getCompanyPulicTalent_result, getCompanyPulicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyPulicTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyPulicTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyPulicTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyPulicTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyPulicTalent_result.class, metaDataMap);
        }

        public getCompanyPulicTalent_result() {
        }

        public getCompanyPulicTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyPulicTalent_result(getCompanyPulicTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyPulicTalent_result deepCopy() {
            return new getCompanyPulicTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyPulicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyPulicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyPulicTalent_result)
                return this.equals((getCompanyPulicTalent_result)that);
            return false;
        }

        public boolean equals(getCompanyPulicTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyPulicTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyPulicTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyPulicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyPulicTalent_resultStandardScheme getScheme() {
                return new getCompanyPulicTalent_resultStandardScheme();
            }
        }

        private static class getCompanyPulicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyPulicTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyPulicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyPulicTalent_resultTupleScheme getScheme() {
                return new getCompanyPulicTalent_resultTupleScheme();
            }
        }

        private static class getCompanyPulicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyPulicTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchNewAddTalentTag_args implements org.apache.thrift.TBase<batchNewAddTalentTag_args, batchNewAddTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchNewAddTalentTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchNewAddTalentTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchNewAddTalentTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchNewAddTalentTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public java.util.List<java.lang.Integer> tag_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            TAG_IDS((short)3, "tag_ids"),
            COMPANY_ID((short)4, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // TAG_IDS
                        return TAG_IDS;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchNewAddTalentTag_args.class, metaDataMap);
        }

        public batchNewAddTalentTag_args() {
        }

        public batchNewAddTalentTag_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                java.util.List<java.lang.Integer> tag_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.tag_ids = tag_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchNewAddTalentTag_args(batchNewAddTalentTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            if (other.isSetTag_ids()) {
                java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
                this.tag_ids = __this__tag_ids;
            }
            this.company_id = other.company_id;
        }

        public batchNewAddTalentTag_args deepCopy() {
            return new batchNewAddTalentTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            this.tag_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchNewAddTalentTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchNewAddTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getTag_idsSize() {
            return (this.tag_ids == null) ? 0 : this.tag_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
            return (this.tag_ids == null) ? null : this.tag_ids.iterator();
        }

        public void addToTag_ids(int elem) {
            if (this.tag_ids == null) {
                this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.tag_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getTag_ids() {
            return this.tag_ids;
        }

        public batchNewAddTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
            this.tag_ids = tag_ids;
            return this;
        }

        public void unsetTag_ids() {
            this.tag_ids = null;
        }

        /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_ids() {
            return this.tag_ids != null;
        }

        public void setTag_idsIsSet(boolean value) {
            if (!value) {
                this.tag_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchNewAddTalentTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case TAG_IDS:
                    if (value == null) {
                        unsetTag_ids();
                    } else {
                        setTag_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case TAG_IDS:
                    return getTag_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case TAG_IDS:
                    return isSetTag_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchNewAddTalentTag_args)
                return this.equals((batchNewAddTalentTag_args)that);
            return false;
        }

        public boolean equals(batchNewAddTalentTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_tag_ids = true && this.isSetTag_ids();
            boolean that_present_tag_ids = true && that.isSetTag_ids();
            if (this_present_tag_ids || that_present_tag_ids) {
                if (!(this_present_tag_ids && that_present_tag_ids))
                    return false;
                if (!this.tag_ids.equals(that.tag_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
            if (isSetTag_ids())
                hashCode = hashCode * 8191 + tag_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchNewAddTalentTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchNewAddTalentTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_ids:");
            if (this.tag_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.tag_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchNewAddTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchNewAddTalentTag_argsStandardScheme getScheme() {
                return new batchNewAddTalentTag_argsStandardScheme();
            }
        }

        private static class batchNewAddTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchNewAddTalentTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list128.size);
                                    int _elem129;
                                    for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                                    {
                                        _elem129 = iprot.readI32();
                                        struct.user_ids.add(_elem129);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                                    struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list131.size);
                                    int _elem132;
                                    for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                                    {
                                        _elem132 = iprot.readI32();
                                        struct.tag_ids.add(_elem132);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setTag_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter134 : struct.user_ids)
                        {
                            oprot.writeI32(_iter134);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.tag_ids != null) {
                    oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
                        for (int _iter135 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter135);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchNewAddTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchNewAddTalentTag_argsTupleScheme getScheme() {
                return new batchNewAddTalentTag_argsTupleScheme();
            }
        }

        private static class batchNewAddTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchNewAddTalentTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_ids()) {
                    optionals.set(2);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter136 : struct.user_ids)
                        {
                            oprot.writeI32(_iter136);
                        }
                    }
                }
                if (struct.isSetTag_ids()) {
                    {
                        oprot.writeI32(struct.tag_ids.size());
                        for (int _iter137 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter137);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list138.size);
                        int _elem139;
                        for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                        {
                            _elem139 = iprot.readI32();
                            struct.user_ids.add(_elem139);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list141.size);
                        int _elem142;
                        for (int _i143 = 0; _i143 < _list141.size; ++_i143)
                        {
                            _elem142 = iprot.readI32();
                            struct.tag_ids.add(_elem142);
                        }
                    }
                    struct.setTag_idsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchNewAddTalentTag_result implements org.apache.thrift.TBase<batchNewAddTalentTag_result, batchNewAddTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchNewAddTalentTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchNewAddTalentTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchNewAddTalentTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchNewAddTalentTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchNewAddTalentTag_result.class, metaDataMap);
        }

        public batchNewAddTalentTag_result() {
        }

        public batchNewAddTalentTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchNewAddTalentTag_result(batchNewAddTalentTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchNewAddTalentTag_result deepCopy() {
            return new batchNewAddTalentTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchNewAddTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchNewAddTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchNewAddTalentTag_result)
                return this.equals((batchNewAddTalentTag_result)that);
            return false;
        }

        public boolean equals(batchNewAddTalentTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchNewAddTalentTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchNewAddTalentTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchNewAddTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchNewAddTalentTag_resultStandardScheme getScheme() {
                return new batchNewAddTalentTag_resultStandardScheme();
            }
        }

        private static class batchNewAddTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchNewAddTalentTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchNewAddTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchNewAddTalentTag_resultTupleScheme getScheme() {
                return new batchNewAddTalentTag_resultTupleScheme();
            }
        }

        private static class batchNewAddTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchNewAddTalentTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentStat_args implements org.apache.thrift.TBase<getTalentStat_args, getTalentStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentStat_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentStat_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentStat_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentStat_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TYPE((short)3, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentStat_args.class, metaDataMap);
        }

        public getTalentStat_args() {
        }

        public getTalentStat_args(
                int hr_id,
                int company_id,
                int type)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentStat_args(getTalentStat_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.type = other.type;
        }

        public getTalentStat_args deepCopy() {
            return new getTalentStat_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentStat_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentStat_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getTalentStat_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentStat_args)
                return this.equals((getTalentStat_args)that);
            return false;
        }

        public boolean equals(getTalentStat_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            return hashCode;
        }

        @Override
        public int compareTo(getTalentStat_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentStat_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentStat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentStat_argsStandardScheme getScheme() {
                return new getTalentStat_argsStandardScheme();
            }
        }

        private static class getTalentStat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentStat_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentStat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentStat_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentStat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentStat_argsTupleScheme getScheme() {
                return new getTalentStat_argsTupleScheme();
            }
        }

        private static class getTalentStat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentStat_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentStat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentStat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentStat_result implements org.apache.thrift.TBase<getTalentStat_result, getTalentStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentStat_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentStat_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentStat_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentStat_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentStat_result.class, metaDataMap);
        }

        public getTalentStat_result() {
        }

        public getTalentStat_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentStat_result(getTalentStat_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentStat_result deepCopy() {
            return new getTalentStat_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentStat_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentStat_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentStat_result)
                return this.equals((getTalentStat_result)that);
            return false;
        }

        public boolean equals(getTalentStat_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentStat_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentStat_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentStat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentStat_resultStandardScheme getScheme() {
                return new getTalentStat_resultStandardScheme();
            }
        }

        private static class getTalentStat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentStat_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentStat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentStat_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentStat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentStat_resultTupleScheme getScheme() {
                return new getTalentStat_resultTupleScheme();
            }
        }

        private static class getTalentStat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentStat_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentStat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentStat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyUserPublic_args implements org.apache.thrift.TBase<getCompanyUserPublic_args, getCompanyUserPublic_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyUserPublic_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyUserPublic_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyUserPublic_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyUserPublic_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyUserPublic_args.class, metaDataMap);
        }

        public getCompanyUserPublic_args() {
        }

        public getCompanyUserPublic_args(
                int hr_id,
                int company_id,
                int user_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyUserPublic_args(getCompanyUserPublic_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
        }

        public getCompanyUserPublic_args deepCopy() {
            return new getCompanyUserPublic_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getCompanyUserPublic_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getCompanyUserPublic_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getCompanyUserPublic_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyUserPublic_args)
                return this.equals((getCompanyUserPublic_args)that);
            return false;
        }

        public boolean equals(getCompanyUserPublic_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyUserPublic_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyUserPublic_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyUserPublic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyUserPublic_argsStandardScheme getScheme() {
                return new getCompanyUserPublic_argsStandardScheme();
            }
        }

        private static class getCompanyUserPublic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyUserPublic_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyUserPublic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyUserPublic_argsTupleScheme getScheme() {
                return new getCompanyUserPublic_argsTupleScheme();
            }
        }

        private static class getCompanyUserPublic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyUserPublic_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyUserPublic_result implements org.apache.thrift.TBase<getCompanyUserPublic_result, getCompanyUserPublic_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyUserPublic_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyUserPublic_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyUserPublic_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyUserPublic_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyUserPublic_result.class, metaDataMap);
        }

        public getCompanyUserPublic_result() {
        }

        public getCompanyUserPublic_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyUserPublic_result(getCompanyUserPublic_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyUserPublic_result deepCopy() {
            return new getCompanyUserPublic_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyUserPublic_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyUserPublic_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyUserPublic_result)
                return this.equals((getCompanyUserPublic_result)that);
            return false;
        }

        public boolean equals(getCompanyUserPublic_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyUserPublic_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyUserPublic_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyUserPublic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyUserPublic_resultStandardScheme getScheme() {
                return new getCompanyUserPublic_resultStandardScheme();
            }
        }

        private static class getCompanyUserPublic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyUserPublic_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyUserPublic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyUserPublic_resultTupleScheme getScheme() {
                return new getCompanyUserPublic_resultTupleScheme();
            }
        }

        private static class getCompanyUserPublic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyUserPublic_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyTalent_args implements org.apache.thrift.TBase<getCompanyTalent_args, getCompanyTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyTalent_args.class, metaDataMap);
        }

        public getCompanyTalent_args() {
        }

        public getCompanyTalent_args(
                int hr_id,
                int company_id,
                int user_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyTalent_args(getCompanyTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
        }

        public getCompanyTalent_args deepCopy() {
            return new getCompanyTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getCompanyTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getCompanyTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getCompanyTalent_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyTalent_args)
                return this.equals((getCompanyTalent_args)that);
            return false;
        }

        public boolean equals(getCompanyTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTalent_argsStandardScheme getScheme() {
                return new getCompanyTalent_argsStandardScheme();
            }
        }

        private static class getCompanyTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTalent_argsTupleScheme getScheme() {
                return new getCompanyTalent_argsTupleScheme();
            }
        }

        private static class getCompanyTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyTalent_result implements org.apache.thrift.TBase<getCompanyTalent_result, getCompanyTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyTalent_result.class, metaDataMap);
        }

        public getCompanyTalent_result() {
        }

        public getCompanyTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyTalent_result(getCompanyTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyTalent_result deepCopy() {
            return new getCompanyTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyTalent_result)
                return this.equals((getCompanyTalent_result)that);
            return false;
        }

        public boolean equals(getCompanyTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTalent_resultStandardScheme getScheme() {
                return new getCompanyTalent_resultStandardScheme();
            }
        }

        private static class getCompanyTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTalent_resultTupleScheme getScheme() {
                return new getCompanyTalent_resultTupleScheme();
            }
        }

        private static class getCompanyTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getHrUserTag_args implements org.apache.thrift.TBase<getHrUserTag_args, getHrUserTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHrUserTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrUserTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrUserTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrUserTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrUserTag_args.class, metaDataMap);
        }

        public getHrUserTag_args() {
        }

        public getHrUserTag_args(
                int hr_id,
                int company_id,
                int user_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHrUserTag_args(getHrUserTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
        }

        public getHrUserTag_args deepCopy() {
            return new getHrUserTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getHrUserTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getHrUserTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getHrUserTag_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getHrUserTag_args)
                return this.equals((getHrUserTag_args)that);
            return false;
        }

        public boolean equals(getHrUserTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(getHrUserTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrUserTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHrUserTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrUserTag_argsStandardScheme getScheme() {
                return new getHrUserTag_argsStandardScheme();
            }
        }

        private static class getHrUserTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrUserTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHrUserTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHrUserTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHrUserTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrUserTag_argsTupleScheme getScheme() {
                return new getHrUserTag_argsTupleScheme();
            }
        }

        private static class getHrUserTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrUserTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getHrUserTag_result implements org.apache.thrift.TBase<getHrUserTag_result, getHrUserTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHrUserTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrUserTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrUserTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrUserTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrUserTag_result.class, metaDataMap);
        }

        public getHrUserTag_result() {
        }

        public getHrUserTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHrUserTag_result(getHrUserTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getHrUserTag_result deepCopy() {
            return new getHrUserTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getHrUserTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getHrUserTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getHrUserTag_result)
                return this.equals((getHrUserTag_result)that);
            return false;
        }

        public boolean equals(getHrUserTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getHrUserTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrUserTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHrUserTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrUserTag_resultStandardScheme getScheme() {
                return new getHrUserTag_resultStandardScheme();
            }
        }

        private static class getHrUserTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrUserTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHrUserTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHrUserTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHrUserTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrUserTag_resultTupleScheme getScheme() {
                return new getHrUserTag_resultTupleScheme();
            }
        }

        private static class getHrUserTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrUserTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getUserOrigin_args implements org.apache.thrift.TBase<getUserOrigin_args, getUserOrigin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserOrigin_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserOrigin_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserOrigin_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserOrigin_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserOrigin_args.class, metaDataMap);
        }

        public getUserOrigin_args() {
        }

        public getUserOrigin_args(
                int hr_id,
                int company_id,
                int user_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUserOrigin_args(getUserOrigin_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
        }

        public getUserOrigin_args deepCopy() {
            return new getUserOrigin_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getUserOrigin_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getUserOrigin_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getUserOrigin_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getUserOrigin_args)
                return this.equals((getUserOrigin_args)that);
            return false;
        }

        public boolean equals(getUserOrigin_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(getUserOrigin_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserOrigin_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getUserOrigin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUserOrigin_argsStandardScheme getScheme() {
                return new getUserOrigin_argsStandardScheme();
            }
        }

        private static class getUserOrigin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserOrigin_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUserOrigin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUserOrigin_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUserOrigin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUserOrigin_argsTupleScheme getScheme() {
                return new getUserOrigin_argsTupleScheme();
            }
        }

        private static class getUserOrigin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserOrigin_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUserOrigin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUserOrigin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getUserOrigin_result implements org.apache.thrift.TBase<getUserOrigin_result, getUserOrigin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserOrigin_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserOrigin_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserOrigin_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserOrigin_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserOrigin_result.class, metaDataMap);
        }

        public getUserOrigin_result() {
        }

        public getUserOrigin_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUserOrigin_result(getUserOrigin_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getUserOrigin_result deepCopy() {
            return new getUserOrigin_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getUserOrigin_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getUserOrigin_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getUserOrigin_result)
                return this.equals((getUserOrigin_result)that);
            return false;
        }

        public boolean equals(getUserOrigin_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getUserOrigin_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserOrigin_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getUserOrigin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUserOrigin_resultStandardScheme getScheme() {
                return new getUserOrigin_resultStandardScheme();
            }
        }

        private static class getUserOrigin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserOrigin_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUserOrigin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUserOrigin_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUserOrigin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUserOrigin_resultTupleScheme getScheme() {
                return new getUserOrigin_resultTupleScheme();
            }
        }

        private static class getUserOrigin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserOrigin_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUserOrigin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUserOrigin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentAndPublicHr_args implements org.apache.thrift.TBase<getTalentAndPublicHr_args, getTalentAndPublicHr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAndPublicHr_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAndPublicHr_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAndPublicHr_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAndPublicHr_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_IDS((short)3, "user_ids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_IDS
                        return USER_IDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAndPublicHr_args.class, metaDataMap);
        }

        public getTalentAndPublicHr_args() {
        }

        public getTalentAndPublicHr_args(
                int hr_id,
                int company_id,
                java.util.List<java.lang.Integer> user_ids)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_ids = user_ids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentAndPublicHr_args(getTalentAndPublicHr_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
        }

        public getTalentAndPublicHr_args deepCopy() {
            return new getTalentAndPublicHr_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.user_ids = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentAndPublicHr_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentAndPublicHr_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public getTalentAndPublicHr_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_IDS:
                    return getUser_ids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_IDS:
                    return isSetUser_ids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentAndPublicHr_args)
                return this.equals((getTalentAndPublicHr_args)that);
            return false;
        }

        public boolean equals(getTalentAndPublicHr_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentAndPublicHr_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAndPublicHr_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentAndPublicHr_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAndPublicHr_argsStandardScheme getScheme() {
                return new getTalentAndPublicHr_argsStandardScheme();
            }
        }

        private static class getTalentAndPublicHr_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAndPublicHr_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAndPublicHr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list144.size);
                                    int _elem145;
                                    for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                                    {
                                        _elem145 = iprot.readI32();
                                        struct.user_ids.add(_elem145);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAndPublicHr_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter147 : struct.user_ids)
                        {
                            oprot.writeI32(_iter147);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentAndPublicHr_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAndPublicHr_argsTupleScheme getScheme() {
                return new getTalentAndPublicHr_argsTupleScheme();
            }
        }

        private static class getTalentAndPublicHr_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAndPublicHr_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAndPublicHr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter148 : struct.user_ids)
                        {
                            oprot.writeI32(_iter148);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAndPublicHr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list149.size);
                        int _elem150;
                        for (int _i151 = 0; _i151 < _list149.size; ++_i151)
                        {
                            _elem150 = iprot.readI32();
                            struct.user_ids.add(_elem150);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentAndPublicHr_result implements org.apache.thrift.TBase<getTalentAndPublicHr_result, getTalentAndPublicHr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAndPublicHr_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAndPublicHr_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAndPublicHr_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAndPublicHr_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAndPublicHr_result.class, metaDataMap);
        }

        public getTalentAndPublicHr_result() {
        }

        public getTalentAndPublicHr_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentAndPublicHr_result(getTalentAndPublicHr_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentAndPublicHr_result deepCopy() {
            return new getTalentAndPublicHr_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentAndPublicHr_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentAndPublicHr_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentAndPublicHr_result)
                return this.equals((getTalentAndPublicHr_result)that);
            return false;
        }

        public boolean equals(getTalentAndPublicHr_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentAndPublicHr_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAndPublicHr_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentAndPublicHr_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAndPublicHr_resultStandardScheme getScheme() {
                return new getTalentAndPublicHr_resultStandardScheme();
            }
        }

        private static class getTalentAndPublicHr_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAndPublicHr_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAndPublicHr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAndPublicHr_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentAndPublicHr_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAndPublicHr_resultTupleScheme getScheme() {
                return new getTalentAndPublicHr_resultTupleScheme();
            }
        }

        private static class getTalentAndPublicHr_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAndPublicHr_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAndPublicHr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAndPublicHr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionOrCompanyPast_args implements org.apache.thrift.TBase<getPositionOrCompanyPast_args, getPositionOrCompanyPast_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionOrCompanyPast_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionOrCompanyPast_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionOrCompanyPast_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionOrCompanyPast_argsTupleSchemeFactory();

        public int company_id; // required
        public int type; // required
        public int flag; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "company_id"),
            TYPE((short)2, "type"),
            FLAG((short)3, "flag");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // TYPE
                        return TYPE;
                    case 3: // FLAG
                        return FLAG;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANY_ID_ISSET_ID = 0;
        private static final int __TYPE_ISSET_ID = 1;
        private static final int __FLAG_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionOrCompanyPast_args.class, metaDataMap);
        }

        public getPositionOrCompanyPast_args() {
        }

        public getPositionOrCompanyPast_args(
                int company_id,
                int type,
                int flag)
        {
            this();
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.flag = flag;
            setFlagIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionOrCompanyPast_args(getPositionOrCompanyPast_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.company_id = other.company_id;
            this.type = other.type;
            this.flag = other.flag;
        }

        public getPositionOrCompanyPast_args deepCopy() {
            return new getPositionOrCompanyPast_args(this);
        }

        @Override
        public void clear() {
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
            setFlagIsSet(false);
            this.flag = 0;
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getPositionOrCompanyPast_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getPositionOrCompanyPast_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getFlag() {
            return this.flag;
        }

        public getPositionOrCompanyPast_args setFlag(int flag) {
            this.flag = flag;
            setFlagIsSet(true);
            return this;
        }

        public void unsetFlag() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        /** Returns true if field flag is set (has been assigned a value) and false otherwise */
        public boolean isSetFlag() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        public void setFlagIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case FLAG:
                    if (value == null) {
                        unsetFlag();
                    } else {
                        setFlag((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

                case FLAG:
                    return getFlag();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
                case FLAG:
                    return isSetFlag();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionOrCompanyPast_args)
                return this.equals((getPositionOrCompanyPast_args)that);
            return false;
        }

        public boolean equals(getPositionOrCompanyPast_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_flag = true;
            boolean that_present_flag = true;
            if (this_present_flag || that_present_flag) {
                if (!(this_present_flag && that_present_flag))
                    return false;
                if (this.flag != that.flag)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + flag;

            return hashCode;
        }

        @Override
        public int compareTo(getPositionOrCompanyPast_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFlag()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionOrCompanyPast_args(");
            boolean first = true;

            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("flag:");
            sb.append(this.flag);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionOrCompanyPast_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionOrCompanyPast_argsStandardScheme getScheme() {
                return new getPositionOrCompanyPast_argsStandardScheme();
            }
        }

        private static class getPositionOrCompanyPast_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionOrCompanyPast_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // FLAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.flag = iprot.readI32();
                                struct.setFlagIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FLAG_FIELD_DESC);
                oprot.writeI32(struct.flag);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionOrCompanyPast_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionOrCompanyPast_argsTupleScheme getScheme() {
                return new getPositionOrCompanyPast_argsTupleScheme();
            }
        }

        private static class getPositionOrCompanyPast_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionOrCompanyPast_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompany_id()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                if (struct.isSetFlag()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetFlag()) {
                    oprot.writeI32(struct.flag);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.flag = iprot.readI32();
                    struct.setFlagIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionOrCompanyPast_result implements org.apache.thrift.TBase<getPositionOrCompanyPast_result, getPositionOrCompanyPast_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionOrCompanyPast_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionOrCompanyPast_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionOrCompanyPast_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionOrCompanyPast_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionOrCompanyPast_result.class, metaDataMap);
        }

        public getPositionOrCompanyPast_result() {
        }

        public getPositionOrCompanyPast_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionOrCompanyPast_result(getPositionOrCompanyPast_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getPositionOrCompanyPast_result deepCopy() {
            return new getPositionOrCompanyPast_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPositionOrCompanyPast_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getPositionOrCompanyPast_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionOrCompanyPast_result)
                return this.equals((getPositionOrCompanyPast_result)that);
            return false;
        }

        public boolean equals(getPositionOrCompanyPast_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionOrCompanyPast_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionOrCompanyPast_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionOrCompanyPast_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionOrCompanyPast_resultStandardScheme getScheme() {
                return new getPositionOrCompanyPast_resultStandardScheme();
            }
        }

        private static class getPositionOrCompanyPast_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionOrCompanyPast_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionOrCompanyPast_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionOrCompanyPast_resultTupleScheme getScheme() {
                return new getPositionOrCompanyPast_resultTupleScheme();
            }
        }

        private static class getPositionOrCompanyPast_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionOrCompanyPast_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addPositionOrCompanyPast_args implements org.apache.thrift.TBase<addPositionOrCompanyPast_args, addPositionOrCompanyPast_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPositionOrCompanyPast_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPositionOrCompanyPast_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPositionOrCompanyPast_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPositionOrCompanyPast_argsTupleSchemeFactory();

        public int company_id; // required
        public int type; // required
        public int flag; // required
        public java.lang.String name; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "company_id"),
            TYPE((short)2, "type"),
            FLAG((short)3, "flag"),
            NAME((short)4, "name");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // TYPE
                        return TYPE;
                    case 3: // FLAG
                        return FLAG;
                    case 4: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANY_ID_ISSET_ID = 0;
        private static final int __TYPE_ISSET_ID = 1;
        private static final int __FLAG_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPositionOrCompanyPast_args.class, metaDataMap);
        }

        public addPositionOrCompanyPast_args() {
        }

        public addPositionOrCompanyPast_args(
                int company_id,
                int type,
                int flag,
                java.lang.String name)
        {
            this();
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.flag = flag;
            setFlagIsSet(true);
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addPositionOrCompanyPast_args(addPositionOrCompanyPast_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.company_id = other.company_id;
            this.type = other.type;
            this.flag = other.flag;
            if (other.isSetName()) {
                this.name = other.name;
            }
        }

        public addPositionOrCompanyPast_args deepCopy() {
            return new addPositionOrCompanyPast_args(this);
        }

        @Override
        public void clear() {
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
            setFlagIsSet(false);
            this.flag = 0;
            this.name = null;
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public addPositionOrCompanyPast_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public addPositionOrCompanyPast_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getFlag() {
            return this.flag;
        }

        public addPositionOrCompanyPast_args setFlag(int flag) {
            this.flag = flag;
            setFlagIsSet(true);
            return this;
        }

        public void unsetFlag() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        /** Returns true if field flag is set (has been assigned a value) and false otherwise */
        public boolean isSetFlag() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        public void setFlagIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
        }

        public java.lang.String getName() {
            return this.name;
        }

        public addPositionOrCompanyPast_args setName(java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case FLAG:
                    if (value == null) {
                        unsetFlag();
                    } else {
                        setFlag((java.lang.Integer)value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

                case FLAG:
                    return getFlag();

                case NAME:
                    return getName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
                case FLAG:
                    return isSetFlag();
                case NAME:
                    return isSetName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addPositionOrCompanyPast_args)
                return this.equals((addPositionOrCompanyPast_args)that);
            return false;
        }

        public boolean equals(addPositionOrCompanyPast_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_flag = true;
            boolean that_present_flag = true;
            if (this_present_flag || that_present_flag) {
                if (!(this_present_flag && that_present_flag))
                    return false;
                if (this.flag != that.flag)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + flag;

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addPositionOrCompanyPast_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFlag()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addPositionOrCompanyPast_args(");
            boolean first = true;

            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("flag:");
            sb.append(this.flag);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addPositionOrCompanyPast_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPositionOrCompanyPast_argsStandardScheme getScheme() {
                return new addPositionOrCompanyPast_argsStandardScheme();
            }
        }

        private static class addPositionOrCompanyPast_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPositionOrCompanyPast_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // FLAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.flag = iprot.readI32();
                                struct.setFlagIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FLAG_FIELD_DESC);
                oprot.writeI32(struct.flag);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addPositionOrCompanyPast_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPositionOrCompanyPast_argsTupleScheme getScheme() {
                return new addPositionOrCompanyPast_argsTupleScheme();
            }
        }

        private static class addPositionOrCompanyPast_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPositionOrCompanyPast_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompany_id()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                if (struct.isSetFlag()) {
                    optionals.set(2);
                }
                if (struct.isSetName()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetFlag()) {
                    oprot.writeI32(struct.flag);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.flag = iprot.readI32();
                    struct.setFlagIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addPositionOrCompanyPast_result implements org.apache.thrift.TBase<addPositionOrCompanyPast_result, addPositionOrCompanyPast_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPositionOrCompanyPast_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPositionOrCompanyPast_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPositionOrCompanyPast_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPositionOrCompanyPast_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPositionOrCompanyPast_result.class, metaDataMap);
        }

        public addPositionOrCompanyPast_result() {
        }

        public addPositionOrCompanyPast_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addPositionOrCompanyPast_result(addPositionOrCompanyPast_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addPositionOrCompanyPast_result deepCopy() {
            return new addPositionOrCompanyPast_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public addPositionOrCompanyPast_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addPositionOrCompanyPast_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addPositionOrCompanyPast_result)
                return this.equals((addPositionOrCompanyPast_result)that);
            return false;
        }

        public boolean equals(addPositionOrCompanyPast_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addPositionOrCompanyPast_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addPositionOrCompanyPast_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addPositionOrCompanyPast_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPositionOrCompanyPast_resultStandardScheme getScheme() {
                return new addPositionOrCompanyPast_resultStandardScheme();
            }
        }

        private static class addPositionOrCompanyPast_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPositionOrCompanyPast_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addPositionOrCompanyPast_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPositionOrCompanyPast_resultTupleScheme getScheme() {
                return new addPositionOrCompanyPast_resultTupleScheme();
            }
        }

        private static class addPositionOrCompanyPast_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPositionOrCompanyPast_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyTagList_args implements org.apache.thrift.TBase<getCompanyTagList_args, getCompanyTagList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyTagList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyTagList_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyTagList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyTagList_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyTagList_args.class, metaDataMap);
        }

        public getCompanyTagList_args() {
        }

        public getCompanyTagList_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyTagList_args(getCompanyTagList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getCompanyTagList_args deepCopy() {
            return new getCompanyTagList_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getCompanyTagList_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getCompanyTagList_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getCompanyTagList_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getCompanyTagList_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyTagList_args)
                return this.equals((getCompanyTagList_args)that);
            return false;
        }

        public boolean equals(getCompanyTagList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyTagList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyTagList_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyTagList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTagList_argsStandardScheme getScheme() {
                return new getCompanyTagList_argsStandardScheme();
            }
        }

        private static class getCompanyTagList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyTagList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyTagList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyTagList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTagList_argsTupleScheme getScheme() {
                return new getCompanyTagList_argsTupleScheme();
            }
        }

        private static class getCompanyTagList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyTagList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyTagList_result implements org.apache.thrift.TBase<getCompanyTagList_result, getCompanyTagList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyTagList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyTagList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyTagList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyTagList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyTagList_result.class, metaDataMap);
        }

        public getCompanyTagList_result() {
        }

        public getCompanyTagList_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyTagList_result(getCompanyTagList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyTagList_result deepCopy() {
            return new getCompanyTagList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyTagList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyTagList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyTagList_result)
                return this.equals((getCompanyTagList_result)that);
            return false;
        }

        public boolean equals(getCompanyTagList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyTagList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyTagList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyTagList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTagList_resultStandardScheme getScheme() {
                return new getCompanyTagList_resultStandardScheme();
            }
        }

        private static class getCompanyTagList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyTagList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyTagList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyTagList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTagList_resultTupleScheme getScheme() {
                return new getCompanyTagList_resultTupleScheme();
            }
        }

        private static class getCompanyTagList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyTagList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class deleteCompanyTagByIds_args implements org.apache.thrift.TBase<deleteCompanyTagByIds_args, deleteCompanyTagByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCompanyTagByIds_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCompanyTagByIds_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("company_tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCompanyTagByIds_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCompanyTagByIds_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.util.List<java.lang.Integer> company_tag_ids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            COMPANY_TAG_IDS((short)3, "company_tag_ids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // COMPANY_TAG_IDS
                        return COMPANY_TAG_IDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("company_tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCompanyTagByIds_args.class, metaDataMap);
        }

        public deleteCompanyTagByIds_args() {
        }

        public deleteCompanyTagByIds_args(
                int hr_id,
                int company_id,
                java.util.List<java.lang.Integer> company_tag_ids)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.company_tag_ids = company_tag_ids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteCompanyTagByIds_args(deleteCompanyTagByIds_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetCompany_tag_ids()) {
                java.util.List<java.lang.Integer> __this__company_tag_ids = new java.util.ArrayList<java.lang.Integer>(other.company_tag_ids);
                this.company_tag_ids = __this__company_tag_ids;
            }
        }

        public deleteCompanyTagByIds_args deepCopy() {
            return new deleteCompanyTagByIds_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.company_tag_ids = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public deleteCompanyTagByIds_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public deleteCompanyTagByIds_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getCompany_tag_idsSize() {
            return (this.company_tag_ids == null) ? 0 : this.company_tag_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getCompany_tag_idsIterator() {
            return (this.company_tag_ids == null) ? null : this.company_tag_ids.iterator();
        }

        public void addToCompany_tag_ids(int elem) {
            if (this.company_tag_ids == null) {
                this.company_tag_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.company_tag_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getCompany_tag_ids() {
            return this.company_tag_ids;
        }

        public deleteCompanyTagByIds_args setCompany_tag_ids(java.util.List<java.lang.Integer> company_tag_ids) {
            this.company_tag_ids = company_tag_ids;
            return this;
        }

        public void unsetCompany_tag_ids() {
            this.company_tag_ids = null;
        }

        /** Returns true if field company_tag_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_tag_ids() {
            return this.company_tag_ids != null;
        }

        public void setCompany_tag_idsIsSet(boolean value) {
            if (!value) {
                this.company_tag_ids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_TAG_IDS:
                    if (value == null) {
                        unsetCompany_tag_ids();
                    } else {
                        setCompany_tag_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case COMPANY_TAG_IDS:
                    return getCompany_tag_ids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case COMPANY_TAG_IDS:
                    return isSetCompany_tag_ids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteCompanyTagByIds_args)
                return this.equals((deleteCompanyTagByIds_args)that);
            return false;
        }

        public boolean equals(deleteCompanyTagByIds_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_company_tag_ids = true && this.isSetCompany_tag_ids();
            boolean that_present_company_tag_ids = true && that.isSetCompany_tag_ids();
            if (this_present_company_tag_ids || that_present_company_tag_ids) {
                if (!(this_present_company_tag_ids && that_present_company_tag_ids))
                    return false;
                if (!this.company_tag_ids.equals(that.company_tag_ids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetCompany_tag_ids()) ? 131071 : 524287);
            if (isSetCompany_tag_ids())
                hashCode = hashCode * 8191 + company_tag_ids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(deleteCompanyTagByIds_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_tag_ids()).compareTo(other.isSetCompany_tag_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_tag_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_tag_ids, other.company_tag_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCompanyTagByIds_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_tag_ids:");
            if (this.company_tag_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.company_tag_ids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteCompanyTagByIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteCompanyTagByIds_argsStandardScheme getScheme() {
                return new deleteCompanyTagByIds_argsStandardScheme();
            }
        }

        private static class deleteCompanyTagByIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCompanyTagByIds_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCompanyTagByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_TAG_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                                    struct.company_tag_ids = new java.util.ArrayList<java.lang.Integer>(_list152.size);
                                    int _elem153;
                                    for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                                    {
                                        _elem153 = iprot.readI32();
                                        struct.company_tag_ids.add(_elem153);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setCompany_tag_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCompanyTagByIds_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.company_tag_ids != null) {
                    oprot.writeFieldBegin(COMPANY_TAG_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.company_tag_ids.size()));
                        for (int _iter155 : struct.company_tag_ids)
                        {
                            oprot.writeI32(_iter155);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteCompanyTagByIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteCompanyTagByIds_argsTupleScheme getScheme() {
                return new deleteCompanyTagByIds_argsTupleScheme();
            }
        }

        private static class deleteCompanyTagByIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCompanyTagByIds_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteCompanyTagByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetCompany_tag_ids()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetCompany_tag_ids()) {
                    {
                        oprot.writeI32(struct.company_tag_ids.size());
                        for (int _iter156 : struct.company_tag_ids)
                        {
                            oprot.writeI32(_iter156);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteCompanyTagByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.company_tag_ids = new java.util.ArrayList<java.lang.Integer>(_list157.size);
                        int _elem158;
                        for (int _i159 = 0; _i159 < _list157.size; ++_i159)
                        {
                            _elem158 = iprot.readI32();
                            struct.company_tag_ids.add(_elem158);
                        }
                    }
                    struct.setCompany_tag_idsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class deleteCompanyTagByIds_result implements org.apache.thrift.TBase<deleteCompanyTagByIds_result, deleteCompanyTagByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCompanyTagByIds_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCompanyTagByIds_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCompanyTagByIds_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCompanyTagByIds_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCompanyTagByIds_result.class, metaDataMap);
        }

        public deleteCompanyTagByIds_result() {
        }

        public deleteCompanyTagByIds_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteCompanyTagByIds_result(deleteCompanyTagByIds_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public deleteCompanyTagByIds_result deepCopy() {
            return new deleteCompanyTagByIds_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public deleteCompanyTagByIds_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public deleteCompanyTagByIds_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteCompanyTagByIds_result)
                return this.equals((deleteCompanyTagByIds_result)that);
            return false;
        }

        public boolean equals(deleteCompanyTagByIds_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(deleteCompanyTagByIds_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCompanyTagByIds_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteCompanyTagByIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteCompanyTagByIds_resultStandardScheme getScheme() {
                return new deleteCompanyTagByIds_resultStandardScheme();
            }
        }

        private static class deleteCompanyTagByIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCompanyTagByIds_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCompanyTagByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCompanyTagByIds_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteCompanyTagByIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteCompanyTagByIds_resultTupleScheme getScheme() {
                return new deleteCompanyTagByIds_resultTupleScheme();
            }
        }

        private static class deleteCompanyTagByIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCompanyTagByIds_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteCompanyTagByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteCompanyTagByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyIdInfo_args implements org.apache.thrift.TBase<getCompanyIdInfo_args, getCompanyIdInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyIdInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyIdInfo_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_tag_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyIdInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyIdInfo_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int company_tag_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            COMPANY_TAG_ID((short)3, "company_tag_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // COMPANY_TAG_ID
                        return COMPANY_TAG_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __COMPANY_TAG_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("company_tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyIdInfo_args.class, metaDataMap);
        }

        public getCompanyIdInfo_args() {
        }

        public getCompanyIdInfo_args(
                int hr_id,
                int company_id,
                int company_tag_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.company_tag_id = company_tag_id;
            setCompany_tag_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyIdInfo_args(getCompanyIdInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.company_tag_id = other.company_tag_id;
        }

        public getCompanyIdInfo_args deepCopy() {
            return new getCompanyIdInfo_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setCompany_tag_idIsSet(false);
            this.company_tag_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getCompanyIdInfo_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getCompanyIdInfo_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getCompany_tag_id() {
            return this.company_tag_id;
        }

        public getCompanyIdInfo_args setCompany_tag_id(int company_tag_id) {
            this.company_tag_id = company_tag_id;
            setCompany_tag_idIsSet(true);
            return this;
        }

        public void unsetCompany_tag_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_TAG_ID_ISSET_ID);
        }

        /** Returns true if field company_tag_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_tag_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_TAG_ID_ISSET_ID);
        }

        public void setCompany_tag_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_TAG_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_TAG_ID:
                    if (value == null) {
                        unsetCompany_tag_id();
                    } else {
                        setCompany_tag_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case COMPANY_TAG_ID:
                    return getCompany_tag_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case COMPANY_TAG_ID:
                    return isSetCompany_tag_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyIdInfo_args)
                return this.equals((getCompanyIdInfo_args)that);
            return false;
        }

        public boolean equals(getCompanyIdInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_company_tag_id = true;
            boolean that_present_company_tag_id = true;
            if (this_present_company_tag_id || that_present_company_tag_id) {
                if (!(this_present_company_tag_id && that_present_company_tag_id))
                    return false;
                if (this.company_tag_id != that.company_tag_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + company_tag_id;

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyIdInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_tag_id()).compareTo(other.isSetCompany_tag_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_tag_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_tag_id, other.company_tag_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyIdInfo_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_tag_id:");
            sb.append(this.company_tag_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyIdInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyIdInfo_argsStandardScheme getScheme() {
                return new getCompanyIdInfo_argsStandardScheme();
            }
        }

        private static class getCompanyIdInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyIdInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyIdInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_TAG_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_tag_id = iprot.readI32();
                                struct.setCompany_tag_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyIdInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_TAG_ID_FIELD_DESC);
                oprot.writeI32(struct.company_tag_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyIdInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyIdInfo_argsTupleScheme getScheme() {
                return new getCompanyIdInfo_argsTupleScheme();
            }
        }

        private static class getCompanyIdInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyIdInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyIdInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetCompany_tag_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetCompany_tag_id()) {
                    oprot.writeI32(struct.company_tag_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyIdInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.company_tag_id = iprot.readI32();
                    struct.setCompany_tag_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyIdInfo_result implements org.apache.thrift.TBase<getCompanyIdInfo_result, getCompanyIdInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyIdInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyIdInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyIdInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyIdInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyIdInfo_result.class, metaDataMap);
        }

        public getCompanyIdInfo_result() {
        }

        public getCompanyIdInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyIdInfo_result(getCompanyIdInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyIdInfo_result deepCopy() {
            return new getCompanyIdInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyIdInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyIdInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyIdInfo_result)
                return this.equals((getCompanyIdInfo_result)that);
            return false;
        }

        public boolean equals(getCompanyIdInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyIdInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyIdInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyIdInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyIdInfo_resultStandardScheme getScheme() {
                return new getCompanyIdInfo_resultStandardScheme();
            }
        }

        private static class getCompanyIdInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyIdInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyIdInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyIdInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyIdInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyIdInfo_resultTupleScheme getScheme() {
                return new getCompanyIdInfo_resultTupleScheme();
            }
        }

        private static class getCompanyIdInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyIdInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyIdInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyIdInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addCompanyTag_args implements org.apache.thrift.TBase<addCompanyTag_args, addCompanyTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCompanyTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCompanyTag_args");

        private static final org.apache.thrift.protocol.TField COMPANY_TAG_DO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyTagDO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCompanyTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCompanyTag_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO; // required
        public int hr_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_TAG_DO((short)1, "companyTagDO"),
            HR_ID((short)2, "hr_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_TAG_DO
                        return COMPANY_TAG_DO;
                    case 2: // HR_ID
                        return HR_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_TAG_DO, new org.apache.thrift.meta_data.FieldMetaData("companyTagDO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO.class)));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCompanyTag_args.class, metaDataMap);
        }

        public addCompanyTag_args() {
        }

        public addCompanyTag_args(
                com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO,
                int hr_id)
        {
            this();
            this.companyTagDO = companyTagDO;
            this.hr_id = hr_id;
            setHr_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addCompanyTag_args(addCompanyTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyTagDO()) {
                this.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO(other.companyTagDO);
            }
            this.hr_id = other.hr_id;
        }

        public addCompanyTag_args deepCopy() {
            return new addCompanyTag_args(this);
        }

        @Override
        public void clear() {
            this.companyTagDO = null;
            setHr_idIsSet(false);
            this.hr_id = 0;
        }

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO getCompanyTagDO() {
            return this.companyTagDO;
        }

        public addCompanyTag_args setCompanyTagDO(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO) {
            this.companyTagDO = companyTagDO;
            return this;
        }

        public void unsetCompanyTagDO() {
            this.companyTagDO = null;
        }

        /** Returns true if field companyTagDO is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyTagDO() {
            return this.companyTagDO != null;
        }

        public void setCompanyTagDOIsSet(boolean value) {
            if (!value) {
                this.companyTagDO = null;
            }
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public addCompanyTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_TAG_DO:
                    if (value == null) {
                        unsetCompanyTagDO();
                    } else {
                        setCompanyTagDO((com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_TAG_DO:
                    return getCompanyTagDO();

                case HR_ID:
                    return getHr_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_TAG_DO:
                    return isSetCompanyTagDO();
                case HR_ID:
                    return isSetHr_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addCompanyTag_args)
                return this.equals((addCompanyTag_args)that);
            return false;
        }

        public boolean equals(addCompanyTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyTagDO = true && this.isSetCompanyTagDO();
            boolean that_present_companyTagDO = true && that.isSetCompanyTagDO();
            if (this_present_companyTagDO || that_present_companyTagDO) {
                if (!(this_present_companyTagDO && that_present_companyTagDO))
                    return false;
                if (!this.companyTagDO.equals(that.companyTagDO))
                    return false;
            }

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyTagDO()) ? 131071 : 524287);
            if (isSetCompanyTagDO())
                hashCode = hashCode * 8191 + companyTagDO.hashCode();

            hashCode = hashCode * 8191 + hr_id;

            return hashCode;
        }

        @Override
        public int compareTo(addCompanyTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyTagDO()).compareTo(other.isSetCompanyTagDO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyTagDO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyTagDO, other.companyTagDO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addCompanyTag_args(");
            boolean first = true;

            sb.append("companyTagDO:");
            if (this.companyTagDO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyTagDO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyTagDO != null) {
                companyTagDO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addCompanyTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCompanyTag_argsStandardScheme getScheme() {
                return new addCompanyTag_argsStandardScheme();
            }
        }

        private static class addCompanyTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCompanyTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addCompanyTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_TAG_DO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                                struct.companyTagDO.read(iprot);
                                struct.setCompanyTagDOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addCompanyTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyTagDO != null) {
                    oprot.writeFieldBegin(COMPANY_TAG_DO_FIELD_DESC);
                    struct.companyTagDO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addCompanyTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCompanyTag_argsTupleScheme getScheme() {
                return new addCompanyTag_argsTupleScheme();
            }
        }

        private static class addCompanyTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCompanyTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addCompanyTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyTagDO()) {
                    optionals.set(0);
                }
                if (struct.isSetHr_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyTagDO()) {
                    struct.companyTagDO.write(oprot);
                }
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addCompanyTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                    struct.companyTagDO.read(iprot);
                    struct.setCompanyTagDOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addCompanyTag_result implements org.apache.thrift.TBase<addCompanyTag_result, addCompanyTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCompanyTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCompanyTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCompanyTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCompanyTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCompanyTag_result.class, metaDataMap);
        }

        public addCompanyTag_result() {
        }

        public addCompanyTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addCompanyTag_result(addCompanyTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addCompanyTag_result deepCopy() {
            return new addCompanyTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public addCompanyTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addCompanyTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addCompanyTag_result)
                return this.equals((addCompanyTag_result)that);
            return false;
        }

        public boolean equals(addCompanyTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addCompanyTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addCompanyTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addCompanyTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCompanyTag_resultStandardScheme getScheme() {
                return new addCompanyTag_resultStandardScheme();
            }
        }

        private static class addCompanyTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCompanyTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addCompanyTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addCompanyTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addCompanyTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCompanyTag_resultTupleScheme getScheme() {
                return new addCompanyTag_resultTupleScheme();
            }
        }

        private static class addCompanyTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCompanyTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addCompanyTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addCompanyTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCompanyTag_args implements org.apache.thrift.TBase<updateCompanyTag_args, updateCompanyTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyTag_args");

        private static final org.apache.thrift.protocol.TField COMPANY_TAG_DO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyTagDO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCompanyTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCompanyTag_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO; // required
        public int hr_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_TAG_DO((short)1, "companyTagDO"),
            HR_ID((short)2, "hr_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_TAG_DO
                        return COMPANY_TAG_DO;
                    case 2: // HR_ID
                        return HR_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_TAG_DO, new org.apache.thrift.meta_data.FieldMetaData("companyTagDO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO.class)));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyTag_args.class, metaDataMap);
        }

        public updateCompanyTag_args() {
        }

        public updateCompanyTag_args(
                com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO,
                int hr_id)
        {
            this();
            this.companyTagDO = companyTagDO;
            this.hr_id = hr_id;
            setHr_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCompanyTag_args(updateCompanyTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyTagDO()) {
                this.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO(other.companyTagDO);
            }
            this.hr_id = other.hr_id;
        }

        public updateCompanyTag_args deepCopy() {
            return new updateCompanyTag_args(this);
        }

        @Override
        public void clear() {
            this.companyTagDO = null;
            setHr_idIsSet(false);
            this.hr_id = 0;
        }

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO getCompanyTagDO() {
            return this.companyTagDO;
        }

        public updateCompanyTag_args setCompanyTagDO(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO) {
            this.companyTagDO = companyTagDO;
            return this;
        }

        public void unsetCompanyTagDO() {
            this.companyTagDO = null;
        }

        /** Returns true if field companyTagDO is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyTagDO() {
            return this.companyTagDO != null;
        }

        public void setCompanyTagDOIsSet(boolean value) {
            if (!value) {
                this.companyTagDO = null;
            }
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public updateCompanyTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_TAG_DO:
                    if (value == null) {
                        unsetCompanyTagDO();
                    } else {
                        setCompanyTagDO((com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_TAG_DO:
                    return getCompanyTagDO();

                case HR_ID:
                    return getHr_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_TAG_DO:
                    return isSetCompanyTagDO();
                case HR_ID:
                    return isSetHr_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCompanyTag_args)
                return this.equals((updateCompanyTag_args)that);
            return false;
        }

        public boolean equals(updateCompanyTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyTagDO = true && this.isSetCompanyTagDO();
            boolean that_present_companyTagDO = true && that.isSetCompanyTagDO();
            if (this_present_companyTagDO || that_present_companyTagDO) {
                if (!(this_present_companyTagDO && that_present_companyTagDO))
                    return false;
                if (!this.companyTagDO.equals(that.companyTagDO))
                    return false;
            }

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyTagDO()) ? 131071 : 524287);
            if (isSetCompanyTagDO())
                hashCode = hashCode * 8191 + companyTagDO.hashCode();

            hashCode = hashCode * 8191 + hr_id;

            return hashCode;
        }

        @Override
        public int compareTo(updateCompanyTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyTagDO()).compareTo(other.isSetCompanyTagDO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyTagDO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyTagDO, other.companyTagDO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCompanyTag_args(");
            boolean first = true;

            sb.append("companyTagDO:");
            if (this.companyTagDO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyTagDO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyTagDO != null) {
                companyTagDO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCompanyTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyTag_argsStandardScheme getScheme() {
                return new updateCompanyTag_argsStandardScheme();
            }
        }

        private static class updateCompanyTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCompanyTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_TAG_DO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                                struct.companyTagDO.read(iprot);
                                struct.setCompanyTagDOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyTagDO != null) {
                    oprot.writeFieldBegin(COMPANY_TAG_DO_FIELD_DESC);
                    struct.companyTagDO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCompanyTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyTag_argsTupleScheme getScheme() {
                return new updateCompanyTag_argsTupleScheme();
            }
        }

        private static class updateCompanyTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCompanyTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyTagDO()) {
                    optionals.set(0);
                }
                if (struct.isSetHr_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyTagDO()) {
                    struct.companyTagDO.write(oprot);
                }
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                    struct.companyTagDO.read(iprot);
                    struct.setCompanyTagDOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCompanyTag_result implements org.apache.thrift.TBase<updateCompanyTag_result, updateCompanyTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCompanyTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCompanyTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyTag_result.class, metaDataMap);
        }

        public updateCompanyTag_result() {
        }

        public updateCompanyTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCompanyTag_result(updateCompanyTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateCompanyTag_result deepCopy() {
            return new updateCompanyTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updateCompanyTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateCompanyTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCompanyTag_result)
                return this.equals((updateCompanyTag_result)that);
            return false;
        }

        public boolean equals(updateCompanyTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateCompanyTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCompanyTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCompanyTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyTag_resultStandardScheme getScheme() {
                return new updateCompanyTag_resultStandardScheme();
            }
        }

        private static class updateCompanyTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCompanyTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCompanyTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyTag_resultTupleScheme getScheme() {
                return new updateCompanyTag_resultTupleScheme();
            }
        }

        private static class updateCompanyTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCompanyTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentTagList_args implements org.apache.thrift.TBase<getTalentTagList_args, getTalentTagList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentTagList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentTagList_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentTagList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentTagList_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentTagList_args.class, metaDataMap);
        }

        public getTalentTagList_args() {
        }

        public getTalentTagList_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentTagList_args(getTalentTagList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getTalentTagList_args deepCopy() {
            return new getTalentTagList_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentTagList_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentTagList_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getTalentTagList_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getTalentTagList_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentTagList_args)
                return this.equals((getTalentTagList_args)that);
            return false;
        }

        public boolean equals(getTalentTagList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getTalentTagList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentTagList_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentTagList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentTagList_argsStandardScheme getScheme() {
                return new getTalentTagList_argsStandardScheme();
            }
        }

        private static class getTalentTagList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentTagList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentTagList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentTagList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentTagList_argsTupleScheme getScheme() {
                return new getTalentTagList_argsTupleScheme();
            }
        }

        private static class getTalentTagList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentTagList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentTagList_result implements org.apache.thrift.TBase<getTalentTagList_result, getTalentTagList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentTagList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentTagList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentTagList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentTagList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentTagList_result.class, metaDataMap);
        }

        public getTalentTagList_result() {
        }

        public getTalentTagList_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentTagList_result(getTalentTagList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentTagList_result deepCopy() {
            return new getTalentTagList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentTagList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentTagList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentTagList_result)
                return this.equals((getTalentTagList_result)that);
            return false;
        }

        public boolean equals(getTalentTagList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentTagList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentTagList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentTagList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentTagList_resultStandardScheme getScheme() {
                return new getTalentTagList_resultStandardScheme();
            }
        }

        private static class getTalentTagList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentTagList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentTagList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentTagList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentTagList_resultTupleScheme getScheme() {
                return new getTalentTagList_resultTupleScheme();
            }
        }

        private static class getTalentTagList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentTagList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileFilterList_args implements org.apache.thrift.TBase<getProfileFilterList_args, getProfileFilterList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterList_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileFilterList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileFilterList_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterList_args.class, metaDataMap);
        }

        public getProfileFilterList_args() {
        }

        public getProfileFilterList_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileFilterList_args(getProfileFilterList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getProfileFilterList_args deepCopy() {
            return new getProfileFilterList_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getProfileFilterList_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getProfileFilterList_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getProfileFilterList_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getProfileFilterList_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileFilterList_args)
                return this.equals((getProfileFilterList_args)that);
            return false;
        }

        public boolean equals(getProfileFilterList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getProfileFilterList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileFilterList_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileFilterList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterList_argsStandardScheme getScheme() {
                return new getProfileFilterList_argsStandardScheme();
            }
        }

        private static class getProfileFilterList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileFilterList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileFilterList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterList_argsTupleScheme getScheme() {
                return new getProfileFilterList_argsTupleScheme();
            }
        }

        private static class getProfileFilterList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileFilterList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileFilterList_result implements org.apache.thrift.TBase<getProfileFilterList_result, getProfileFilterList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileFilterList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileFilterList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterList_result.class, metaDataMap);
        }

        public getProfileFilterList_result() {
        }

        public getProfileFilterList_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileFilterList_result(getProfileFilterList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getProfileFilterList_result deepCopy() {
            return new getProfileFilterList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getProfileFilterList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getProfileFilterList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileFilterList_result)
                return this.equals((getProfileFilterList_result)that);
            return false;
        }

        public boolean equals(getProfileFilterList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProfileFilterList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileFilterList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileFilterList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterList_resultStandardScheme getScheme() {
                return new getProfileFilterList_resultStandardScheme();
            }
        }

        private static class getProfileFilterList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileFilterList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileFilterList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterList_resultTupleScheme getScheme() {
                return new getProfileFilterList_resultTupleScheme();
            }
        }

        private static class getProfileFilterList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileFilterList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handerProfileFilterByIds_args implements org.apache.thrift.TBase<handerProfileFilterByIds_args, handerProfileFilterByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<handerProfileFilterByIds_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handerProfileFilterByIds_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField FILTER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_ids", org.apache.thrift.protocol.TType.LIST, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handerProfileFilterByIds_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handerProfileFilterByIds_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int disable; // required
        public java.util.List<java.lang.Integer> filter_ids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            DISABLE((short)3, "disable"),
            FILTER_IDS((short)4, "filter_ids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // DISABLE
                        return DISABLE;
                    case 4: // FILTER_IDS
                        return FILTER_IDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __DISABLE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FILTER_IDS, new org.apache.thrift.meta_data.FieldMetaData("filter_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handerProfileFilterByIds_args.class, metaDataMap);
        }

        public handerProfileFilterByIds_args() {
        }

        public handerProfileFilterByIds_args(
                int hr_id,
                int company_id,
                int disable,
                java.util.List<java.lang.Integer> filter_ids)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.disable = disable;
            setDisableIsSet(true);
            this.filter_ids = filter_ids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handerProfileFilterByIds_args(handerProfileFilterByIds_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.disable = other.disable;
            if (other.isSetFilter_ids()) {
                java.util.List<java.lang.Integer> __this__filter_ids = new java.util.ArrayList<java.lang.Integer>(other.filter_ids);
                this.filter_ids = __this__filter_ids;
            }
        }

        public handerProfileFilterByIds_args deepCopy() {
            return new handerProfileFilterByIds_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setDisableIsSet(false);
            this.disable = 0;
            this.filter_ids = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public handerProfileFilterByIds_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public handerProfileFilterByIds_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getDisable() {
            return this.disable;
        }

        public handerProfileFilterByIds_args setDisable(int disable) {
            this.disable = disable;
            setDisableIsSet(true);
            return this;
        }

        public void unsetDisable() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
        }

        /** Returns true if field disable is set (has been assigned a value) and false otherwise */
        public boolean isSetDisable() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
        }

        public void setDisableIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
        }

        public int getFilter_idsSize() {
            return (this.filter_ids == null) ? 0 : this.filter_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getFilter_idsIterator() {
            return (this.filter_ids == null) ? null : this.filter_ids.iterator();
        }

        public void addToFilter_ids(int elem) {
            if (this.filter_ids == null) {
                this.filter_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.filter_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getFilter_ids() {
            return this.filter_ids;
        }

        public handerProfileFilterByIds_args setFilter_ids(java.util.List<java.lang.Integer> filter_ids) {
            this.filter_ids = filter_ids;
            return this;
        }

        public void unsetFilter_ids() {
            this.filter_ids = null;
        }

        /** Returns true if field filter_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetFilter_ids() {
            return this.filter_ids != null;
        }

        public void setFilter_idsIsSet(boolean value) {
            if (!value) {
                this.filter_ids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case DISABLE:
                    if (value == null) {
                        unsetDisable();
                    } else {
                        setDisable((java.lang.Integer)value);
                    }
                    break;

                case FILTER_IDS:
                    if (value == null) {
                        unsetFilter_ids();
                    } else {
                        setFilter_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case DISABLE:
                    return getDisable();

                case FILTER_IDS:
                    return getFilter_ids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case DISABLE:
                    return isSetDisable();
                case FILTER_IDS:
                    return isSetFilter_ids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handerProfileFilterByIds_args)
                return this.equals((handerProfileFilterByIds_args)that);
            return false;
        }

        public boolean equals(handerProfileFilterByIds_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_disable = true;
            boolean that_present_disable = true;
            if (this_present_disable || that_present_disable) {
                if (!(this_present_disable && that_present_disable))
                    return false;
                if (this.disable != that.disable)
                    return false;
            }

            boolean this_present_filter_ids = true && this.isSetFilter_ids();
            boolean that_present_filter_ids = true && that.isSetFilter_ids();
            if (this_present_filter_ids || that_present_filter_ids) {
                if (!(this_present_filter_ids && that_present_filter_ids))
                    return false;
                if (!this.filter_ids.equals(that.filter_ids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + disable;

            hashCode = hashCode * 8191 + ((isSetFilter_ids()) ? 131071 : 524287);
            if (isSetFilter_ids())
                hashCode = hashCode * 8191 + filter_ids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(handerProfileFilterByIds_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDisable()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFilter_ids()).compareTo(other.isSetFilter_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilter_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_ids, other.filter_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handerProfileFilterByIds_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("disable:");
            sb.append(this.disable);
            first = false;
            if (!first) sb.append(", ");
            sb.append("filter_ids:");
            if (this.filter_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.filter_ids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handerProfileFilterByIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerProfileFilterByIds_argsStandardScheme getScheme() {
                return new handerProfileFilterByIds_argsStandardScheme();
            }
        }

        private static class handerProfileFilterByIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handerProfileFilterByIds_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handerProfileFilterByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // DISABLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.disable = iprot.readI32();
                                struct.setDisableIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // FILTER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                                    struct.filter_ids = new java.util.ArrayList<java.lang.Integer>(_list160.size);
                                    int _elem161;
                                    for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                                    {
                                        _elem161 = iprot.readI32();
                                        struct.filter_ids.add(_elem161);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setFilter_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handerProfileFilterByIds_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(DISABLE_FIELD_DESC);
                oprot.writeI32(struct.disable);
                oprot.writeFieldEnd();
                if (struct.filter_ids != null) {
                    oprot.writeFieldBegin(FILTER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.filter_ids.size()));
                        for (int _iter163 : struct.filter_ids)
                        {
                            oprot.writeI32(_iter163);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handerProfileFilterByIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerProfileFilterByIds_argsTupleScheme getScheme() {
                return new handerProfileFilterByIds_argsTupleScheme();
            }
        }

        private static class handerProfileFilterByIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handerProfileFilterByIds_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handerProfileFilterByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetDisable()) {
                    optionals.set(2);
                }
                if (struct.isSetFilter_ids()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetDisable()) {
                    oprot.writeI32(struct.disable);
                }
                if (struct.isSetFilter_ids()) {
                    {
                        oprot.writeI32(struct.filter_ids.size());
                        for (int _iter164 : struct.filter_ids)
                        {
                            oprot.writeI32(_iter164);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handerProfileFilterByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.disable = iprot.readI32();
                    struct.setDisableIsSet(true);
                }
                if (incoming.get(3)) {
                    {
                        org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.filter_ids = new java.util.ArrayList<java.lang.Integer>(_list165.size);
                        int _elem166;
                        for (int _i167 = 0; _i167 < _list165.size; ++_i167)
                        {
                            _elem166 = iprot.readI32();
                            struct.filter_ids.add(_elem166);
                        }
                    }
                    struct.setFilter_idsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handerProfileFilterByIds_result implements org.apache.thrift.TBase<handerProfileFilterByIds_result, handerProfileFilterByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<handerProfileFilterByIds_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handerProfileFilterByIds_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handerProfileFilterByIds_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handerProfileFilterByIds_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handerProfileFilterByIds_result.class, metaDataMap);
        }

        public handerProfileFilterByIds_result() {
        }

        public handerProfileFilterByIds_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handerProfileFilterByIds_result(handerProfileFilterByIds_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public handerProfileFilterByIds_result deepCopy() {
            return new handerProfileFilterByIds_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public handerProfileFilterByIds_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public handerProfileFilterByIds_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handerProfileFilterByIds_result)
                return this.equals((handerProfileFilterByIds_result)that);
            return false;
        }

        public boolean equals(handerProfileFilterByIds_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(handerProfileFilterByIds_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handerProfileFilterByIds_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handerProfileFilterByIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerProfileFilterByIds_resultStandardScheme getScheme() {
                return new handerProfileFilterByIds_resultStandardScheme();
            }
        }

        private static class handerProfileFilterByIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handerProfileFilterByIds_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handerProfileFilterByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handerProfileFilterByIds_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handerProfileFilterByIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerProfileFilterByIds_resultTupleScheme getScheme() {
                return new handerProfileFilterByIds_resultTupleScheme();
            }
        }

        private static class handerProfileFilterByIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handerProfileFilterByIds_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handerProfileFilterByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handerProfileFilterByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileFilterInfo_args implements org.apache.thrift.TBase<getProfileFilterInfo_args, getProfileFilterInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterInfo_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileFilterInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileFilterInfo_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int filter_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            FILTER_ID((short)3, "filter_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // FILTER_ID
                        return FILTER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __FILTER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filter_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterInfo_args.class, metaDataMap);
        }

        public getProfileFilterInfo_args() {
        }

        public getProfileFilterInfo_args(
                int hr_id,
                int company_id,
                int filter_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.filter_id = filter_id;
            setFilter_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileFilterInfo_args(getProfileFilterInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.filter_id = other.filter_id;
        }

        public getProfileFilterInfo_args deepCopy() {
            return new getProfileFilterInfo_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setFilter_idIsSet(false);
            this.filter_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getProfileFilterInfo_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getProfileFilterInfo_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getFilter_id() {
            return this.filter_id;
        }

        public getProfileFilterInfo_args setFilter_id(int filter_id) {
            this.filter_id = filter_id;
            setFilter_idIsSet(true);
            return this;
        }

        public void unsetFilter_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
        }

        /** Returns true if field filter_id is set (has been assigned a value) and false otherwise */
        public boolean isSetFilter_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
        }

        public void setFilter_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case FILTER_ID:
                    if (value == null) {
                        unsetFilter_id();
                    } else {
                        setFilter_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case FILTER_ID:
                    return getFilter_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case FILTER_ID:
                    return isSetFilter_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileFilterInfo_args)
                return this.equals((getProfileFilterInfo_args)that);
            return false;
        }

        public boolean equals(getProfileFilterInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_filter_id = true;
            boolean that_present_filter_id = true;
            if (this_present_filter_id || that_present_filter_id) {
                if (!(this_present_filter_id && that_present_filter_id))
                    return false;
                if (this.filter_id != that.filter_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + filter_id;

            return hashCode;
        }

        @Override
        public int compareTo(getProfileFilterInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFilter_id()).compareTo(other.isSetFilter_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilter_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_id, other.filter_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileFilterInfo_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("filter_id:");
            sb.append(this.filter_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileFilterInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterInfo_argsStandardScheme getScheme() {
                return new getProfileFilterInfo_argsStandardScheme();
            }
        }

        private static class getProfileFilterInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileFilterInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // FILTER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.filter_id = iprot.readI32();
                                struct.setFilter_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
                oprot.writeI32(struct.filter_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileFilterInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterInfo_argsTupleScheme getScheme() {
                return new getProfileFilterInfo_argsTupleScheme();
            }
        }

        private static class getProfileFilterInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileFilterInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetFilter_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetFilter_id()) {
                    oprot.writeI32(struct.filter_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.filter_id = iprot.readI32();
                    struct.setFilter_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileFilterInfo_result implements org.apache.thrift.TBase<getProfileFilterInfo_result, getProfileFilterInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileFilterInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileFilterInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterInfo_result.class, metaDataMap);
        }

        public getProfileFilterInfo_result() {
        }

        public getProfileFilterInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileFilterInfo_result(getProfileFilterInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getProfileFilterInfo_result deepCopy() {
            return new getProfileFilterInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getProfileFilterInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getProfileFilterInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileFilterInfo_result)
                return this.equals((getProfileFilterInfo_result)that);
            return false;
        }

        public boolean equals(getProfileFilterInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProfileFilterInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileFilterInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileFilterInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterInfo_resultStandardScheme getScheme() {
                return new getProfileFilterInfo_resultStandardScheme();
            }
        }

        private static class getProfileFilterInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileFilterInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileFilterInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterInfo_resultTupleScheme getScheme() {
                return new getProfileFilterInfo_resultTupleScheme();
            }
        }

        private static class getProfileFilterInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileFilterInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addProfileFilter_args implements org.apache.thrift.TBase<addProfileFilter_args, addProfileFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProfileFilter_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProfileFilter_args");

        private static final org.apache.thrift.protocol.TField COMPANY_TAG_DO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyTagDO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField ACTION_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("actionForm", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionIdList", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField POSITION_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("position_total", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addProfileFilter_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addProfileFilter_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO; // required
        public java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm; // required
        public java.util.List<java.lang.Integer> positionIdList; // required
        public int hr_id; // required
        public int position_total; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_TAG_DO((short)1, "companyTagDO"),
            ACTION_FORM((short)2, "actionForm"),
            POSITION_ID_LIST((short)3, "positionIdList"),
            HR_ID((short)4, "hr_id"),
            POSITION_TOTAL((short)5, "position_total");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_TAG_DO
                        return COMPANY_TAG_DO;
                    case 2: // ACTION_FORM
                        return ACTION_FORM;
                    case 3: // POSITION_ID_LIST
                        return POSITION_ID_LIST;
                    case 4: // HR_ID
                        return HR_ID;
                    case 5: // POSITION_TOTAL
                        return POSITION_TOTAL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __POSITION_TOTAL_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_TAG_DO, new org.apache.thrift.meta_data.FieldMetaData("companyTagDO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO.class)));
            tmpMap.put(_Fields.ACTION_FORM, new org.apache.thrift.meta_data.FieldMetaData("actionForm", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.ActionForm.class))));
            tmpMap.put(_Fields.POSITION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("positionIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("position_total", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProfileFilter_args.class, metaDataMap);
        }

        public addProfileFilter_args() {
        }

        public addProfileFilter_args(
                com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO,
                java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm,
                java.util.List<java.lang.Integer> positionIdList,
                int hr_id,
                int position_total)
        {
            this();
            this.companyTagDO = companyTagDO;
            this.actionForm = actionForm;
            this.positionIdList = positionIdList;
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.position_total = position_total;
            setPosition_totalIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addProfileFilter_args(addProfileFilter_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyTagDO()) {
                this.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO(other.companyTagDO);
            }
            if (other.isSetActionForm()) {
                java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> __this__actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(other.actionForm.size());
                for (com.moseeker.thrift.gen.company.struct.ActionForm other_element : other.actionForm) {
                    __this__actionForm.add(new com.moseeker.thrift.gen.company.struct.ActionForm(other_element));
                }
                this.actionForm = __this__actionForm;
            }
            if (other.isSetPositionIdList()) {
                java.util.List<java.lang.Integer> __this__positionIdList = new java.util.ArrayList<java.lang.Integer>(other.positionIdList);
                this.positionIdList = __this__positionIdList;
            }
            this.hr_id = other.hr_id;
            this.position_total = other.position_total;
        }

        public addProfileFilter_args deepCopy() {
            return new addProfileFilter_args(this);
        }

        @Override
        public void clear() {
            this.companyTagDO = null;
            this.actionForm = null;
            this.positionIdList = null;
            setHr_idIsSet(false);
            this.hr_id = 0;
            setPosition_totalIsSet(false);
            this.position_total = 0;
        }

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO getCompanyTagDO() {
            return this.companyTagDO;
        }

        public addProfileFilter_args setCompanyTagDO(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO) {
            this.companyTagDO = companyTagDO;
            return this;
        }

        public void unsetCompanyTagDO() {
            this.companyTagDO = null;
        }

        /** Returns true if field companyTagDO is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyTagDO() {
            return this.companyTagDO != null;
        }

        public void setCompanyTagDOIsSet(boolean value) {
            if (!value) {
                this.companyTagDO = null;
            }
        }

        public int getActionFormSize() {
            return (this.actionForm == null) ? 0 : this.actionForm.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.company.struct.ActionForm> getActionFormIterator() {
            return (this.actionForm == null) ? null : this.actionForm.iterator();
        }

        public void addToActionForm(com.moseeker.thrift.gen.company.struct.ActionForm elem) {
            if (this.actionForm == null) {
                this.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>();
            }
            this.actionForm.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> getActionForm() {
            return this.actionForm;
        }

        public addProfileFilter_args setActionForm(java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm) {
            this.actionForm = actionForm;
            return this;
        }

        public void unsetActionForm() {
            this.actionForm = null;
        }

        /** Returns true if field actionForm is set (has been assigned a value) and false otherwise */
        public boolean isSetActionForm() {
            return this.actionForm != null;
        }

        public void setActionFormIsSet(boolean value) {
            if (!value) {
                this.actionForm = null;
            }
        }

        public int getPositionIdListSize() {
            return (this.positionIdList == null) ? 0 : this.positionIdList.size();
        }

        public java.util.Iterator<java.lang.Integer> getPositionIdListIterator() {
            return (this.positionIdList == null) ? null : this.positionIdList.iterator();
        }

        public void addToPositionIdList(int elem) {
            if (this.positionIdList == null) {
                this.positionIdList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.positionIdList.add(elem);
        }

        public java.util.List<java.lang.Integer> getPositionIdList() {
            return this.positionIdList;
        }

        public addProfileFilter_args setPositionIdList(java.util.List<java.lang.Integer> positionIdList) {
            this.positionIdList = positionIdList;
            return this;
        }

        public void unsetPositionIdList() {
            this.positionIdList = null;
        }

        /** Returns true if field positionIdList is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionIdList() {
            return this.positionIdList != null;
        }

        public void setPositionIdListIsSet(boolean value) {
            if (!value) {
                this.positionIdList = null;
            }
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public addProfileFilter_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getPosition_total() {
            return this.position_total;
        }

        public addProfileFilter_args setPosition_total(int position_total) {
            this.position_total = position_total;
            setPosition_totalIsSet(true);
            return this;
        }

        public void unsetPosition_total() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID);
        }

        /** Returns true if field position_total is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition_total() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID);
        }

        public void setPosition_totalIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_TAG_DO:
                    if (value == null) {
                        unsetCompanyTagDO();
                    } else {
                        setCompanyTagDO((com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO)value);
                    }
                    break;

                case ACTION_FORM:
                    if (value == null) {
                        unsetActionForm();
                    } else {
                        setActionForm((java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm>)value);
                    }
                    break;

                case POSITION_ID_LIST:
                    if (value == null) {
                        unsetPositionIdList();
                    } else {
                        setPositionIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case POSITION_TOTAL:
                    if (value == null) {
                        unsetPosition_total();
                    } else {
                        setPosition_total((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_TAG_DO:
                    return getCompanyTagDO();

                case ACTION_FORM:
                    return getActionForm();

                case POSITION_ID_LIST:
                    return getPositionIdList();

                case HR_ID:
                    return getHr_id();

                case POSITION_TOTAL:
                    return getPosition_total();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_TAG_DO:
                    return isSetCompanyTagDO();
                case ACTION_FORM:
                    return isSetActionForm();
                case POSITION_ID_LIST:
                    return isSetPositionIdList();
                case HR_ID:
                    return isSetHr_id();
                case POSITION_TOTAL:
                    return isSetPosition_total();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addProfileFilter_args)
                return this.equals((addProfileFilter_args)that);
            return false;
        }

        public boolean equals(addProfileFilter_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyTagDO = true && this.isSetCompanyTagDO();
            boolean that_present_companyTagDO = true && that.isSetCompanyTagDO();
            if (this_present_companyTagDO || that_present_companyTagDO) {
                if (!(this_present_companyTagDO && that_present_companyTagDO))
                    return false;
                if (!this.companyTagDO.equals(that.companyTagDO))
                    return false;
            }

            boolean this_present_actionForm = true && this.isSetActionForm();
            boolean that_present_actionForm = true && that.isSetActionForm();
            if (this_present_actionForm || that_present_actionForm) {
                if (!(this_present_actionForm && that_present_actionForm))
                    return false;
                if (!this.actionForm.equals(that.actionForm))
                    return false;
            }

            boolean this_present_positionIdList = true && this.isSetPositionIdList();
            boolean that_present_positionIdList = true && that.isSetPositionIdList();
            if (this_present_positionIdList || that_present_positionIdList) {
                if (!(this_present_positionIdList && that_present_positionIdList))
                    return false;
                if (!this.positionIdList.equals(that.positionIdList))
                    return false;
            }

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_position_total = true;
            boolean that_present_position_total = true;
            if (this_present_position_total || that_present_position_total) {
                if (!(this_present_position_total && that_present_position_total))
                    return false;
                if (this.position_total != that.position_total)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyTagDO()) ? 131071 : 524287);
            if (isSetCompanyTagDO())
                hashCode = hashCode * 8191 + companyTagDO.hashCode();

            hashCode = hashCode * 8191 + ((isSetActionForm()) ? 131071 : 524287);
            if (isSetActionForm())
                hashCode = hashCode * 8191 + actionForm.hashCode();

            hashCode = hashCode * 8191 + ((isSetPositionIdList()) ? 131071 : 524287);
            if (isSetPositionIdList())
                hashCode = hashCode * 8191 + positionIdList.hashCode();

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + position_total;

            return hashCode;
        }

        @Override
        public int compareTo(addProfileFilter_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyTagDO()).compareTo(other.isSetCompanyTagDO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyTagDO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyTagDO, other.companyTagDO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetActionForm()).compareTo(other.isSetActionForm());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetActionForm()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionForm, other.actionForm);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionIdList()).compareTo(other.isSetPositionIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionIdList, other.positionIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPosition_total()).compareTo(other.isSetPosition_total());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition_total()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_total, other.position_total);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addProfileFilter_args(");
            boolean first = true;

            sb.append("companyTagDO:");
            if (this.companyTagDO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyTagDO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("actionForm:");
            if (this.actionForm == null) {
                sb.append("null");
            } else {
                sb.append(this.actionForm);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionIdList:");
            if (this.positionIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.positionIdList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position_total:");
            sb.append(this.position_total);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyTagDO != null) {
                companyTagDO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addProfileFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileFilter_argsStandardScheme getScheme() {
                return new addProfileFilter_argsStandardScheme();
            }
        }

        private static class addProfileFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addProfileFilter_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_TAG_DO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                                struct.companyTagDO.read(iprot);
                                struct.setCompanyTagDOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACTION_FORM
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                                    struct.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(_list168.size);
                                    com.moseeker.thrift.gen.company.struct.ActionForm _elem169;
                                    for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                                    {
                                        _elem169 = new com.moseeker.thrift.gen.company.struct.ActionForm();
                                        _elem169.read(iprot);
                                        struct.actionForm.add(_elem169);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setActionFormIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list171 = iprot.readListBegin();
                                    struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list171.size);
                                    int _elem172;
                                    for (int _i173 = 0; _i173 < _list171.size; ++_i173)
                                    {
                                        _elem172 = iprot.readI32();
                                        struct.positionIdList.add(_elem172);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setPositionIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // POSITION_TOTAL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.position_total = iprot.readI32();
                                struct.setPosition_totalIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addProfileFilter_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyTagDO != null) {
                    oprot.writeFieldBegin(COMPANY_TAG_DO_FIELD_DESC);
                    struct.companyTagDO.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.actionForm != null) {
                    oprot.writeFieldBegin(ACTION_FORM_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actionForm.size()));
                        for (com.moseeker.thrift.gen.company.struct.ActionForm _iter174 : struct.actionForm)
                        {
                            _iter174.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.positionIdList != null) {
                    oprot.writeFieldBegin(POSITION_ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.positionIdList.size()));
                        for (int _iter175 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter175);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_TOTAL_FIELD_DESC);
                oprot.writeI32(struct.position_total);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addProfileFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileFilter_argsTupleScheme getScheme() {
                return new addProfileFilter_argsTupleScheme();
            }
        }

        private static class addProfileFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addProfileFilter_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyTagDO()) {
                    optionals.set(0);
                }
                if (struct.isSetActionForm()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionIdList()) {
                    optionals.set(2);
                }
                if (struct.isSetHr_id()) {
                    optionals.set(3);
                }
                if (struct.isSetPosition_total()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetCompanyTagDO()) {
                    struct.companyTagDO.write(oprot);
                }
                if (struct.isSetActionForm()) {
                    {
                        oprot.writeI32(struct.actionForm.size());
                        for (com.moseeker.thrift.gen.company.struct.ActionForm _iter176 : struct.actionForm)
                        {
                            _iter176.write(oprot);
                        }
                    }
                }
                if (struct.isSetPositionIdList()) {
                    {
                        oprot.writeI32(struct.positionIdList.size());
                        for (int _iter177 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter177);
                        }
                    }
                }
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetPosition_total()) {
                    oprot.writeI32(struct.position_total);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                    struct.companyTagDO.read(iprot);
                    struct.setCompanyTagDOIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(_list178.size);
                        com.moseeker.thrift.gen.company.struct.ActionForm _elem179;
                        for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                        {
                            _elem179 = new com.moseeker.thrift.gen.company.struct.ActionForm();
                            _elem179.read(iprot);
                            struct.actionForm.add(_elem179);
                        }
                    }
                    struct.setActionFormIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list181.size);
                        int _elem182;
                        for (int _i183 = 0; _i183 < _list181.size; ++_i183)
                        {
                            _elem182 = iprot.readI32();
                            struct.positionIdList.add(_elem182);
                        }
                    }
                    struct.setPositionIdListIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.position_total = iprot.readI32();
                    struct.setPosition_totalIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addProfileFilter_result implements org.apache.thrift.TBase<addProfileFilter_result, addProfileFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProfileFilter_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProfileFilter_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addProfileFilter_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addProfileFilter_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProfileFilter_result.class, metaDataMap);
        }

        public addProfileFilter_result() {
        }

        public addProfileFilter_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addProfileFilter_result(addProfileFilter_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addProfileFilter_result deepCopy() {
            return new addProfileFilter_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public addProfileFilter_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addProfileFilter_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addProfileFilter_result)
                return this.equals((addProfileFilter_result)that);
            return false;
        }

        public boolean equals(addProfileFilter_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addProfileFilter_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addProfileFilter_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addProfileFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileFilter_resultStandardScheme getScheme() {
                return new addProfileFilter_resultStandardScheme();
            }
        }

        private static class addProfileFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addProfileFilter_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addProfileFilter_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addProfileFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileFilter_resultTupleScheme getScheme() {
                return new addProfileFilter_resultTupleScheme();
            }
        }

        private static class addProfileFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addProfileFilter_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateProfileFilter_args implements org.apache.thrift.TBase<updateProfileFilter_args, updateProfileFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProfileFilter_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProfileFilter_args");

        private static final org.apache.thrift.protocol.TField COMPANY_TAG_DO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyTagDO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField ACTION_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("actionForm", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionIdList", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField POSITION_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("position_total", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateProfileFilter_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateProfileFilter_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO; // required
        public java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm; // required
        public java.util.List<java.lang.Integer> positionIdList; // required
        public int hr_id; // required
        public int position_total; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_TAG_DO((short)1, "companyTagDO"),
            ACTION_FORM((short)2, "actionForm"),
            POSITION_ID_LIST((short)3, "positionIdList"),
            HR_ID((short)4, "hr_id"),
            POSITION_TOTAL((short)5, "position_total");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_TAG_DO
                        return COMPANY_TAG_DO;
                    case 2: // ACTION_FORM
                        return ACTION_FORM;
                    case 3: // POSITION_ID_LIST
                        return POSITION_ID_LIST;
                    case 4: // HR_ID
                        return HR_ID;
                    case 5: // POSITION_TOTAL
                        return POSITION_TOTAL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __POSITION_TOTAL_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_TAG_DO, new org.apache.thrift.meta_data.FieldMetaData("companyTagDO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO.class)));
            tmpMap.put(_Fields.ACTION_FORM, new org.apache.thrift.meta_data.FieldMetaData("actionForm", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.ActionForm.class))));
            tmpMap.put(_Fields.POSITION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("positionIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("position_total", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProfileFilter_args.class, metaDataMap);
        }

        public updateProfileFilter_args() {
        }

        public updateProfileFilter_args(
                com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO,
                java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm,
                java.util.List<java.lang.Integer> positionIdList,
                int hr_id,
                int position_total)
        {
            this();
            this.companyTagDO = companyTagDO;
            this.actionForm = actionForm;
            this.positionIdList = positionIdList;
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.position_total = position_total;
            setPosition_totalIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateProfileFilter_args(updateProfileFilter_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyTagDO()) {
                this.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO(other.companyTagDO);
            }
            if (other.isSetActionForm()) {
                java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> __this__actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(other.actionForm.size());
                for (com.moseeker.thrift.gen.company.struct.ActionForm other_element : other.actionForm) {
                    __this__actionForm.add(new com.moseeker.thrift.gen.company.struct.ActionForm(other_element));
                }
                this.actionForm = __this__actionForm;
            }
            if (other.isSetPositionIdList()) {
                java.util.List<java.lang.Integer> __this__positionIdList = new java.util.ArrayList<java.lang.Integer>(other.positionIdList);
                this.positionIdList = __this__positionIdList;
            }
            this.hr_id = other.hr_id;
            this.position_total = other.position_total;
        }

        public updateProfileFilter_args deepCopy() {
            return new updateProfileFilter_args(this);
        }

        @Override
        public void clear() {
            this.companyTagDO = null;
            this.actionForm = null;
            this.positionIdList = null;
            setHr_idIsSet(false);
            this.hr_id = 0;
            setPosition_totalIsSet(false);
            this.position_total = 0;
        }

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO getCompanyTagDO() {
            return this.companyTagDO;
        }

        public updateProfileFilter_args setCompanyTagDO(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO) {
            this.companyTagDO = companyTagDO;
            return this;
        }

        public void unsetCompanyTagDO() {
            this.companyTagDO = null;
        }

        /** Returns true if field companyTagDO is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyTagDO() {
            return this.companyTagDO != null;
        }

        public void setCompanyTagDOIsSet(boolean value) {
            if (!value) {
                this.companyTagDO = null;
            }
        }

        public int getActionFormSize() {
            return (this.actionForm == null) ? 0 : this.actionForm.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.company.struct.ActionForm> getActionFormIterator() {
            return (this.actionForm == null) ? null : this.actionForm.iterator();
        }

        public void addToActionForm(com.moseeker.thrift.gen.company.struct.ActionForm elem) {
            if (this.actionForm == null) {
                this.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>();
            }
            this.actionForm.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> getActionForm() {
            return this.actionForm;
        }

        public updateProfileFilter_args setActionForm(java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm) {
            this.actionForm = actionForm;
            return this;
        }

        public void unsetActionForm() {
            this.actionForm = null;
        }

        /** Returns true if field actionForm is set (has been assigned a value) and false otherwise */
        public boolean isSetActionForm() {
            return this.actionForm != null;
        }

        public void setActionFormIsSet(boolean value) {
            if (!value) {
                this.actionForm = null;
            }
        }

        public int getPositionIdListSize() {
            return (this.positionIdList == null) ? 0 : this.positionIdList.size();
        }

        public java.util.Iterator<java.lang.Integer> getPositionIdListIterator() {
            return (this.positionIdList == null) ? null : this.positionIdList.iterator();
        }

        public void addToPositionIdList(int elem) {
            if (this.positionIdList == null) {
                this.positionIdList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.positionIdList.add(elem);
        }

        public java.util.List<java.lang.Integer> getPositionIdList() {
            return this.positionIdList;
        }

        public updateProfileFilter_args setPositionIdList(java.util.List<java.lang.Integer> positionIdList) {
            this.positionIdList = positionIdList;
            return this;
        }

        public void unsetPositionIdList() {
            this.positionIdList = null;
        }

        /** Returns true if field positionIdList is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionIdList() {
            return this.positionIdList != null;
        }

        public void setPositionIdListIsSet(boolean value) {
            if (!value) {
                this.positionIdList = null;
            }
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public updateProfileFilter_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getPosition_total() {
            return this.position_total;
        }

        public updateProfileFilter_args setPosition_total(int position_total) {
            this.position_total = position_total;
            setPosition_totalIsSet(true);
            return this;
        }

        public void unsetPosition_total() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID);
        }

        /** Returns true if field position_total is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition_total() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID);
        }

        public void setPosition_totalIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_TAG_DO:
                    if (value == null) {
                        unsetCompanyTagDO();
                    } else {
                        setCompanyTagDO((com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO)value);
                    }
                    break;

                case ACTION_FORM:
                    if (value == null) {
                        unsetActionForm();
                    } else {
                        setActionForm((java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm>)value);
                    }
                    break;

                case POSITION_ID_LIST:
                    if (value == null) {
                        unsetPositionIdList();
                    } else {
                        setPositionIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case POSITION_TOTAL:
                    if (value == null) {
                        unsetPosition_total();
                    } else {
                        setPosition_total((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_TAG_DO:
                    return getCompanyTagDO();

                case ACTION_FORM:
                    return getActionForm();

                case POSITION_ID_LIST:
                    return getPositionIdList();

                case HR_ID:
                    return getHr_id();

                case POSITION_TOTAL:
                    return getPosition_total();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_TAG_DO:
                    return isSetCompanyTagDO();
                case ACTION_FORM:
                    return isSetActionForm();
                case POSITION_ID_LIST:
                    return isSetPositionIdList();
                case HR_ID:
                    return isSetHr_id();
                case POSITION_TOTAL:
                    return isSetPosition_total();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateProfileFilter_args)
                return this.equals((updateProfileFilter_args)that);
            return false;
        }

        public boolean equals(updateProfileFilter_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyTagDO = true && this.isSetCompanyTagDO();
            boolean that_present_companyTagDO = true && that.isSetCompanyTagDO();
            if (this_present_companyTagDO || that_present_companyTagDO) {
                if (!(this_present_companyTagDO && that_present_companyTagDO))
                    return false;
                if (!this.companyTagDO.equals(that.companyTagDO))
                    return false;
            }

            boolean this_present_actionForm = true && this.isSetActionForm();
            boolean that_present_actionForm = true && that.isSetActionForm();
            if (this_present_actionForm || that_present_actionForm) {
                if (!(this_present_actionForm && that_present_actionForm))
                    return false;
                if (!this.actionForm.equals(that.actionForm))
                    return false;
            }

            boolean this_present_positionIdList = true && this.isSetPositionIdList();
            boolean that_present_positionIdList = true && that.isSetPositionIdList();
            if (this_present_positionIdList || that_present_positionIdList) {
                if (!(this_present_positionIdList && that_present_positionIdList))
                    return false;
                if (!this.positionIdList.equals(that.positionIdList))
                    return false;
            }

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_position_total = true;
            boolean that_present_position_total = true;
            if (this_present_position_total || that_present_position_total) {
                if (!(this_present_position_total && that_present_position_total))
                    return false;
                if (this.position_total != that.position_total)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyTagDO()) ? 131071 : 524287);
            if (isSetCompanyTagDO())
                hashCode = hashCode * 8191 + companyTagDO.hashCode();

            hashCode = hashCode * 8191 + ((isSetActionForm()) ? 131071 : 524287);
            if (isSetActionForm())
                hashCode = hashCode * 8191 + actionForm.hashCode();

            hashCode = hashCode * 8191 + ((isSetPositionIdList()) ? 131071 : 524287);
            if (isSetPositionIdList())
                hashCode = hashCode * 8191 + positionIdList.hashCode();

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + position_total;

            return hashCode;
        }

        @Override
        public int compareTo(updateProfileFilter_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyTagDO()).compareTo(other.isSetCompanyTagDO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyTagDO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyTagDO, other.companyTagDO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetActionForm()).compareTo(other.isSetActionForm());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetActionForm()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionForm, other.actionForm);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionIdList()).compareTo(other.isSetPositionIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionIdList, other.positionIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPosition_total()).compareTo(other.isSetPosition_total());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition_total()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_total, other.position_total);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateProfileFilter_args(");
            boolean first = true;

            sb.append("companyTagDO:");
            if (this.companyTagDO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyTagDO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("actionForm:");
            if (this.actionForm == null) {
                sb.append("null");
            } else {
                sb.append(this.actionForm);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionIdList:");
            if (this.positionIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.positionIdList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position_total:");
            sb.append(this.position_total);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyTagDO != null) {
                companyTagDO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateProfileFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateProfileFilter_argsStandardScheme getScheme() {
                return new updateProfileFilter_argsStandardScheme();
            }
        }

        private static class updateProfileFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateProfileFilter_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_TAG_DO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                                struct.companyTagDO.read(iprot);
                                struct.setCompanyTagDOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACTION_FORM
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                                    struct.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(_list184.size);
                                    com.moseeker.thrift.gen.company.struct.ActionForm _elem185;
                                    for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                                    {
                                        _elem185 = new com.moseeker.thrift.gen.company.struct.ActionForm();
                                        _elem185.read(iprot);
                                        struct.actionForm.add(_elem185);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setActionFormIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();
                                    struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list187.size);
                                    int _elem188;
                                    for (int _i189 = 0; _i189 < _list187.size; ++_i189)
                                    {
                                        _elem188 = iprot.readI32();
                                        struct.positionIdList.add(_elem188);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setPositionIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // POSITION_TOTAL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.position_total = iprot.readI32();
                                struct.setPosition_totalIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateProfileFilter_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyTagDO != null) {
                    oprot.writeFieldBegin(COMPANY_TAG_DO_FIELD_DESC);
                    struct.companyTagDO.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.actionForm != null) {
                    oprot.writeFieldBegin(ACTION_FORM_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actionForm.size()));
                        for (com.moseeker.thrift.gen.company.struct.ActionForm _iter190 : struct.actionForm)
                        {
                            _iter190.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.positionIdList != null) {
                    oprot.writeFieldBegin(POSITION_ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.positionIdList.size()));
                        for (int _iter191 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter191);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_TOTAL_FIELD_DESC);
                oprot.writeI32(struct.position_total);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateProfileFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateProfileFilter_argsTupleScheme getScheme() {
                return new updateProfileFilter_argsTupleScheme();
            }
        }

        private static class updateProfileFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateProfileFilter_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyTagDO()) {
                    optionals.set(0);
                }
                if (struct.isSetActionForm()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionIdList()) {
                    optionals.set(2);
                }
                if (struct.isSetHr_id()) {
                    optionals.set(3);
                }
                if (struct.isSetPosition_total()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetCompanyTagDO()) {
                    struct.companyTagDO.write(oprot);
                }
                if (struct.isSetActionForm()) {
                    {
                        oprot.writeI32(struct.actionForm.size());
                        for (com.moseeker.thrift.gen.company.struct.ActionForm _iter192 : struct.actionForm)
                        {
                            _iter192.write(oprot);
                        }
                    }
                }
                if (struct.isSetPositionIdList()) {
                    {
                        oprot.writeI32(struct.positionIdList.size());
                        for (int _iter193 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter193);
                        }
                    }
                }
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetPosition_total()) {
                    oprot.writeI32(struct.position_total);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                    struct.companyTagDO.read(iprot);
                    struct.setCompanyTagDOIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(_list194.size);
                        com.moseeker.thrift.gen.company.struct.ActionForm _elem195;
                        for (int _i196 = 0; _i196 < _list194.size; ++_i196)
                        {
                            _elem195 = new com.moseeker.thrift.gen.company.struct.ActionForm();
                            _elem195.read(iprot);
                            struct.actionForm.add(_elem195);
                        }
                    }
                    struct.setActionFormIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list197.size);
                        int _elem198;
                        for (int _i199 = 0; _i199 < _list197.size; ++_i199)
                        {
                            _elem198 = iprot.readI32();
                            struct.positionIdList.add(_elem198);
                        }
                    }
                    struct.setPositionIdListIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.position_total = iprot.readI32();
                    struct.setPosition_totalIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateProfileFilter_result implements org.apache.thrift.TBase<updateProfileFilter_result, updateProfileFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProfileFilter_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProfileFilter_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateProfileFilter_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateProfileFilter_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProfileFilter_result.class, metaDataMap);
        }

        public updateProfileFilter_result() {
        }

        public updateProfileFilter_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateProfileFilter_result(updateProfileFilter_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateProfileFilter_result deepCopy() {
            return new updateProfileFilter_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updateProfileFilter_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateProfileFilter_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateProfileFilter_result)
                return this.equals((updateProfileFilter_result)that);
            return false;
        }

        public boolean equals(updateProfileFilter_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateProfileFilter_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateProfileFilter_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateProfileFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateProfileFilter_resultStandardScheme getScheme() {
                return new updateProfileFilter_resultStandardScheme();
            }
        }

        private static class updateProfileFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateProfileFilter_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateProfileFilter_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateProfileFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateProfileFilter_resultTupleScheme getScheme() {
                return new updateProfileFilter_resultTupleScheme();
            }
        }

        private static class updateProfileFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateProfileFilter_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handlerCompanyTagAndProfile_args implements org.apache.thrift.TBase<handlerCompanyTagAndProfile_args, handlerCompanyTagAndProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<handlerCompanyTagAndProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handlerCompanyTagAndProfile_args");

        private static final org.apache.thrift.protocol.TField USERID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userid_list", org.apache.thrift.protocol.TType.SET, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handlerCompanyTagAndProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handlerCompanyTagAndProfile_argsTupleSchemeFactory();

        public java.util.Set<java.lang.Integer> userid_list; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USERID_LIST((short)1, "userid_list"),
            COMPANY_ID((short)2, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USERID_LIST
                        return USERID_LIST;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANY_ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userid_list", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handlerCompanyTagAndProfile_args.class, metaDataMap);
        }

        public handlerCompanyTagAndProfile_args() {
        }

        public handlerCompanyTagAndProfile_args(
                java.util.Set<java.lang.Integer> userid_list,
                int company_id)
        {
            this();
            this.userid_list = userid_list;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handlerCompanyTagAndProfile_args(handlerCompanyTagAndProfile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetUserid_list()) {
                java.util.Set<java.lang.Integer> __this__userid_list = new java.util.HashSet<java.lang.Integer>(other.userid_list);
                this.userid_list = __this__userid_list;
            }
            this.company_id = other.company_id;
        }

        public handlerCompanyTagAndProfile_args deepCopy() {
            return new handlerCompanyTagAndProfile_args(this);
        }

        @Override
        public void clear() {
            this.userid_list = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getUserid_listSize() {
            return (this.userid_list == null) ? 0 : this.userid_list.size();
        }

        public java.util.Iterator<java.lang.Integer> getUserid_listIterator() {
            return (this.userid_list == null) ? null : this.userid_list.iterator();
        }

        public void addToUserid_list(int elem) {
            if (this.userid_list == null) {
                this.userid_list = new java.util.HashSet<java.lang.Integer>();
            }
            this.userid_list.add(elem);
        }

        public java.util.Set<java.lang.Integer> getUserid_list() {
            return this.userid_list;
        }

        public handlerCompanyTagAndProfile_args setUserid_list(java.util.Set<java.lang.Integer> userid_list) {
            this.userid_list = userid_list;
            return this;
        }

        public void unsetUserid_list() {
            this.userid_list = null;
        }

        /** Returns true if field userid_list is set (has been assigned a value) and false otherwise */
        public boolean isSetUserid_list() {
            return this.userid_list != null;
        }

        public void setUserid_listIsSet(boolean value) {
            if (!value) {
                this.userid_list = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public handlerCompanyTagAndProfile_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USERID_LIST:
                    if (value == null) {
                        unsetUserid_list();
                    } else {
                        setUserid_list((java.util.Set<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USERID_LIST:
                    return getUserid_list();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USERID_LIST:
                    return isSetUserid_list();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handlerCompanyTagAndProfile_args)
                return this.equals((handlerCompanyTagAndProfile_args)that);
            return false;
        }

        public boolean equals(handlerCompanyTagAndProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userid_list = true && this.isSetUserid_list();
            boolean that_present_userid_list = true && that.isSetUserid_list();
            if (this_present_userid_list || that_present_userid_list) {
                if (!(this_present_userid_list && that_present_userid_list))
                    return false;
                if (!this.userid_list.equals(that.userid_list))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUserid_list()) ? 131071 : 524287);
            if (isSetUserid_list())
                hashCode = hashCode * 8191 + userid_list.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(handlerCompanyTagAndProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserid_list()).compareTo(other.isSetUserid_list());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserid_list()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid_list, other.userid_list);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handlerCompanyTagAndProfile_args(");
            boolean first = true;

            sb.append("userid_list:");
            if (this.userid_list == null) {
                sb.append("null");
            } else {
                sb.append(this.userid_list);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handlerCompanyTagAndProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handlerCompanyTagAndProfile_argsStandardScheme getScheme() {
                return new handlerCompanyTagAndProfile_argsStandardScheme();
            }
        }

        private static class handlerCompanyTagAndProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handlerCompanyTagAndProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handlerCompanyTagAndProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USERID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                                {
                                    org.apache.thrift.protocol.TSet _set200 = iprot.readSetBegin();
                                    struct.userid_list = new java.util.HashSet<java.lang.Integer>(2*_set200.size);
                                    int _elem201;
                                    for (int _i202 = 0; _i202 < _set200.size; ++_i202)
                                    {
                                        _elem201 = iprot.readI32();
                                        struct.userid_list.add(_elem201);
                                    }
                                    iprot.readSetEnd();
                                }
                                struct.setUserid_listIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handlerCompanyTagAndProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userid_list != null) {
                    oprot.writeFieldBegin(USERID_LIST_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.userid_list.size()));
                        for (int _iter203 : struct.userid_list)
                        {
                            oprot.writeI32(_iter203);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handlerCompanyTagAndProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handlerCompanyTagAndProfile_argsTupleScheme getScheme() {
                return new handlerCompanyTagAndProfile_argsTupleScheme();
            }
        }

        private static class handlerCompanyTagAndProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handlerCompanyTagAndProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handlerCompanyTagAndProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserid_list()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUserid_list()) {
                    {
                        oprot.writeI32(struct.userid_list.size());
                        for (int _iter204 : struct.userid_list)
                        {
                            oprot.writeI32(_iter204);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handlerCompanyTagAndProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TSet _set205 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.userid_list = new java.util.HashSet<java.lang.Integer>(2*_set205.size);
                        int _elem206;
                        for (int _i207 = 0; _i207 < _set205.size; ++_i207)
                        {
                            _elem206 = iprot.readI32();
                            struct.userid_list.add(_elem206);
                        }
                    }
                    struct.setUserid_listIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handlerCompanyTagAndProfile_result implements org.apache.thrift.TBase<handlerCompanyTagAndProfile_result, handlerCompanyTagAndProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<handlerCompanyTagAndProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handlerCompanyTagAndProfile_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handlerCompanyTagAndProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handlerCompanyTagAndProfile_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handlerCompanyTagAndProfile_result.class, metaDataMap);
        }

        public handlerCompanyTagAndProfile_result() {
        }

        public handlerCompanyTagAndProfile_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handlerCompanyTagAndProfile_result(handlerCompanyTagAndProfile_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public handlerCompanyTagAndProfile_result deepCopy() {
            return new handlerCompanyTagAndProfile_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public handlerCompanyTagAndProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handlerCompanyTagAndProfile_result)
                return this.equals((handlerCompanyTagAndProfile_result)that);
            return false;
        }

        public boolean equals(handlerCompanyTagAndProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(handlerCompanyTagAndProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handlerCompanyTagAndProfile_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handlerCompanyTagAndProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handlerCompanyTagAndProfile_resultStandardScheme getScheme() {
                return new handlerCompanyTagAndProfile_resultStandardScheme();
            }
        }

        private static class handlerCompanyTagAndProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handlerCompanyTagAndProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handlerCompanyTagAndProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handlerCompanyTagAndProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handlerCompanyTagAndProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handlerCompanyTagAndProfile_resultTupleScheme getScheme() {
                return new handlerCompanyTagAndProfile_resultTupleScheme();
            }
        }

        private static class handlerCompanyTagAndProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handlerCompanyTagAndProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handlerCompanyTagAndProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handlerCompanyTagAndProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentCountByPositionFilter_args implements org.apache.thrift.TBase<getTalentCountByPositionFilter_args, getTalentCountByPositionFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentCountByPositionFilter_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentCountByPositionFilter_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("position_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentCountByPositionFilter_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentCountByPositionFilter_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int position_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            POSITION_ID((short)3, "position_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __POSITION_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("position_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentCountByPositionFilter_args.class, metaDataMap);
        }

        public getTalentCountByPositionFilter_args() {
        }

        public getTalentCountByPositionFilter_args(
                int hr_id,
                int company_id,
                int position_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.position_id = position_id;
            setPosition_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentCountByPositionFilter_args(getTalentCountByPositionFilter_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.position_id = other.position_id;
        }

        public getTalentCountByPositionFilter_args deepCopy() {
            return new getTalentCountByPositionFilter_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPosition_idIsSet(false);
            this.position_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentCountByPositionFilter_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentCountByPositionFilter_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPosition_id() {
            return this.position_id;
        }

        public getTalentCountByPositionFilter_args setPosition_id(int position_id) {
            this.position_id = position_id;
            setPosition_idIsSet(true);
            return this;
        }

        public void unsetPosition_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
        }

        /** Returns true if field position_id is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
        }

        public void setPosition_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPosition_id();
                    } else {
                        setPosition_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case POSITION_ID:
                    return getPosition_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case POSITION_ID:
                    return isSetPosition_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentCountByPositionFilter_args)
                return this.equals((getTalentCountByPositionFilter_args)that);
            return false;
        }

        public boolean equals(getTalentCountByPositionFilter_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_position_id = true;
            boolean that_present_position_id = true;
            if (this_present_position_id || that_present_position_id) {
                if (!(this_present_position_id && that_present_position_id))
                    return false;
                if (this.position_id != that.position_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + position_id;

            return hashCode;
        }

        @Override
        public int compareTo(getTalentCountByPositionFilter_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPosition_id()).compareTo(other.isSetPosition_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_id, other.position_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentCountByPositionFilter_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position_id:");
            sb.append(this.position_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentCountByPositionFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentCountByPositionFilter_argsStandardScheme getScheme() {
                return new getTalentCountByPositionFilter_argsStandardScheme();
            }
        }

        private static class getTalentCountByPositionFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentCountByPositionFilter_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentCountByPositionFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.position_id = iprot.readI32();
                                struct.setPosition_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentCountByPositionFilter_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.position_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentCountByPositionFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentCountByPositionFilter_argsTupleScheme getScheme() {
                return new getTalentCountByPositionFilter_argsTupleScheme();
            }
        }

        private static class getTalentCountByPositionFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentCountByPositionFilter_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentCountByPositionFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPosition_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPosition_id()) {
                    oprot.writeI32(struct.position_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentCountByPositionFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.position_id = iprot.readI32();
                    struct.setPosition_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentCountByPositionFilter_result implements org.apache.thrift.TBase<getTalentCountByPositionFilter_result, getTalentCountByPositionFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentCountByPositionFilter_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentCountByPositionFilter_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentCountByPositionFilter_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentCountByPositionFilter_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentCountByPositionFilter_result.class, metaDataMap);
        }

        public getTalentCountByPositionFilter_result() {
        }

        public getTalentCountByPositionFilter_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentCountByPositionFilter_result(getTalentCountByPositionFilter_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentCountByPositionFilter_result deepCopy() {
            return new getTalentCountByPositionFilter_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentCountByPositionFilter_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentCountByPositionFilter_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentCountByPositionFilter_result)
                return this.equals((getTalentCountByPositionFilter_result)that);
            return false;
        }

        public boolean equals(getTalentCountByPositionFilter_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentCountByPositionFilter_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentCountByPositionFilter_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentCountByPositionFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentCountByPositionFilter_resultStandardScheme getScheme() {
                return new getTalentCountByPositionFilter_resultStandardScheme();
            }
        }

        private static class getTalentCountByPositionFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentCountByPositionFilter_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentCountByPositionFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentCountByPositionFilter_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentCountByPositionFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentCountByPositionFilter_resultTupleScheme getScheme() {
                return new getTalentCountByPositionFilter_resultTupleScheme();
            }
        }

        private static class getTalentCountByPositionFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentCountByPositionFilter_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentCountByPositionFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentCountByPositionFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailBalance_args implements org.apache.thrift.TBase<getEmailBalance_args, getEmailBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailBalance_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailBalance_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailBalance_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailBalance_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailBalance_args.class, metaDataMap);
        }

        public getEmailBalance_args() {
        }

        public getEmailBalance_args(
                int hr_id,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailBalance_args(getEmailBalance_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
        }

        public getEmailBalance_args deepCopy() {
            return new getEmailBalance_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getEmailBalance_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getEmailBalance_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailBalance_args)
                return this.equals((getEmailBalance_args)that);
            return false;
        }

        public boolean equals(getEmailBalance_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(getEmailBalance_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailBalance_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailBalance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailBalance_argsStandardScheme getScheme() {
                return new getEmailBalance_argsStandardScheme();
            }
        }

        private static class getEmailBalance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailBalance_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailBalance_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailBalance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailBalance_argsTupleScheme getScheme() {
                return new getEmailBalance_argsTupleScheme();
            }
        }

        private static class getEmailBalance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailBalance_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailBalance_result implements org.apache.thrift.TBase<getEmailBalance_result, getEmailBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailBalance_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailBalance_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailBalance_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailBalance_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailBalance_result.class, metaDataMap);
        }

        public getEmailBalance_result() {
        }

        public getEmailBalance_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailBalance_result(getEmailBalance_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getEmailBalance_result deepCopy() {
            return new getEmailBalance_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getEmailBalance_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getEmailBalance_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailBalance_result)
                return this.equals((getEmailBalance_result)that);
            return false;
        }

        public boolean equals(getEmailBalance_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getEmailBalance_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailBalance_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailBalance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailBalance_resultStandardScheme getScheme() {
                return new getEmailBalance_resultStandardScheme();
            }
        }

        private static class getEmailBalance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailBalance_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailBalance_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailBalance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailBalance_resultTupleScheme getScheme() {
                return new getEmailBalance_resultTupleScheme();
            }
        }

        private static class getEmailBalance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailBalance_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailTemplateList_args implements org.apache.thrift.TBase<getEmailTemplateList_args, getEmailTemplateList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailTemplateList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailTemplateList_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailTemplateList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailTemplateList_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailTemplateList_args.class, metaDataMap);
        }

        public getEmailTemplateList_args() {
        }

        public getEmailTemplateList_args(
                int hr_id,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailTemplateList_args(getEmailTemplateList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
        }

        public getEmailTemplateList_args deepCopy() {
            return new getEmailTemplateList_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getEmailTemplateList_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getEmailTemplateList_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailTemplateList_args)
                return this.equals((getEmailTemplateList_args)that);
            return false;
        }

        public boolean equals(getEmailTemplateList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(getEmailTemplateList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailTemplateList_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailTemplateList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailTemplateList_argsStandardScheme getScheme() {
                return new getEmailTemplateList_argsStandardScheme();
            }
        }

        private static class getEmailTemplateList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailTemplateList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailTemplateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailTemplateList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailTemplateList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailTemplateList_argsTupleScheme getScheme() {
                return new getEmailTemplateList_argsTupleScheme();
            }
        }

        private static class getEmailTemplateList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailTemplateList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailTemplateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailTemplateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailTemplateList_result implements org.apache.thrift.TBase<getEmailTemplateList_result, getEmailTemplateList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailTemplateList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailTemplateList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailTemplateList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailTemplateList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailTemplateList_result.class, metaDataMap);
        }

        public getEmailTemplateList_result() {
        }

        public getEmailTemplateList_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailTemplateList_result(getEmailTemplateList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getEmailTemplateList_result deepCopy() {
            return new getEmailTemplateList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getEmailTemplateList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getEmailTemplateList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailTemplateList_result)
                return this.equals((getEmailTemplateList_result)that);
            return false;
        }

        public boolean equals(getEmailTemplateList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getEmailTemplateList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailTemplateList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailTemplateList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailTemplateList_resultStandardScheme getScheme() {
                return new getEmailTemplateList_resultStandardScheme();
            }
        }

        private static class getEmailTemplateList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailTemplateList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailTemplateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailTemplateList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailTemplateList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailTemplateList_resultTupleScheme getScheme() {
                return new getEmailTemplateList_resultTupleScheme();
            }
        }

        private static class getEmailTemplateList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailTemplateList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailTemplateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailTemplateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailInfo_args implements org.apache.thrift.TBase<getEmailInfo_args, getEmailInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailInfo_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailInfo_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TYPE((short)3, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailInfo_args.class, metaDataMap);
        }

        public getEmailInfo_args() {
        }

        public getEmailInfo_args(
                int hr_id,
                int company_id,
                int type)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailInfo_args(getEmailInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.type = other.type;
        }

        public getEmailInfo_args deepCopy() {
            return new getEmailInfo_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getEmailInfo_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getEmailInfo_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getEmailInfo_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailInfo_args)
                return this.equals((getEmailInfo_args)that);
            return false;
        }

        public boolean equals(getEmailInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            return hashCode;
        }

        @Override
        public int compareTo(getEmailInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailInfo_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailInfo_argsStandardScheme getScheme() {
                return new getEmailInfo_argsStandardScheme();
            }
        }

        private static class getEmailInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailInfo_argsTupleScheme getScheme() {
                return new getEmailInfo_argsTupleScheme();
            }
        }

        private static class getEmailInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailInfo_result implements org.apache.thrift.TBase<getEmailInfo_result, getEmailInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailInfo_result.class, metaDataMap);
        }

        public getEmailInfo_result() {
        }

        public getEmailInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailInfo_result(getEmailInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getEmailInfo_result deepCopy() {
            return new getEmailInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getEmailInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getEmailInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailInfo_result)
                return this.equals((getEmailInfo_result)that);
            return false;
        }

        public boolean equals(getEmailInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getEmailInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailInfo_resultStandardScheme getScheme() {
                return new getEmailInfo_resultStandardScheme();
            }
        }

        private static class getEmailInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailInfo_resultTupleScheme getScheme() {
                return new getEmailInfo_resultTupleScheme();
            }
        }

        private static class getEmailInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCompanyEmailInfo_args implements org.apache.thrift.TBase<updateCompanyEmailInfo_args, updateCompanyEmailInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyEmailInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyEmailInfo_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRING, (short)5);
        private static final org.apache.thrift.protocol.TField INSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("inscribe", org.apache.thrift.protocol.TType.STRING, (short)6);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCompanyEmailInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCompanyEmailInfo_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int type; // required
        public int disable; // required
        public java.lang.String context; // required
        public java.lang.String inscribe; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TYPE((short)3, "type"),
            DISABLE((short)4, "disable"),
            CONTEXT((short)5, "context"),
            INSCRIBE((short)6, "inscribe");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    case 4: // DISABLE
                        return DISABLE;
                    case 5: // CONTEXT
                        return CONTEXT;
                    case 6: // INSCRIBE
                        return INSCRIBE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private static final int __DISABLE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.INSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("inscribe", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyEmailInfo_args.class, metaDataMap);
        }

        public updateCompanyEmailInfo_args() {
        }

        public updateCompanyEmailInfo_args(
                int hr_id,
                int company_id,
                int type,
                int disable,
                java.lang.String context,
                java.lang.String inscribe)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.disable = disable;
            setDisableIsSet(true);
            this.context = context;
            this.inscribe = inscribe;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCompanyEmailInfo_args(updateCompanyEmailInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.type = other.type;
            this.disable = other.disable;
            if (other.isSetContext()) {
                this.context = other.context;
            }
            if (other.isSetInscribe()) {
                this.inscribe = other.inscribe;
            }
        }

        public updateCompanyEmailInfo_args deepCopy() {
            return new updateCompanyEmailInfo_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
            setDisableIsSet(false);
            this.disable = 0;
            this.context = null;
            this.inscribe = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public updateCompanyEmailInfo_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public updateCompanyEmailInfo_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public updateCompanyEmailInfo_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getDisable() {
            return this.disable;
        }

        public updateCompanyEmailInfo_args setDisable(int disable) {
            this.disable = disable;
            setDisableIsSet(true);
            return this;
        }

        public void unsetDisable() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
        }

        /** Returns true if field disable is set (has been assigned a value) and false otherwise */
        public boolean isSetDisable() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
        }

        public void setDisableIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
        }

        public java.lang.String getContext() {
            return this.context;
        }

        public updateCompanyEmailInfo_args setContext(java.lang.String context) {
            this.context = context;
            return this;
        }

        public void unsetContext() {
            this.context = null;
        }

        /** Returns true if field context is set (has been assigned a value) and false otherwise */
        public boolean isSetContext() {
            return this.context != null;
        }

        public void setContextIsSet(boolean value) {
            if (!value) {
                this.context = null;
            }
        }

        public java.lang.String getInscribe() {
            return this.inscribe;
        }

        public updateCompanyEmailInfo_args setInscribe(java.lang.String inscribe) {
            this.inscribe = inscribe;
            return this;
        }

        public void unsetInscribe() {
            this.inscribe = null;
        }

        /** Returns true if field inscribe is set (has been assigned a value) and false otherwise */
        public boolean isSetInscribe() {
            return this.inscribe != null;
        }

        public void setInscribeIsSet(boolean value) {
            if (!value) {
                this.inscribe = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case DISABLE:
                    if (value == null) {
                        unsetDisable();
                    } else {
                        setDisable((java.lang.Integer)value);
                    }
                    break;

                case CONTEXT:
                    if (value == null) {
                        unsetContext();
                    } else {
                        setContext((java.lang.String)value);
                    }
                    break;

                case INSCRIBE:
                    if (value == null) {
                        unsetInscribe();
                    } else {
                        setInscribe((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

                case DISABLE:
                    return getDisable();

                case CONTEXT:
                    return getContext();

                case INSCRIBE:
                    return getInscribe();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
                case DISABLE:
                    return isSetDisable();
                case CONTEXT:
                    return isSetContext();
                case INSCRIBE:
                    return isSetInscribe();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCompanyEmailInfo_args)
                return this.equals((updateCompanyEmailInfo_args)that);
            return false;
        }

        public boolean equals(updateCompanyEmailInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_disable = true;
            boolean that_present_disable = true;
            if (this_present_disable || that_present_disable) {
                if (!(this_present_disable && that_present_disable))
                    return false;
                if (this.disable != that.disable)
                    return false;
            }

            boolean this_present_context = true && this.isSetContext();
            boolean that_present_context = true && that.isSetContext();
            if (this_present_context || that_present_context) {
                if (!(this_present_context && that_present_context))
                    return false;
                if (!this.context.equals(that.context))
                    return false;
            }

            boolean this_present_inscribe = true && this.isSetInscribe();
            boolean that_present_inscribe = true && that.isSetInscribe();
            if (this_present_inscribe || that_present_inscribe) {
                if (!(this_present_inscribe && that_present_inscribe))
                    return false;
                if (!this.inscribe.equals(that.inscribe))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + disable;

            hashCode = hashCode * 8191 + ((isSetContext()) ? 131071 : 524287);
            if (isSetContext())
                hashCode = hashCode * 8191 + context.hashCode();

            hashCode = hashCode * 8191 + ((isSetInscribe()) ? 131071 : 524287);
            if (isSetInscribe())
                hashCode = hashCode * 8191 + inscribe.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateCompanyEmailInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDisable()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetContext()).compareTo(other.isSetContext());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetContext()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, other.context);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetInscribe()).compareTo(other.isSetInscribe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInscribe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inscribe, other.inscribe);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCompanyEmailInfo_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("disable:");
            sb.append(this.disable);
            first = false;
            if (!first) sb.append(", ");
            sb.append("context:");
            if (this.context == null) {
                sb.append("null");
            } else {
                sb.append(this.context);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("inscribe:");
            if (this.inscribe == null) {
                sb.append("null");
            } else {
                sb.append(this.inscribe);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCompanyEmailInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailInfo_argsStandardScheme getScheme() {
                return new updateCompanyEmailInfo_argsStandardScheme();
            }
        }

        private static class updateCompanyEmailInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCompanyEmailInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // DISABLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.disable = iprot.readI32();
                                struct.setDisableIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // CONTEXT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.context = iprot.readString();
                                struct.setContextIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // INSCRIBE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.inscribe = iprot.readString();
                                struct.setInscribeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyEmailInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(DISABLE_FIELD_DESC);
                oprot.writeI32(struct.disable);
                oprot.writeFieldEnd();
                if (struct.context != null) {
                    oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
                    oprot.writeString(struct.context);
                    oprot.writeFieldEnd();
                }
                if (struct.inscribe != null) {
                    oprot.writeFieldBegin(INSCRIBE_FIELD_DESC);
                    oprot.writeString(struct.inscribe);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCompanyEmailInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailInfo_argsTupleScheme getScheme() {
                return new updateCompanyEmailInfo_argsTupleScheme();
            }
        }

        private static class updateCompanyEmailInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCompanyEmailInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                if (struct.isSetDisable()) {
                    optionals.set(3);
                }
                if (struct.isSetContext()) {
                    optionals.set(4);
                }
                if (struct.isSetInscribe()) {
                    optionals.set(5);
                }
                oprot.writeBitSet(optionals, 6);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetDisable()) {
                    oprot.writeI32(struct.disable);
                }
                if (struct.isSetContext()) {
                    oprot.writeString(struct.context);
                }
                if (struct.isSetInscribe()) {
                    oprot.writeString(struct.inscribe);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(6);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.disable = iprot.readI32();
                    struct.setDisableIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.context = iprot.readString();
                    struct.setContextIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.inscribe = iprot.readString();
                    struct.setInscribeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCompanyEmailInfo_result implements org.apache.thrift.TBase<updateCompanyEmailInfo_result, updateCompanyEmailInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyEmailInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyEmailInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCompanyEmailInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCompanyEmailInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyEmailInfo_result.class, metaDataMap);
        }

        public updateCompanyEmailInfo_result() {
        }

        public updateCompanyEmailInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCompanyEmailInfo_result(updateCompanyEmailInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateCompanyEmailInfo_result deepCopy() {
            return new updateCompanyEmailInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updateCompanyEmailInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateCompanyEmailInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCompanyEmailInfo_result)
                return this.equals((updateCompanyEmailInfo_result)that);
            return false;
        }

        public boolean equals(updateCompanyEmailInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateCompanyEmailInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCompanyEmailInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCompanyEmailInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailInfo_resultStandardScheme getScheme() {
                return new updateCompanyEmailInfo_resultStandardScheme();
            }
        }

        private static class updateCompanyEmailInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCompanyEmailInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyEmailInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCompanyEmailInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailInfo_resultTupleScheme getScheme() {
                return new updateCompanyEmailInfo_resultTupleScheme();
            }
        }

        private static class updateCompanyEmailInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCompanyEmailInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
