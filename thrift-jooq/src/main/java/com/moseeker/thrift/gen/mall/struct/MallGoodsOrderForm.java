/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.mall.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-10-30")
public class MallGoodsOrderForm implements org.apache.thrift.TBase<MallGoodsOrderForm, MallGoodsOrderForm._Fields>, java.io.Serializable, Cloneable, Comparable<MallGoodsOrderForm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MallGoodsOrderForm");

  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employee_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GOOD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("good_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MallGoodsOrderFormStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MallGoodsOrderFormTupleSchemeFactory();

  public int company_id; // optional
  public int employee_id; // optional
  public int good_id; // optional
  public int count; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_ID((short)1, "company_id"),
    EMPLOYEE_ID((short)2, "employee_id"),
    GOOD_ID((short)3, "good_id"),
    COUNT((short)4, "count");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_ID
          return COMPANY_ID;
        case 2: // EMPLOYEE_ID
          return EMPLOYEE_ID;
        case 3: // GOOD_ID
          return GOOD_ID;
        case 4: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPANY_ID_ISSET_ID = 0;
  private static final int __EMPLOYEE_ID_ISSET_ID = 1;
  private static final int __GOOD_ID_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPANY_ID,_Fields.EMPLOYEE_ID,_Fields.GOOD_ID,_Fields.COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employee_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOOD_ID, new org.apache.thrift.meta_data.FieldMetaData("good_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MallGoodsOrderForm.class, metaDataMap);
  }

  public MallGoodsOrderForm() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MallGoodsOrderForm(MallGoodsOrderForm other) {
    __isset_bitfield = other.__isset_bitfield;
    this.company_id = other.company_id;
    this.employee_id = other.employee_id;
    this.good_id = other.good_id;
    this.count = other.count;
  }

  public MallGoodsOrderForm deepCopy() {
    return new MallGoodsOrderForm(this);
  }

  @Override
  public void clear() {
    setCompany_idIsSet(false);
    this.company_id = 0;
    setEmployee_idIsSet(false);
    this.employee_id = 0;
    setGood_idIsSet(false);
    this.good_id = 0;
    setCountIsSet(false);
    this.count = 0;
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public MallGoodsOrderForm setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public int getEmployee_id() {
    return this.employee_id;
  }

  public MallGoodsOrderForm setEmployee_id(int employee_id) {
    this.employee_id = employee_id;
    setEmployee_idIsSet(true);
    return this;
  }

  public void unsetEmployee_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEE_ID_ISSET_ID);
  }

  /** Returns true if field employee_id is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployee_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEE_ID_ISSET_ID);
  }

  public void setEmployee_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEE_ID_ISSET_ID, value);
  }

  public int getGood_id() {
    return this.good_id;
  }

  public MallGoodsOrderForm setGood_id(int good_id) {
    this.good_id = good_id;
    setGood_idIsSet(true);
    return this;
  }

  public void unsetGood_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GOOD_ID_ISSET_ID);
  }

  /** Returns true if field good_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGood_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GOOD_ID_ISSET_ID);
  }

  public void setGood_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GOOD_ID_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public MallGoodsOrderForm setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((Integer)value);
      }
      break;

    case EMPLOYEE_ID:
      if (value == null) {
        unsetEmployee_id();
      } else {
        setEmployee_id((Integer)value);
      }
      break;

    case GOOD_ID:
      if (value == null) {
        unsetGood_id();
      } else {
        setGood_id((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_ID:
      return getCompany_id();

    case EMPLOYEE_ID:
      return getEmployee_id();

    case GOOD_ID:
      return getGood_id();

    case COUNT:
      return getCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_ID:
      return isSetCompany_id();
    case EMPLOYEE_ID:
      return isSetEmployee_id();
    case GOOD_ID:
      return isSetGood_id();
    case COUNT:
      return isSetCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MallGoodsOrderForm)
      return this.equals((MallGoodsOrderForm)that);
    return false;
  }

  public boolean equals(MallGoodsOrderForm that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_employee_id = true && this.isSetEmployee_id();
    boolean that_present_employee_id = true && that.isSetEmployee_id();
    if (this_present_employee_id || that_present_employee_id) {
      if (!(this_present_employee_id && that_present_employee_id))
        return false;
      if (this.employee_id != that.employee_id)
        return false;
    }

    boolean this_present_good_id = true && this.isSetGood_id();
    boolean that_present_good_id = true && that.isSetGood_id();
    if (this_present_good_id || that_present_good_id) {
      if (!(this_present_good_id && that_present_good_id))
        return false;
      if (this.good_id != that.good_id)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCompany_id()) ? 131071 : 524287);
    if (isSetCompany_id())
      hashCode = hashCode * 8191 + company_id;

    hashCode = hashCode * 8191 + ((isSetEmployee_id()) ? 131071 : 524287);
    if (isSetEmployee_id())
      hashCode = hashCode * 8191 + employee_id;

    hashCode = hashCode * 8191 + ((isSetGood_id()) ? 131071 : 524287);
    if (isSetGood_id())
      hashCode = hashCode * 8191 + good_id;

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + count;

    return hashCode;
  }

  @Override
  public int compareTo(MallGoodsOrderForm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployee_id()).compareTo(other.isSetEmployee_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployee_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employee_id, other.employee_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGood_id()).compareTo(other.isSetGood_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGood_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.good_id, other.good_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MallGoodsOrderForm(");
    boolean first = true;

    if (isSetCompany_id()) {
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetEmployee_id()) {
      if (!first) sb.append(", ");
      sb.append("employee_id:");
      sb.append(this.employee_id);
      first = false;
    }
    if (isSetGood_id()) {
      if (!first) sb.append(", ");
      sb.append("good_id:");
      sb.append(this.good_id);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MallGoodsOrderFormStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MallGoodsOrderFormStandardScheme getScheme() {
      return new MallGoodsOrderFormStandardScheme();
    }
  }

  private static class MallGoodsOrderFormStandardScheme extends org.apache.thrift.scheme.StandardScheme<MallGoodsOrderForm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MallGoodsOrderForm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMPLOYEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.employee_id = iprot.readI32();
              struct.setEmployee_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GOOD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.good_id = iprot.readI32();
              struct.setGood_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MallGoodsOrderForm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmployee_id()) {
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employee_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGood_id()) {
        oprot.writeFieldBegin(GOOD_ID_FIELD_DESC);
        oprot.writeI32(struct.good_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MallGoodsOrderFormTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MallGoodsOrderFormTupleScheme getScheme() {
      return new MallGoodsOrderFormTupleScheme();
    }
  }

  private static class MallGoodsOrderFormTupleScheme extends org.apache.thrift.scheme.TupleScheme<MallGoodsOrderForm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MallGoodsOrderForm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCompany_id()) {
        optionals.set(0);
      }
      if (struct.isSetEmployee_id()) {
        optionals.set(1);
      }
      if (struct.isSetGood_id()) {
        optionals.set(2);
      }
      if (struct.isSetCount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetEmployee_id()) {
        oprot.writeI32(struct.employee_id);
      }
      if (struct.isSetGood_id()) {
        oprot.writeI32(struct.good_id);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MallGoodsOrderForm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.employee_id = iprot.readI32();
        struct.setEmployee_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.good_id = iprot.readI32();
        struct.setGood_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

