/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-08")
public class ConfigSysTemplateMessageColumnConfigDO implements org.apache.thrift.TBase<ConfigSysTemplateMessageColumnConfigDO, ConfigSysTemplateMessageColumnConfigDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigSysTemplateMessageColumnConfigDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigSysTemplateMessageColumnConfigDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("enname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISPLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("display", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEF_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("defMsg", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigSysTemplateMessageColumnConfigDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigSysTemplateMessageColumnConfigDOTupleSchemeFactory();

  public int id; // optional
  public String templateId; // optional
  public String enname; // optional
  public String chname; // optional
  public int display; // optional
  public int priority; // optional
  public String defMsg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TEMPLATE_ID((short)2, "templateId"),
    ENNAME((short)3, "enname"),
    CHNAME((short)4, "chname"),
    DISPLAY((short)5, "display"),
    PRIORITY((short)6, "priority"),
    DEF_MSG((short)7, "defMsg");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 3: // ENNAME
          return ENNAME;
        case 4: // CHNAME
          return CHNAME;
        case 5: // DISPLAY
          return DISPLAY;
        case 6: // PRIORITY
          return PRIORITY;
        case 7: // DEF_MSG
          return DEF_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DISPLAY_ISSET_ID = 1;
  private static final int __PRIORITY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TEMPLATE_ID,_Fields.ENNAME,_Fields.CHNAME,_Fields.DISPLAY,_Fields.PRIORITY,_Fields.DEF_MSG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENNAME, new org.apache.thrift.meta_data.FieldMetaData("enname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHNAME, new org.apache.thrift.meta_data.FieldMetaData("chname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY, new org.apache.thrift.meta_data.FieldMetaData("display", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEF_MSG, new org.apache.thrift.meta_data.FieldMetaData("defMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigSysTemplateMessageColumnConfigDO.class, metaDataMap);
  }

  public ConfigSysTemplateMessageColumnConfigDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigSysTemplateMessageColumnConfigDO(ConfigSysTemplateMessageColumnConfigDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTemplateId()) {
      this.templateId = other.templateId;
    }
    if (other.isSetEnname()) {
      this.enname = other.enname;
    }
    if (other.isSetChname()) {
      this.chname = other.chname;
    }
    this.display = other.display;
    this.priority = other.priority;
    if (other.isSetDefMsg()) {
      this.defMsg = other.defMsg;
    }
  }

  public ConfigSysTemplateMessageColumnConfigDO deepCopy() {
    return new ConfigSysTemplateMessageColumnConfigDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.templateId = null;
    this.enname = null;
    this.chname = null;
    setDisplayIsSet(false);
    this.display = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    this.defMsg = null;
  }

  public int getId() {
    return this.id;
  }

  public ConfigSysTemplateMessageColumnConfigDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getTemplateId() {
    return this.templateId;
  }

  public ConfigSysTemplateMessageColumnConfigDO setTemplateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  public void unsetTemplateId() {
    this.templateId = null;
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return this.templateId != null;
  }

  public void setTemplateIdIsSet(boolean value) {
    if (!value) {
      this.templateId = null;
    }
  }

  public String getEnname() {
    return this.enname;
  }

  public ConfigSysTemplateMessageColumnConfigDO setEnname(String enname) {
    this.enname = enname;
    return this;
  }

  public void unsetEnname() {
    this.enname = null;
  }

  /** Returns true if field enname is set (has been assigned a value) and false otherwise */
  public boolean isSetEnname() {
    return this.enname != null;
  }

  public void setEnnameIsSet(boolean value) {
    if (!value) {
      this.enname = null;
    }
  }

  public String getChname() {
    return this.chname;
  }

  public ConfigSysTemplateMessageColumnConfigDO setChname(String chname) {
    this.chname = chname;
    return this;
  }

  public void unsetChname() {
    this.chname = null;
  }

  /** Returns true if field chname is set (has been assigned a value) and false otherwise */
  public boolean isSetChname() {
    return this.chname != null;
  }

  public void setChnameIsSet(boolean value) {
    if (!value) {
      this.chname = null;
    }
  }

  public int getDisplay() {
    return this.display;
  }

  public ConfigSysTemplateMessageColumnConfigDO setDisplay(int display) {
    this.display = display;
    setDisplayIsSet(true);
    return this;
  }

  public void unsetDisplay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISPLAY_ISSET_ID);
  }

  /** Returns true if field display is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISPLAY_ISSET_ID);
  }

  public void setDisplayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISPLAY_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public ConfigSysTemplateMessageColumnConfigDO setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public String getDefMsg() {
    return this.defMsg;
  }

  public ConfigSysTemplateMessageColumnConfigDO setDefMsg(String defMsg) {
    this.defMsg = defMsg;
    return this;
  }

  public void unsetDefMsg() {
    this.defMsg = null;
  }

  /** Returns true if field defMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetDefMsg() {
    return this.defMsg != null;
  }

  public void setDefMsgIsSet(boolean value) {
    if (!value) {
      this.defMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((String)value);
      }
      break;

    case ENNAME:
      if (value == null) {
        unsetEnname();
      } else {
        setEnname((String)value);
      }
      break;

    case CHNAME:
      if (value == null) {
        unsetChname();
      } else {
        setChname((String)value);
      }
      break;

    case DISPLAY:
      if (value == null) {
        unsetDisplay();
      } else {
        setDisplay((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case DEF_MSG:
      if (value == null) {
        unsetDefMsg();
      } else {
        setDefMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TEMPLATE_ID:
      return getTemplateId();

    case ENNAME:
      return getEnname();

    case CHNAME:
      return getChname();

    case DISPLAY:
      return getDisplay();

    case PRIORITY:
      return getPriority();

    case DEF_MSG:
      return getDefMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TEMPLATE_ID:
      return isSetTemplateId();
    case ENNAME:
      return isSetEnname();
    case CHNAME:
      return isSetChname();
    case DISPLAY:
      return isSetDisplay();
    case PRIORITY:
      return isSetPriority();
    case DEF_MSG:
      return isSetDefMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigSysTemplateMessageColumnConfigDO)
      return this.equals((ConfigSysTemplateMessageColumnConfigDO)that);
    return false;
  }

  public boolean equals(ConfigSysTemplateMessageColumnConfigDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_templateId = true && this.isSetTemplateId();
    boolean that_present_templateId = true && that.isSetTemplateId();
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (!this.templateId.equals(that.templateId))
        return false;
    }

    boolean this_present_enname = true && this.isSetEnname();
    boolean that_present_enname = true && that.isSetEnname();
    if (this_present_enname || that_present_enname) {
      if (!(this_present_enname && that_present_enname))
        return false;
      if (!this.enname.equals(that.enname))
        return false;
    }

    boolean this_present_chname = true && this.isSetChname();
    boolean that_present_chname = true && that.isSetChname();
    if (this_present_chname || that_present_chname) {
      if (!(this_present_chname && that_present_chname))
        return false;
      if (!this.chname.equals(that.chname))
        return false;
    }

    boolean this_present_display = true && this.isSetDisplay();
    boolean that_present_display = true && that.isSetDisplay();
    if (this_present_display || that_present_display) {
      if (!(this_present_display && that_present_display))
        return false;
      if (this.display != that.display)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_defMsg = true && this.isSetDefMsg();
    boolean that_present_defMsg = true && that.isSetDefMsg();
    if (this_present_defMsg || that_present_defMsg) {
      if (!(this_present_defMsg && that_present_defMsg))
        return false;
      if (!this.defMsg.equals(that.defMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTemplateId()) ? 131071 : 524287);
    if (isSetTemplateId())
      hashCode = hashCode * 8191 + templateId.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnname()) ? 131071 : 524287);
    if (isSetEnname())
      hashCode = hashCode * 8191 + enname.hashCode();

    hashCode = hashCode * 8191 + ((isSetChname()) ? 131071 : 524287);
    if (isSetChname())
      hashCode = hashCode * 8191 + chname.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplay()) ? 131071 : 524287);
    if (isSetDisplay())
      hashCode = hashCode * 8191 + display;

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + ((isSetDefMsg()) ? 131071 : 524287);
    if (isSetDefMsg())
      hashCode = hashCode * 8191 + defMsg.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConfigSysTemplateMessageColumnConfigDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnname()).compareTo(other.isSetEnname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enname, other.enname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChname()).compareTo(other.isSetChname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chname, other.chname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplay()).compareTo(other.isSetDisplay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display, other.display);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefMsg()).compareTo(other.isSetDefMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defMsg, other.defMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigSysTemplateMessageColumnConfigDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetTemplateId()) {
      if (!first) sb.append(", ");
      sb.append("templateId:");
      if (this.templateId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateId);
      }
      first = false;
    }
    if (isSetEnname()) {
      if (!first) sb.append(", ");
      sb.append("enname:");
      if (this.enname == null) {
        sb.append("null");
      } else {
        sb.append(this.enname);
      }
      first = false;
    }
    if (isSetChname()) {
      if (!first) sb.append(", ");
      sb.append("chname:");
      if (this.chname == null) {
        sb.append("null");
      } else {
        sb.append(this.chname);
      }
      first = false;
    }
    if (isSetDisplay()) {
      if (!first) sb.append(", ");
      sb.append("display:");
      sb.append(this.display);
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetDefMsg()) {
      if (!first) sb.append(", ");
      sb.append("defMsg:");
      if (this.defMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.defMsg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigSysTemplateMessageColumnConfigDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysTemplateMessageColumnConfigDOStandardScheme getScheme() {
      return new ConfigSysTemplateMessageColumnConfigDOStandardScheme();
    }
  }

  private static class ConfigSysTemplateMessageColumnConfigDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigSysTemplateMessageColumnConfigDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigSysTemplateMessageColumnConfigDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateId = iprot.readString();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enname = iprot.readString();
              struct.setEnnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chname = iprot.readString();
              struct.setChnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISPLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.display = iprot.readI32();
              struct.setDisplayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEF_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.defMsg = iprot.readString();
              struct.setDefMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigSysTemplateMessageColumnConfigDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.templateId != null) {
        if (struct.isSetTemplateId()) {
          oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.templateId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.enname != null) {
        if (struct.isSetEnname()) {
          oprot.writeFieldBegin(ENNAME_FIELD_DESC);
          oprot.writeString(struct.enname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chname != null) {
        if (struct.isSetChname()) {
          oprot.writeFieldBegin(CHNAME_FIELD_DESC);
          oprot.writeString(struct.chname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisplay()) {
        oprot.writeFieldBegin(DISPLAY_FIELD_DESC);
        oprot.writeI32(struct.display);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.defMsg != null) {
        if (struct.isSetDefMsg()) {
          oprot.writeFieldBegin(DEF_MSG_FIELD_DESC);
          oprot.writeString(struct.defMsg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigSysTemplateMessageColumnConfigDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysTemplateMessageColumnConfigDOTupleScheme getScheme() {
      return new ConfigSysTemplateMessageColumnConfigDOTupleScheme();
    }
  }

  private static class ConfigSysTemplateMessageColumnConfigDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigSysTemplateMessageColumnConfigDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigSysTemplateMessageColumnConfigDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateId()) {
        optionals.set(1);
      }
      if (struct.isSetEnname()) {
        optionals.set(2);
      }
      if (struct.isSetChname()) {
        optionals.set(3);
      }
      if (struct.isSetDisplay()) {
        optionals.set(4);
      }
      if (struct.isSetPriority()) {
        optionals.set(5);
      }
      if (struct.isSetDefMsg()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTemplateId()) {
        oprot.writeString(struct.templateId);
      }
      if (struct.isSetEnname()) {
        oprot.writeString(struct.enname);
      }
      if (struct.isSetChname()) {
        oprot.writeString(struct.chname);
      }
      if (struct.isSetDisplay()) {
        oprot.writeI32(struct.display);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetDefMsg()) {
        oprot.writeString(struct.defMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigSysTemplateMessageColumnConfigDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.templateId = iprot.readString();
        struct.setTemplateIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.enname = iprot.readString();
        struct.setEnnameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chname = iprot.readString();
        struct.setChnameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.display = iprot.readI32();
        struct.setDisplayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.defMsg = iprot.readString();
        struct.setDefMsgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

