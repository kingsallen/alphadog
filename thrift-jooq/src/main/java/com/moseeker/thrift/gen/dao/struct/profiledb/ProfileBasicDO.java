/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.profiledb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-16")
public class ProfileBasicDO implements org.apache.thrift.TBase<ProfileBasicDO, ProfileBasicDO._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileBasicDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileBasicDO");

  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField NATIONALITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nationalityCode", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NATIONALITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nationalityName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BIRTH_FIELD_DESC = new org.apache.thrift.protocol.TField("birth", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField WEIXIN_FIELD_DESC = new org.apache.thrift.protocol.TField("weixin", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MOTTO_FIELD_DESC = new org.apache.thrift.protocol.TField("motto", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SELF_INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("selfIntroduction", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProfileBasicDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProfileBasicDOTupleSchemeFactory();

  public int profileId; // optional
  public String name; // optional
  public byte gender; // optional
  public int nationalityCode; // optional
  public String nationalityName; // optional
  public int cityCode; // optional
  public String cityName; // optional
  public String birth; // optional
  public String weixin; // optional
  public String qq; // optional
  public String motto; // optional
  public String selfIntroduction; // optional
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROFILE_ID((short)1, "profileId"),
    NAME((short)2, "name"),
    GENDER((short)3, "gender"),
    NATIONALITY_CODE((short)4, "nationalityCode"),
    NATIONALITY_NAME((short)5, "nationalityName"),
    CITY_CODE((short)6, "cityCode"),
    CITY_NAME((short)7, "cityName"),
    BIRTH((short)8, "birth"),
    WEIXIN((short)9, "weixin"),
    QQ((short)10, "qq"),
    MOTTO((short)11, "motto"),
    SELF_INTRODUCTION((short)12, "selfIntroduction"),
    CREATE_TIME((short)13, "createTime"),
    UPDATE_TIME((short)14, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROFILE_ID
          return PROFILE_ID;
        case 2: // NAME
          return NAME;
        case 3: // GENDER
          return GENDER;
        case 4: // NATIONALITY_CODE
          return NATIONALITY_CODE;
        case 5: // NATIONALITY_NAME
          return NATIONALITY_NAME;
        case 6: // CITY_CODE
          return CITY_CODE;
        case 7: // CITY_NAME
          return CITY_NAME;
        case 8: // BIRTH
          return BIRTH;
        case 9: // WEIXIN
          return WEIXIN;
        case 10: // QQ
          return QQ;
        case 11: // MOTTO
          return MOTTO;
        case 12: // SELF_INTRODUCTION
          return SELF_INTRODUCTION;
        case 13: // CREATE_TIME
          return CREATE_TIME;
        case 14: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROFILEID_ISSET_ID = 0;
  private static final int __GENDER_ISSET_ID = 1;
  private static final int __NATIONALITYCODE_ISSET_ID = 2;
  private static final int __CITYCODE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROFILE_ID,_Fields.NAME,_Fields.GENDER,_Fields.NATIONALITY_CODE,_Fields.NATIONALITY_NAME,_Fields.CITY_CODE,_Fields.CITY_NAME,_Fields.BIRTH,_Fields.WEIXIN,_Fields.QQ,_Fields.MOTTO,_Fields.SELF_INTRODUCTION,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NATIONALITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("nationalityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NATIONALITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("nationalityName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTH, new org.apache.thrift.meta_data.FieldMetaData("birth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEIXIN, new org.apache.thrift.meta_data.FieldMetaData("weixin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOTTO, new org.apache.thrift.meta_data.FieldMetaData("motto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELF_INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("selfIntroduction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileBasicDO.class, metaDataMap);
  }

  public ProfileBasicDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileBasicDO(ProfileBasicDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.profileId = other.profileId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.gender = other.gender;
    this.nationalityCode = other.nationalityCode;
    if (other.isSetNationalityName()) {
      this.nationalityName = other.nationalityName;
    }
    this.cityCode = other.cityCode;
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    if (other.isSetBirth()) {
      this.birth = other.birth;
    }
    if (other.isSetWeixin()) {
      this.weixin = other.weixin;
    }
    if (other.isSetQq()) {
      this.qq = other.qq;
    }
    if (other.isSetMotto()) {
      this.motto = other.motto;
    }
    if (other.isSetSelfIntroduction()) {
      this.selfIntroduction = other.selfIntroduction;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public ProfileBasicDO deepCopy() {
    return new ProfileBasicDO(this);
  }

  @Override
  public void clear() {
    setProfileIdIsSet(false);
    this.profileId = 0;
    this.name = null;
    setGenderIsSet(false);
    this.gender = 0;
    setNationalityCodeIsSet(false);
    this.nationalityCode = 0;
    this.nationalityName = null;
    setCityCodeIsSet(false);
    this.cityCode = 0;
    this.cityName = null;
    this.birth = null;
    this.weixin = null;
    this.qq = null;
    this.motto = null;
    this.selfIntroduction = null;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getProfileId() {
    return this.profileId;
  }

  public ProfileBasicDO setProfileId(int profileId) {
    this.profileId = profileId;
    setProfileIdIsSet(true);
    return this;
  }

  public void unsetProfileId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  public void setProfileIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILEID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ProfileBasicDO setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte getGender() {
    return this.gender;
  }

  public ProfileBasicDO setGender(byte gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public int getNationalityCode() {
    return this.nationalityCode;
  }

  public ProfileBasicDO setNationalityCode(int nationalityCode) {
    this.nationalityCode = nationalityCode;
    setNationalityCodeIsSet(true);
    return this;
  }

  public void unsetNationalityCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NATIONALITYCODE_ISSET_ID);
  }

  /** Returns true if field nationalityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetNationalityCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NATIONALITYCODE_ISSET_ID);
  }

  public void setNationalityCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NATIONALITYCODE_ISSET_ID, value);
  }

  public String getNationalityName() {
    return this.nationalityName;
  }

  public ProfileBasicDO setNationalityName(String nationalityName) {
    this.nationalityName = nationalityName;
    return this;
  }

  public void unsetNationalityName() {
    this.nationalityName = null;
  }

  /** Returns true if field nationalityName is set (has been assigned a value) and false otherwise */
  public boolean isSetNationalityName() {
    return this.nationalityName != null;
  }

  public void setNationalityNameIsSet(boolean value) {
    if (!value) {
      this.nationalityName = null;
    }
  }

  public int getCityCode() {
    return this.cityCode;
  }

  public ProfileBasicDO setCityCode(int cityCode) {
    this.cityCode = cityCode;
    setCityCodeIsSet(true);
    return this;
  }

  public void unsetCityCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CITYCODE_ISSET_ID);
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CITYCODE_ISSET_ID);
  }

  public void setCityCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CITYCODE_ISSET_ID, value);
  }

  public String getCityName() {
    return this.cityName;
  }

  public ProfileBasicDO setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public String getBirth() {
    return this.birth;
  }

  public ProfileBasicDO setBirth(String birth) {
    this.birth = birth;
    return this;
  }

  public void unsetBirth() {
    this.birth = null;
  }

  /** Returns true if field birth is set (has been assigned a value) and false otherwise */
  public boolean isSetBirth() {
    return this.birth != null;
  }

  public void setBirthIsSet(boolean value) {
    if (!value) {
      this.birth = null;
    }
  }

  public String getWeixin() {
    return this.weixin;
  }

  public ProfileBasicDO setWeixin(String weixin) {
    this.weixin = weixin;
    return this;
  }

  public void unsetWeixin() {
    this.weixin = null;
  }

  /** Returns true if field weixin is set (has been assigned a value) and false otherwise */
  public boolean isSetWeixin() {
    return this.weixin != null;
  }

  public void setWeixinIsSet(boolean value) {
    if (!value) {
      this.weixin = null;
    }
  }

  public String getQq() {
    return this.qq;
  }

  public ProfileBasicDO setQq(String qq) {
    this.qq = qq;
    return this;
  }

  public void unsetQq() {
    this.qq = null;
  }

  /** Returns true if field qq is set (has been assigned a value) and false otherwise */
  public boolean isSetQq() {
    return this.qq != null;
  }

  public void setQqIsSet(boolean value) {
    if (!value) {
      this.qq = null;
    }
  }

  public String getMotto() {
    return this.motto;
  }

  public ProfileBasicDO setMotto(String motto) {
    this.motto = motto;
    return this;
  }

  public void unsetMotto() {
    this.motto = null;
  }

  /** Returns true if field motto is set (has been assigned a value) and false otherwise */
  public boolean isSetMotto() {
    return this.motto != null;
  }

  public void setMottoIsSet(boolean value) {
    if (!value) {
      this.motto = null;
    }
  }

  public String getSelfIntroduction() {
    return this.selfIntroduction;
  }

  public ProfileBasicDO setSelfIntroduction(String selfIntroduction) {
    this.selfIntroduction = selfIntroduction;
    return this;
  }

  public void unsetSelfIntroduction() {
    this.selfIntroduction = null;
  }

  /** Returns true if field selfIntroduction is set (has been assigned a value) and false otherwise */
  public boolean isSetSelfIntroduction() {
    return this.selfIntroduction != null;
  }

  public void setSelfIntroductionIsSet(boolean value) {
    if (!value) {
      this.selfIntroduction = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProfileBasicDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProfileBasicDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROFILE_ID:
      if (value == null) {
        unsetProfileId();
      } else {
        setProfileId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Byte)value);
      }
      break;

    case NATIONALITY_CODE:
      if (value == null) {
        unsetNationalityCode();
      } else {
        setNationalityCode((Integer)value);
      }
      break;

    case NATIONALITY_NAME:
      if (value == null) {
        unsetNationalityName();
      } else {
        setNationalityName((String)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((Integer)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case BIRTH:
      if (value == null) {
        unsetBirth();
      } else {
        setBirth((String)value);
      }
      break;

    case WEIXIN:
      if (value == null) {
        unsetWeixin();
      } else {
        setWeixin((String)value);
      }
      break;

    case QQ:
      if (value == null) {
        unsetQq();
      } else {
        setQq((String)value);
      }
      break;

    case MOTTO:
      if (value == null) {
        unsetMotto();
      } else {
        setMotto((String)value);
      }
      break;

    case SELF_INTRODUCTION:
      if (value == null) {
        unsetSelfIntroduction();
      } else {
        setSelfIntroduction((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROFILE_ID:
      return getProfileId();

    case NAME:
      return getName();

    case GENDER:
      return getGender();

    case NATIONALITY_CODE:
      return getNationalityCode();

    case NATIONALITY_NAME:
      return getNationalityName();

    case CITY_CODE:
      return getCityCode();

    case CITY_NAME:
      return getCityName();

    case BIRTH:
      return getBirth();

    case WEIXIN:
      return getWeixin();

    case QQ:
      return getQq();

    case MOTTO:
      return getMotto();

    case SELF_INTRODUCTION:
      return getSelfIntroduction();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROFILE_ID:
      return isSetProfileId();
    case NAME:
      return isSetName();
    case GENDER:
      return isSetGender();
    case NATIONALITY_CODE:
      return isSetNationalityCode();
    case NATIONALITY_NAME:
      return isSetNationalityName();
    case CITY_CODE:
      return isSetCityCode();
    case CITY_NAME:
      return isSetCityName();
    case BIRTH:
      return isSetBirth();
    case WEIXIN:
      return isSetWeixin();
    case QQ:
      return isSetQq();
    case MOTTO:
      return isSetMotto();
    case SELF_INTRODUCTION:
      return isSetSelfIntroduction();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileBasicDO)
      return this.equals((ProfileBasicDO)that);
    return false;
  }

  public boolean equals(ProfileBasicDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_profileId = true && this.isSetProfileId();
    boolean that_present_profileId = true && that.isSetProfileId();
    if (this_present_profileId || that_present_profileId) {
      if (!(this_present_profileId && that_present_profileId))
        return false;
      if (this.profileId != that.profileId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_nationalityCode = true && this.isSetNationalityCode();
    boolean that_present_nationalityCode = true && that.isSetNationalityCode();
    if (this_present_nationalityCode || that_present_nationalityCode) {
      if (!(this_present_nationalityCode && that_present_nationalityCode))
        return false;
      if (this.nationalityCode != that.nationalityCode)
        return false;
    }

    boolean this_present_nationalityName = true && this.isSetNationalityName();
    boolean that_present_nationalityName = true && that.isSetNationalityName();
    if (this_present_nationalityName || that_present_nationalityName) {
      if (!(this_present_nationalityName && that_present_nationalityName))
        return false;
      if (!this.nationalityName.equals(that.nationalityName))
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (this.cityCode != that.cityCode)
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_birth = true && this.isSetBirth();
    boolean that_present_birth = true && that.isSetBirth();
    if (this_present_birth || that_present_birth) {
      if (!(this_present_birth && that_present_birth))
        return false;
      if (!this.birth.equals(that.birth))
        return false;
    }

    boolean this_present_weixin = true && this.isSetWeixin();
    boolean that_present_weixin = true && that.isSetWeixin();
    if (this_present_weixin || that_present_weixin) {
      if (!(this_present_weixin && that_present_weixin))
        return false;
      if (!this.weixin.equals(that.weixin))
        return false;
    }

    boolean this_present_qq = true && this.isSetQq();
    boolean that_present_qq = true && that.isSetQq();
    if (this_present_qq || that_present_qq) {
      if (!(this_present_qq && that_present_qq))
        return false;
      if (!this.qq.equals(that.qq))
        return false;
    }

    boolean this_present_motto = true && this.isSetMotto();
    boolean that_present_motto = true && that.isSetMotto();
    if (this_present_motto || that_present_motto) {
      if (!(this_present_motto && that_present_motto))
        return false;
      if (!this.motto.equals(that.motto))
        return false;
    }

    boolean this_present_selfIntroduction = true && this.isSetSelfIntroduction();
    boolean that_present_selfIntroduction = true && that.isSetSelfIntroduction();
    if (this_present_selfIntroduction || that_present_selfIntroduction) {
      if (!(this_present_selfIntroduction && that_present_selfIntroduction))
        return false;
      if (!this.selfIntroduction.equals(that.selfIntroduction))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProfileId()) ? 131071 : 524287);
    if (isSetProfileId())
      hashCode = hashCode * 8191 + profileId;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetGender()) ? 131071 : 524287);
    if (isSetGender())
      hashCode = hashCode * 8191 + (int) (gender);

    hashCode = hashCode * 8191 + ((isSetNationalityCode()) ? 131071 : 524287);
    if (isSetNationalityCode())
      hashCode = hashCode * 8191 + nationalityCode;

    hashCode = hashCode * 8191 + ((isSetNationalityName()) ? 131071 : 524287);
    if (isSetNationalityName())
      hashCode = hashCode * 8191 + nationalityName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCityCode()) ? 131071 : 524287);
    if (isSetCityCode())
      hashCode = hashCode * 8191 + cityCode;

    hashCode = hashCode * 8191 + ((isSetCityName()) ? 131071 : 524287);
    if (isSetCityName())
      hashCode = hashCode * 8191 + cityName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBirth()) ? 131071 : 524287);
    if (isSetBirth())
      hashCode = hashCode * 8191 + birth.hashCode();

    hashCode = hashCode * 8191 + ((isSetWeixin()) ? 131071 : 524287);
    if (isSetWeixin())
      hashCode = hashCode * 8191 + weixin.hashCode();

    hashCode = hashCode * 8191 + ((isSetQq()) ? 131071 : 524287);
    if (isSetQq())
      hashCode = hashCode * 8191 + qq.hashCode();

    hashCode = hashCode * 8191 + ((isSetMotto()) ? 131071 : 524287);
    if (isSetMotto())
      hashCode = hashCode * 8191 + motto.hashCode();

    hashCode = hashCode * 8191 + ((isSetSelfIntroduction()) ? 131071 : 524287);
    if (isSetSelfIntroduction())
      hashCode = hashCode * 8191 + selfIntroduction.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProfileBasicDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationalityCode()).compareTo(other.isSetNationalityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationalityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationalityCode, other.nationalityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationalityName()).compareTo(other.isSetNationalityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationalityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationalityName, other.nationalityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirth()).compareTo(other.isSetBirth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birth, other.birth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeixin()).compareTo(other.isSetWeixin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeixin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weixin, other.weixin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQq()).compareTo(other.isSetQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, other.qq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMotto()).compareTo(other.isSetMotto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMotto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.motto, other.motto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelfIntroduction()).compareTo(other.isSetSelfIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelfIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfIntroduction, other.selfIntroduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileBasicDO(");
    boolean first = true;

    if (isSetProfileId()) {
      sb.append("profileId:");
      sb.append(this.profileId);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetNationalityCode()) {
      if (!first) sb.append(", ");
      sb.append("nationalityCode:");
      sb.append(this.nationalityCode);
      first = false;
    }
    if (isSetNationalityName()) {
      if (!first) sb.append(", ");
      sb.append("nationalityName:");
      if (this.nationalityName == null) {
        sb.append("null");
      } else {
        sb.append(this.nationalityName);
      }
      first = false;
    }
    if (isSetCityCode()) {
      if (!first) sb.append(", ");
      sb.append("cityCode:");
      sb.append(this.cityCode);
      first = false;
    }
    if (isSetCityName()) {
      if (!first) sb.append(", ");
      sb.append("cityName:");
      if (this.cityName == null) {
        sb.append("null");
      } else {
        sb.append(this.cityName);
      }
      first = false;
    }
    if (isSetBirth()) {
      if (!first) sb.append(", ");
      sb.append("birth:");
      if (this.birth == null) {
        sb.append("null");
      } else {
        sb.append(this.birth);
      }
      first = false;
    }
    if (isSetWeixin()) {
      if (!first) sb.append(", ");
      sb.append("weixin:");
      if (this.weixin == null) {
        sb.append("null");
      } else {
        sb.append(this.weixin);
      }
      first = false;
    }
    if (isSetQq()) {
      if (!first) sb.append(", ");
      sb.append("qq:");
      if (this.qq == null) {
        sb.append("null");
      } else {
        sb.append(this.qq);
      }
      first = false;
    }
    if (isSetMotto()) {
      if (!first) sb.append(", ");
      sb.append("motto:");
      if (this.motto == null) {
        sb.append("null");
      } else {
        sb.append(this.motto);
      }
      first = false;
    }
    if (isSetSelfIntroduction()) {
      if (!first) sb.append(", ");
      sb.append("selfIntroduction:");
      if (this.selfIntroduction == null) {
        sb.append("null");
      } else {
        sb.append(this.selfIntroduction);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileBasicDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileBasicDOStandardScheme getScheme() {
      return new ProfileBasicDOStandardScheme();
    }
  }

  private static class ProfileBasicDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProfileBasicDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileBasicDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profileId = iprot.readI32();
              struct.setProfileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.gender = iprot.readByte();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NATIONALITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nationalityCode = iprot.readI32();
              struct.setNationalityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NATIONALITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationalityName = iprot.readString();
              struct.setNationalityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cityCode = iprot.readI32();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BIRTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birth = iprot.readString();
              struct.setBirthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WEIXIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.weixin = iprot.readString();
              struct.setWeixinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qq = iprot.readString();
              struct.setQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MOTTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.motto = iprot.readString();
              struct.setMottoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SELF_INTRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.selfIntroduction = iprot.readString();
              struct.setSelfIntroductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileBasicDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetProfileId()) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeI32(struct.profileId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeByte(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNationalityCode()) {
        oprot.writeFieldBegin(NATIONALITY_CODE_FIELD_DESC);
        oprot.writeI32(struct.nationalityCode);
        oprot.writeFieldEnd();
      }
      if (struct.nationalityName != null) {
        if (struct.isSetNationalityName()) {
          oprot.writeFieldBegin(NATIONALITY_NAME_FIELD_DESC);
          oprot.writeString(struct.nationalityName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCityCode()) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeI32(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        if (struct.isSetCityName()) {
          oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.cityName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.birth != null) {
        if (struct.isSetBirth()) {
          oprot.writeFieldBegin(BIRTH_FIELD_DESC);
          oprot.writeString(struct.birth);
          oprot.writeFieldEnd();
        }
      }
      if (struct.weixin != null) {
        if (struct.isSetWeixin()) {
          oprot.writeFieldBegin(WEIXIN_FIELD_DESC);
          oprot.writeString(struct.weixin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.qq != null) {
        if (struct.isSetQq()) {
          oprot.writeFieldBegin(QQ_FIELD_DESC);
          oprot.writeString(struct.qq);
          oprot.writeFieldEnd();
        }
      }
      if (struct.motto != null) {
        if (struct.isSetMotto()) {
          oprot.writeFieldBegin(MOTTO_FIELD_DESC);
          oprot.writeString(struct.motto);
          oprot.writeFieldEnd();
        }
      }
      if (struct.selfIntroduction != null) {
        if (struct.isSetSelfIntroduction()) {
          oprot.writeFieldBegin(SELF_INTRODUCTION_FIELD_DESC);
          oprot.writeString(struct.selfIntroduction);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileBasicDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileBasicDOTupleScheme getScheme() {
      return new ProfileBasicDOTupleScheme();
    }
  }

  private static class ProfileBasicDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProfileBasicDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileBasicDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProfileId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetGender()) {
        optionals.set(2);
      }
      if (struct.isSetNationalityCode()) {
        optionals.set(3);
      }
      if (struct.isSetNationalityName()) {
        optionals.set(4);
      }
      if (struct.isSetCityCode()) {
        optionals.set(5);
      }
      if (struct.isSetCityName()) {
        optionals.set(6);
      }
      if (struct.isSetBirth()) {
        optionals.set(7);
      }
      if (struct.isSetWeixin()) {
        optionals.set(8);
      }
      if (struct.isSetQq()) {
        optionals.set(9);
      }
      if (struct.isSetMotto()) {
        optionals.set(10);
      }
      if (struct.isSetSelfIntroduction()) {
        optionals.set(11);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetProfileId()) {
        oprot.writeI32(struct.profileId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetGender()) {
        oprot.writeByte(struct.gender);
      }
      if (struct.isSetNationalityCode()) {
        oprot.writeI32(struct.nationalityCode);
      }
      if (struct.isSetNationalityName()) {
        oprot.writeString(struct.nationalityName);
      }
      if (struct.isSetCityCode()) {
        oprot.writeI32(struct.cityCode);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetBirth()) {
        oprot.writeString(struct.birth);
      }
      if (struct.isSetWeixin()) {
        oprot.writeString(struct.weixin);
      }
      if (struct.isSetQq()) {
        oprot.writeString(struct.qq);
      }
      if (struct.isSetMotto()) {
        oprot.writeString(struct.motto);
      }
      if (struct.isSetSelfIntroduction()) {
        oprot.writeString(struct.selfIntroduction);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileBasicDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.profileId = iprot.readI32();
        struct.setProfileIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gender = iprot.readByte();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nationalityCode = iprot.readI32();
        struct.setNationalityCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nationalityName = iprot.readString();
        struct.setNationalityNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cityCode = iprot.readI32();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.birth = iprot.readString();
        struct.setBirthIsSet(true);
      }
      if (incoming.get(8)) {
        struct.weixin = iprot.readString();
        struct.setWeixinIsSet(true);
      }
      if (incoming.get(9)) {
        struct.qq = iprot.readString();
        struct.setQqIsSet(true);
      }
      if (incoming.get(10)) {
        struct.motto = iprot.readString();
        struct.setMottoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.selfIntroduction = iprot.readString();
        struct.setSelfIntroductionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

