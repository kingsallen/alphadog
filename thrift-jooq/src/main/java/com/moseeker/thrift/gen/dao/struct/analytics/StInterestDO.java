/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.analytics;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-15")
public class StInterestDO implements org.apache.thrift.TBase<StInterestDO, StInterestDO._Fields>, java.io.Serializable, Cloneable, Comparable<StInterestDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StInterestDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RECOM_FIELD_DESC = new org.apache.thrift.protocol.TField("recom", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VIEWER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("viewerId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("openId", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StInterestDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StInterestDOTupleSchemeFactory();

  public int id; // optional
  public java.lang.String createTime; // optional
  public int pid; // optional
  public int recom; // optional
  public java.lang.String viewerId; // optional
  public java.lang.String openId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CREATE_TIME((short)2, "createTime"),
    PID((short)3, "pid"),
    RECOM((short)4, "recom"),
    VIEWER_ID((short)5, "viewerId"),
    OPEN_ID((short)6, "openId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CREATE_TIME
          return CREATE_TIME;
        case 3: // PID
          return PID;
        case 4: // RECOM
          return RECOM;
        case 5: // VIEWER_ID
          return VIEWER_ID;
        case 6: // OPEN_ID
          return OPEN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PID_ISSET_ID = 1;
  private static final int __RECOM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CREATE_TIME,_Fields.PID,_Fields.RECOM,_Fields.VIEWER_ID,_Fields.OPEN_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOM, new org.apache.thrift.meta_data.FieldMetaData("recom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEWER_ID, new org.apache.thrift.meta_data.FieldMetaData("viewerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_ID, new org.apache.thrift.meta_data.FieldMetaData("openId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StInterestDO.class, metaDataMap);
  }

  public StInterestDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StInterestDO(StInterestDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.pid = other.pid;
    this.recom = other.recom;
    if (other.isSetViewerId()) {
      this.viewerId = other.viewerId;
    }
    if (other.isSetOpenId()) {
      this.openId = other.openId;
    }
  }

  public StInterestDO deepCopy() {
    return new StInterestDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.createTime = null;
    setPidIsSet(false);
    this.pid = 0;
    setRecomIsSet(false);
    this.recom = 0;
    this.viewerId = null;
    this.openId = null;
  }

  public int getId() {
    return this.id;
  }

  public StInterestDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public StInterestDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public StInterestDO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getRecom() {
    return this.recom;
  }

  public StInterestDO setRecom(int recom) {
    this.recom = recom;
    setRecomIsSet(true);
    return this;
  }

  public void unsetRecom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECOM_ISSET_ID);
  }

  /** Returns true if field recom is set (has been assigned a value) and false otherwise */
  public boolean isSetRecom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECOM_ISSET_ID);
  }

  public void setRecomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECOM_ISSET_ID, value);
  }

  public java.lang.String getViewerId() {
    return this.viewerId;
  }

  public StInterestDO setViewerId(java.lang.String viewerId) {
    this.viewerId = viewerId;
    return this;
  }

  public void unsetViewerId() {
    this.viewerId = null;
  }

  /** Returns true if field viewerId is set (has been assigned a value) and false otherwise */
  public boolean isSetViewerId() {
    return this.viewerId != null;
  }

  public void setViewerIdIsSet(boolean value) {
    if (!value) {
      this.viewerId = null;
    }
  }

  public java.lang.String getOpenId() {
    return this.openId;
  }

  public StInterestDO setOpenId(java.lang.String openId) {
    this.openId = openId;
    return this;
  }

  public void unsetOpenId() {
    this.openId = null;
  }

  /** Returns true if field openId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenId() {
    return this.openId != null;
  }

  public void setOpenIdIsSet(boolean value) {
    if (!value) {
      this.openId = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((java.lang.Integer)value);
      }
      break;

    case RECOM:
      if (value == null) {
        unsetRecom();
      } else {
        setRecom((java.lang.Integer)value);
      }
      break;

    case VIEWER_ID:
      if (value == null) {
        unsetViewerId();
      } else {
        setViewerId((java.lang.String)value);
      }
      break;

    case OPEN_ID:
      if (value == null) {
        unsetOpenId();
      } else {
        setOpenId((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CREATE_TIME:
      return getCreateTime();

    case PID:
      return getPid();

    case RECOM:
      return getRecom();

    case VIEWER_ID:
      return getViewerId();

    case OPEN_ID:
      return getOpenId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CREATE_TIME:
      return isSetCreateTime();
    case PID:
      return isSetPid();
    case RECOM:
      return isSetRecom();
    case VIEWER_ID:
      return isSetViewerId();
    case OPEN_ID:
      return isSetOpenId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StInterestDO)
      return this.equals((StInterestDO)that);
    return false;
  }

  public boolean equals(StInterestDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_recom = true && this.isSetRecom();
    boolean that_present_recom = true && that.isSetRecom();
    if (this_present_recom || that_present_recom) {
      if (!(this_present_recom && that_present_recom))
        return false;
      if (this.recom != that.recom)
        return false;
    }

    boolean this_present_viewerId = true && this.isSetViewerId();
    boolean that_present_viewerId = true && that.isSetViewerId();
    if (this_present_viewerId || that_present_viewerId) {
      if (!(this_present_viewerId && that_present_viewerId))
        return false;
      if (!this.viewerId.equals(that.viewerId))
        return false;
    }

    boolean this_present_openId = true && this.isSetOpenId();
    boolean that_present_openId = true && that.isSetOpenId();
    if (this_present_openId || that_present_openId) {
      if (!(this_present_openId && that_present_openId))
        return false;
      if (!this.openId.equals(that.openId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetPid()) ? 131071 : 524287);
    if (isSetPid())
      hashCode = hashCode * 8191 + pid;

    hashCode = hashCode * 8191 + ((isSetRecom()) ? 131071 : 524287);
    if (isSetRecom())
      hashCode = hashCode * 8191 + recom;

    hashCode = hashCode * 8191 + ((isSetViewerId()) ? 131071 : 524287);
    if (isSetViewerId())
      hashCode = hashCode * 8191 + viewerId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpenId()) ? 131071 : 524287);
    if (isSetOpenId())
      hashCode = hashCode * 8191 + openId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StInterestDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecom()).compareTo(other.isSetRecom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recom, other.recom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewerId()).compareTo(other.isSetViewerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewerId, other.viewerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpenId()).compareTo(other.isSetOpenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openId, other.openId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StInterestDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetPid()) {
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
    }
    if (isSetRecom()) {
      if (!first) sb.append(", ");
      sb.append("recom:");
      sb.append(this.recom);
      first = false;
    }
    if (isSetViewerId()) {
      if (!first) sb.append(", ");
      sb.append("viewerId:");
      if (this.viewerId == null) {
        sb.append("null");
      } else {
        sb.append(this.viewerId);
      }
      first = false;
    }
    if (isSetOpenId()) {
      if (!first) sb.append(", ");
      sb.append("openId:");
      if (this.openId == null) {
        sb.append("null");
      } else {
        sb.append(this.openId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StInterestDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StInterestDOStandardScheme getScheme() {
      return new StInterestDOStandardScheme();
    }
  }

  private static class StInterestDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<StInterestDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StInterestDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recom = iprot.readI32();
              struct.setRecomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIEWER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewerId = iprot.readString();
              struct.setViewerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openId = iprot.readString();
              struct.setOpenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StInterestDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPid()) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecom()) {
        oprot.writeFieldBegin(RECOM_FIELD_DESC);
        oprot.writeI32(struct.recom);
        oprot.writeFieldEnd();
      }
      if (struct.viewerId != null) {
        if (struct.isSetViewerId()) {
          oprot.writeFieldBegin(VIEWER_ID_FIELD_DESC);
          oprot.writeString(struct.viewerId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.openId != null) {
        if (struct.isSetOpenId()) {
          oprot.writeFieldBegin(OPEN_ID_FIELD_DESC);
          oprot.writeString(struct.openId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StInterestDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StInterestDOTupleScheme getScheme() {
      return new StInterestDOTupleScheme();
    }
  }

  private static class StInterestDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<StInterestDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StInterestDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(1);
      }
      if (struct.isSetPid()) {
        optionals.set(2);
      }
      if (struct.isSetRecom()) {
        optionals.set(3);
      }
      if (struct.isSetViewerId()) {
        optionals.set(4);
      }
      if (struct.isSetOpenId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetRecom()) {
        oprot.writeI32(struct.recom);
      }
      if (struct.isSetViewerId()) {
        oprot.writeString(struct.viewerId);
      }
      if (struct.isSetOpenId()) {
        oprot.writeString(struct.openId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StInterestDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recom = iprot.readI32();
        struct.setRecomIsSet(true);
      }
      if (incoming.get(4)) {
        struct.viewerId = iprot.readString();
        struct.setViewerIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.openId = iprot.readString();
        struct.setOpenIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

