/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.candidate.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-23")
public class CandidateService {

    public interface Iface {

        public void glancePosition(int userId, int positionId, int shareChainId) throws org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response changeInteresting(int user_id, int position_id, byte is_interested) throws org.apache.thrift.TException;

        public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult getRecomendations(int companyId, java.util.List<java.lang.Integer> idList) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult recommend(com.moseeker.thrift.gen.candidate.struct.RecommmendParam param) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.candidate.struct.RecomRecordResult getRecommendation(int id, int postUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.candidate.struct.SortResult getRecommendatorySorting(int postUserId, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult ignore(int id, int companyId, int postUserId, java.lang.String clickTime) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCandidateInfo(int hrId, int userId, int positionId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.candidate.struct.RecentPosition getRecentPosition(int hrId, int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response addApplicationReferral(int applicationId, int pscId, int directReferralUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getApplicationReferral(int applicationId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPositionLayerInfo(int userId, int companyId, int positionId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response handerElasticLayer(int userId, int companyId, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void glancePosition(int userId, int positionId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void changeInteresting(int user_id, int position_id, byte is_interested, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> resultHandler) throws org.apache.thrift.TException;

        public void getRecomendations(int companyId, java.util.List<java.lang.Integer> idList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException;

        public void recommend(com.moseeker.thrift.gen.candidate.struct.RecommmendParam param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException;

        public void getRecommendation(int id, int postUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecomRecordResult> resultHandler) throws org.apache.thrift.TException;

        public void getRecommendatorySorting(int postUserId, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.SortResult> resultHandler) throws org.apache.thrift.TException;

        public void ignore(int id, int companyId, int postUserId, java.lang.String clickTime, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException;

        public void getCandidateInfo(int hrId, int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getRecentPosition(int hrId, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecentPosition> resultHandler) throws org.apache.thrift.TException;

        public void addApplicationReferral(int applicationId, int pscId, int directReferralUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getApplicationReferral(int applicationId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPositionLayerInfo(int userId, int companyId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void handerElasticLayer(int userId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void glancePosition(int userId, int positionId, int shareChainId) throws org.apache.thrift.TException
        {
            send_glancePosition(userId, positionId, shareChainId);
            recv_glancePosition();
        }

        public void send_glancePosition(int userId, int positionId, int shareChainId) throws org.apache.thrift.TException
        {
            glancePosition_args args = new glancePosition_args();
            args.setUserId(userId);
            args.setPositionId(positionId);
            args.setShareChainId(shareChainId);
            sendBase("glancePosition", args);
        }

        public void recv_glancePosition() throws org.apache.thrift.TException
        {
            glancePosition_result result = new glancePosition_result();
            receiveBase(result, "glancePosition");
            return;
        }

        public com.moseeker.thrift.gen.common.struct.Response changeInteresting(int user_id, int position_id, byte is_interested) throws org.apache.thrift.TException
        {
            send_changeInteresting(user_id, position_id, is_interested);
            return recv_changeInteresting();
        }

        public void send_changeInteresting(int user_id, int position_id, byte is_interested) throws org.apache.thrift.TException
        {
            changeInteresting_args args = new changeInteresting_args();
            args.setUser_id(user_id);
            args.setPosition_id(position_id);
            args.setIs_interested(is_interested);
            sendBase("changeInteresting", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_changeInteresting() throws org.apache.thrift.TException
        {
            changeInteresting_result result = new changeInteresting_result();
            receiveBase(result, "changeInteresting");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeInteresting failed: unknown result");
        }

        public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_candidateList(param);
            return recv_candidateList();
        }

        public void send_candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param) throws org.apache.thrift.TException
        {
            candidateList_args args = new candidateList_args();
            args.setParam(param);
            sendBase("candidateList", args);
        }

        public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> recv_candidateList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            candidateList_result result = new candidateList_result();
            receiveBase(result, "candidateList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "candidateList failed: unknown result");
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult getRecomendations(int companyId, java.util.List<java.lang.Integer> idList) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getRecomendations(companyId, idList);
            return recv_getRecomendations();
        }

        public void send_getRecomendations(int companyId, java.util.List<java.lang.Integer> idList) throws org.apache.thrift.TException
        {
            getRecomendations_args args = new getRecomendations_args();
            args.setCompanyId(companyId);
            args.setIdList(idList);
            sendBase("getRecomendations", args);
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult recv_getRecomendations() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getRecomendations_result result = new getRecomendations_result();
            receiveBase(result, "getRecomendations");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecomendations failed: unknown result");
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult recommend(com.moseeker.thrift.gen.candidate.struct.RecommmendParam param) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_recommend(param);
            return recv_recommend();
        }

        public void send_recommend(com.moseeker.thrift.gen.candidate.struct.RecommmendParam param) throws org.apache.thrift.TException
        {
            recommend_args args = new recommend_args();
            args.setParam(param);
            sendBase("recommend", args);
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult recv_recommend() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            recommend_result result = new recommend_result();
            receiveBase(result, "recommend");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recommend failed: unknown result");
        }

        public com.moseeker.thrift.gen.candidate.struct.RecomRecordResult getRecommendation(int id, int postUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getRecommendation(id, postUserId);
            return recv_getRecommendation();
        }

        public void send_getRecommendation(int id, int postUserId) throws org.apache.thrift.TException
        {
            getRecommendation_args args = new getRecommendation_args();
            args.setId(id);
            args.setPostUserId(postUserId);
            sendBase("getRecommendation", args);
        }

        public com.moseeker.thrift.gen.candidate.struct.RecomRecordResult recv_getRecommendation() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getRecommendation_result result = new getRecommendation_result();
            receiveBase(result, "getRecommendation");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecommendation failed: unknown result");
        }

        public com.moseeker.thrift.gen.candidate.struct.SortResult getRecommendatorySorting(int postUserId, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getRecommendatorySorting(postUserId, companyId);
            return recv_getRecommendatorySorting();
        }

        public void send_getRecommendatorySorting(int postUserId, int companyId) throws org.apache.thrift.TException
        {
            getRecommendatorySorting_args args = new getRecommendatorySorting_args();
            args.setPostUserId(postUserId);
            args.setCompanyId(companyId);
            sendBase("getRecommendatorySorting", args);
        }

        public com.moseeker.thrift.gen.candidate.struct.SortResult recv_getRecommendatorySorting() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getRecommendatorySorting_result result = new getRecommendatorySorting_result();
            receiveBase(result, "getRecommendatorySorting");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecommendatorySorting failed: unknown result");
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult ignore(int id, int companyId, int postUserId, java.lang.String clickTime) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_ignore(id, companyId, postUserId, clickTime);
            return recv_ignore();
        }

        public void send_ignore(int id, int companyId, int postUserId, java.lang.String clickTime) throws org.apache.thrift.TException
        {
            ignore_args args = new ignore_args();
            args.setId(id);
            args.setCompanyId(companyId);
            args.setPostUserId(postUserId);
            args.setClickTime(clickTime);
            sendBase("ignore", args);
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult recv_ignore() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            ignore_result result = new ignore_result();
            receiveBase(result, "ignore");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ignore failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCandidateInfo(int hrId, int userId, int positionId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCandidateInfo(hrId, userId, positionId);
            return recv_getCandidateInfo();
        }

        public void send_getCandidateInfo(int hrId, int userId, int positionId) throws org.apache.thrift.TException
        {
            getCandidateInfo_args args = new getCandidateInfo_args();
            args.setHrId(hrId);
            args.setUserId(userId);
            args.setPositionId(positionId);
            sendBase("getCandidateInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCandidateInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCandidateInfo_result result = new getCandidateInfo_result();
            receiveBase(result, "getCandidateInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidateInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.candidate.struct.RecentPosition getRecentPosition(int hrId, int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getRecentPosition(hrId, userId);
            return recv_getRecentPosition();
        }

        public void send_getRecentPosition(int hrId, int userId) throws org.apache.thrift.TException
        {
            getRecentPosition_args args = new getRecentPosition_args();
            args.setHrId(hrId);
            args.setUserId(userId);
            sendBase("getRecentPosition", args);
        }

        public com.moseeker.thrift.gen.candidate.struct.RecentPosition recv_getRecentPosition() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getRecentPosition_result result = new getRecentPosition_result();
            receiveBase(result, "getRecentPosition");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecentPosition failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response addApplicationReferral(int applicationId, int pscId, int directReferralUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addApplicationReferral(applicationId, pscId, directReferralUserId);
            return recv_addApplicationReferral();
        }

        public void send_addApplicationReferral(int applicationId, int pscId, int directReferralUserId) throws org.apache.thrift.TException
        {
            addApplicationReferral_args args = new addApplicationReferral_args();
            args.setApplicationId(applicationId);
            args.setPscId(pscId);
            args.setDirectReferralUserId(directReferralUserId);
            sendBase("addApplicationReferral", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_addApplicationReferral() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addApplicationReferral_result result = new addApplicationReferral_result();
            receiveBase(result, "addApplicationReferral");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addApplicationReferral failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getApplicationReferral(int applicationId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getApplicationReferral(applicationId);
            return recv_getApplicationReferral();
        }

        public void send_getApplicationReferral(int applicationId) throws org.apache.thrift.TException
        {
            getApplicationReferral_args args = new getApplicationReferral_args();
            args.setApplicationId(applicationId);
            sendBase("getApplicationReferral", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getApplicationReferral() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getApplicationReferral_result result = new getApplicationReferral_result();
            receiveBase(result, "getApplicationReferral");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationReferral failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPositionLayerInfo(int userId, int companyId, int positionId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getPositionLayerInfo(userId, companyId, positionId);
            return recv_getPositionLayerInfo();
        }

        public void send_getPositionLayerInfo(int userId, int companyId, int positionId) throws org.apache.thrift.TException
        {
            getPositionLayerInfo_args args = new getPositionLayerInfo_args();
            args.setUserId(userId);
            args.setCompanyId(companyId);
            args.setPositionId(positionId);
            sendBase("getPositionLayerInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPositionLayerInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getPositionLayerInfo_result result = new getPositionLayerInfo_result();
            receiveBase(result, "getPositionLayerInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionLayerInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response handerElasticLayer(int userId, int companyId, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_handerElasticLayer(userId, companyId, type);
            return recv_handerElasticLayer();
        }

        public void send_handerElasticLayer(int userId, int companyId, int type) throws org.apache.thrift.TException
        {
            handerElasticLayer_args args = new handerElasticLayer_args();
            args.setUserId(userId);
            args.setCompanyId(companyId);
            args.setType(type);
            sendBase("handerElasticLayer", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_handerElasticLayer() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            handerElasticLayer_result result = new handerElasticLayer_result();
            receiveBase(result, "handerElasticLayer");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "handerElasticLayer failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void glancePosition(int userId, int positionId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            glancePosition_call method_call = new glancePosition_call(userId, positionId, shareChainId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class glancePosition_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int userId;
            private int positionId;
            private int shareChainId;
            public glancePosition_call(int userId, int positionId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.positionId = positionId;
                this.shareChainId = shareChainId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("glancePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
                glancePosition_args args = new glancePosition_args();
                args.setUserId(userId);
                args.setPositionId(positionId);
                args.setShareChainId(shareChainId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void changeInteresting(int user_id, int position_id, byte is_interested, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            changeInteresting_call method_call = new changeInteresting_call(user_id, position_id, is_interested, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class changeInteresting_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int user_id;
            private int position_id;
            private byte is_interested;
            public changeInteresting_call(int user_id, int position_id, byte is_interested, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.user_id = user_id;
                this.position_id = position_id;
                this.is_interested = is_interested;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeInteresting", org.apache.thrift.protocol.TMessageType.CALL, 0));
                changeInteresting_args args = new changeInteresting_args();
                args.setUser_id(user_id);
                args.setPosition_id(position_id);
                args.setIs_interested(is_interested);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_changeInteresting();
            }
        }

        public void candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            candidateList_call method_call = new candidateList_call(param, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class candidateList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> {
            private com.moseeker.thrift.gen.candidate.struct.CandidateListParam param;
            public candidateList_call(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.param = param;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("candidateList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                candidateList_args args = new candidateList_args();
                args.setParam(param);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_candidateList();
            }
        }

        public void getRecomendations(int companyId, java.util.List<java.lang.Integer> idList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRecomendations_call method_call = new getRecomendations_call(companyId, idList, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRecomendations_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.candidate.struct.RecommendResult> {
            private int companyId;
            private java.util.List<java.lang.Integer> idList;
            public getRecomendations_call(int companyId, java.util.List<java.lang.Integer> idList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.idList = idList;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecomendations", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRecomendations_args args = new getRecomendations_args();
                args.setCompanyId(companyId);
                args.setIdList(idList);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.candidate.struct.RecommendResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRecomendations();
            }
        }

        public void recommend(com.moseeker.thrift.gen.candidate.struct.RecommmendParam param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            recommend_call method_call = new recommend_call(param, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class recommend_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.candidate.struct.RecommendResult> {
            private com.moseeker.thrift.gen.candidate.struct.RecommmendParam param;
            public recommend_call(com.moseeker.thrift.gen.candidate.struct.RecommmendParam param, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.param = param;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recommend", org.apache.thrift.protocol.TMessageType.CALL, 0));
                recommend_args args = new recommend_args();
                args.setParam(param);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.candidate.struct.RecommendResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_recommend();
            }
        }

        public void getRecommendation(int id, int postUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecomRecordResult> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRecommendation_call method_call = new getRecommendation_call(id, postUserId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRecommendation_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.candidate.struct.RecomRecordResult> {
            private int id;
            private int postUserId;
            public getRecommendation_call(int id, int postUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecomRecordResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.postUserId = postUserId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecommendation", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRecommendation_args args = new getRecommendation_args();
                args.setId(id);
                args.setPostUserId(postUserId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.candidate.struct.RecomRecordResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRecommendation();
            }
        }

        public void getRecommendatorySorting(int postUserId, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.SortResult> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRecommendatorySorting_call method_call = new getRecommendatorySorting_call(postUserId, companyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRecommendatorySorting_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.candidate.struct.SortResult> {
            private int postUserId;
            private int companyId;
            public getRecommendatorySorting_call(int postUserId, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.SortResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.postUserId = postUserId;
                this.companyId = companyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecommendatorySorting", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRecommendatorySorting_args args = new getRecommendatorySorting_args();
                args.setPostUserId(postUserId);
                args.setCompanyId(companyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.candidate.struct.SortResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRecommendatorySorting();
            }
        }

        public void ignore(int id, int companyId, int postUserId, java.lang.String clickTime, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ignore_call method_call = new ignore_call(id, companyId, postUserId, clickTime, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ignore_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.candidate.struct.RecommendResult> {
            private int id;
            private int companyId;
            private int postUserId;
            private java.lang.String clickTime;
            public ignore_call(int id, int companyId, int postUserId, java.lang.String clickTime, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.companyId = companyId;
                this.postUserId = postUserId;
                this.clickTime = clickTime;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ignore", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ignore_args args = new ignore_args();
                args.setId(id);
                args.setCompanyId(companyId);
                args.setPostUserId(postUserId);
                args.setClickTime(clickTime);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.candidate.struct.RecommendResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ignore();
            }
        }

        public void getCandidateInfo(int hrId, int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCandidateInfo_call method_call = new getCandidateInfo_call(hrId, userId, positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCandidateInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hrId;
            private int userId;
            private int positionId;
            public getCandidateInfo_call(int hrId, int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.userId = userId;
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidateInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCandidateInfo_args args = new getCandidateInfo_args();
                args.setHrId(hrId);
                args.setUserId(userId);
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCandidateInfo();
            }
        }

        public void getRecentPosition(int hrId, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecentPosition> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getRecentPosition_call method_call = new getRecentPosition_call(hrId, userId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getRecentPosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.candidate.struct.RecentPosition> {
            private int hrId;
            private int userId;
            public getRecentPosition_call(int hrId, int userId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecentPosition> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.userId = userId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecentPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getRecentPosition_args args = new getRecentPosition_args();
                args.setHrId(hrId);
                args.setUserId(userId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.candidate.struct.RecentPosition getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getRecentPosition();
            }
        }

        public void addApplicationReferral(int applicationId, int pscId, int directReferralUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addApplicationReferral_call method_call = new addApplicationReferral_call(applicationId, pscId, directReferralUserId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addApplicationReferral_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int applicationId;
            private int pscId;
            private int directReferralUserId;
            public addApplicationReferral_call(int applicationId, int pscId, int directReferralUserId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.applicationId = applicationId;
                this.pscId = pscId;
                this.directReferralUserId = directReferralUserId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addApplicationReferral", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addApplicationReferral_args args = new addApplicationReferral_args();
                args.setApplicationId(applicationId);
                args.setPscId(pscId);
                args.setDirectReferralUserId(directReferralUserId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addApplicationReferral();
            }
        }

        public void getApplicationReferral(int applicationId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getApplicationReferral_call method_call = new getApplicationReferral_call(applicationId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getApplicationReferral_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int applicationId;
            public getApplicationReferral_call(int applicationId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.applicationId = applicationId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationReferral", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getApplicationReferral_args args = new getApplicationReferral_args();
                args.setApplicationId(applicationId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getApplicationReferral();
            }
        }

        public void getPositionLayerInfo(int userId, int companyId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionLayerInfo_call method_call = new getPositionLayerInfo_call(userId, companyId, positionId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionLayerInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int userId;
            private int companyId;
            private int positionId;
            public getPositionLayerInfo_call(int userId, int companyId, int positionId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.companyId = companyId;
                this.positionId = positionId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionLayerInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionLayerInfo_args args = new getPositionLayerInfo_args();
                args.setUserId(userId);
                args.setCompanyId(companyId);
                args.setPositionId(positionId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionLayerInfo();
            }
        }

        public void handerElasticLayer(int userId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            handerElasticLayer_call method_call = new handerElasticLayer_call(userId, companyId, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class handerElasticLayer_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int userId;
            private int companyId;
            private int type;
            public handerElasticLayer_call(int userId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.companyId = companyId;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handerElasticLayer", org.apache.thrift.protocol.TMessageType.CALL, 0));
                handerElasticLayer_args args = new handerElasticLayer_args();
                args.setUserId(userId);
                args.setCompanyId(companyId);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_handerElasticLayer();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("glancePosition", new glancePosition());
            processMap.put("changeInteresting", new changeInteresting());
            processMap.put("candidateList", new candidateList());
            processMap.put("getRecomendations", new getRecomendations());
            processMap.put("recommend", new recommend());
            processMap.put("getRecommendation", new getRecommendation());
            processMap.put("getRecommendatorySorting", new getRecommendatorySorting());
            processMap.put("ignore", new ignore());
            processMap.put("getCandidateInfo", new getCandidateInfo());
            processMap.put("getRecentPosition", new getRecentPosition());
            processMap.put("addApplicationReferral", new addApplicationReferral());
            processMap.put("getApplicationReferral", new getApplicationReferral());
            processMap.put("getPositionLayerInfo", new getPositionLayerInfo());
            processMap.put("handerElasticLayer", new handerElasticLayer());
            return processMap;
        }

        public static class glancePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, glancePosition_args> {
            public glancePosition() {
                super("glancePosition");
            }

            public glancePosition_args getEmptyArgsInstance() {
                return new glancePosition_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public glancePosition_result getResult(I iface, glancePosition_args args) throws org.apache.thrift.TException {
                glancePosition_result result = new glancePosition_result();
                iface.glancePosition(args.userId, args.positionId, args.shareChainId);
                return result;
            }
        }

        public static class changeInteresting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeInteresting_args> {
            public changeInteresting() {
                super("changeInteresting");
            }

            public changeInteresting_args getEmptyArgsInstance() {
                return new changeInteresting_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public changeInteresting_result getResult(I iface, changeInteresting_args args) throws org.apache.thrift.TException {
                changeInteresting_result result = new changeInteresting_result();
                result.success = iface.changeInteresting(args.user_id, args.position_id, args.is_interested);
                return result;
            }
        }

        public static class candidateList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, candidateList_args> {
            public candidateList() {
                super("candidateList");
            }

            public candidateList_args getEmptyArgsInstance() {
                return new candidateList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public candidateList_result getResult(I iface, candidateList_args args) throws org.apache.thrift.TException {
                candidateList_result result = new candidateList_result();
                try {
                    result.success = iface.candidateList(args.param);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getRecomendations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecomendations_args> {
            public getRecomendations() {
                super("getRecomendations");
            }

            public getRecomendations_args getEmptyArgsInstance() {
                return new getRecomendations_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRecomendations_result getResult(I iface, getRecomendations_args args) throws org.apache.thrift.TException {
                getRecomendations_result result = new getRecomendations_result();
                try {
                    result.success = iface.getRecomendations(args.companyId, args.idList);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class recommend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recommend_args> {
            public recommend() {
                super("recommend");
            }

            public recommend_args getEmptyArgsInstance() {
                return new recommend_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public recommend_result getResult(I iface, recommend_args args) throws org.apache.thrift.TException {
                recommend_result result = new recommend_result();
                try {
                    result.success = iface.recommend(args.param);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getRecommendation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecommendation_args> {
            public getRecommendation() {
                super("getRecommendation");
            }

            public getRecommendation_args getEmptyArgsInstance() {
                return new getRecommendation_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRecommendation_result getResult(I iface, getRecommendation_args args) throws org.apache.thrift.TException {
                getRecommendation_result result = new getRecommendation_result();
                try {
                    result.success = iface.getRecommendation(args.id, args.postUserId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getRecommendatorySorting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecommendatorySorting_args> {
            public getRecommendatorySorting() {
                super("getRecommendatorySorting");
            }

            public getRecommendatorySorting_args getEmptyArgsInstance() {
                return new getRecommendatorySorting_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRecommendatorySorting_result getResult(I iface, getRecommendatorySorting_args args) throws org.apache.thrift.TException {
                getRecommendatorySorting_result result = new getRecommendatorySorting_result();
                try {
                    result.success = iface.getRecommendatorySorting(args.postUserId, args.companyId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class ignore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ignore_args> {
            public ignore() {
                super("ignore");
            }

            public ignore_args getEmptyArgsInstance() {
                return new ignore_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public ignore_result getResult(I iface, ignore_args args) throws org.apache.thrift.TException {
                ignore_result result = new ignore_result();
                try {
                    result.success = iface.ignore(args.id, args.companyId, args.postUserId, args.clickTime);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCandidateInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidateInfo_args> {
            public getCandidateInfo() {
                super("getCandidateInfo");
            }

            public getCandidateInfo_args getEmptyArgsInstance() {
                return new getCandidateInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCandidateInfo_result getResult(I iface, getCandidateInfo_args args) throws org.apache.thrift.TException {
                getCandidateInfo_result result = new getCandidateInfo_result();
                try {
                    result.success = iface.getCandidateInfo(args.hrId, args.userId, args.positionId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getRecentPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecentPosition_args> {
            public getRecentPosition() {
                super("getRecentPosition");
            }

            public getRecentPosition_args getEmptyArgsInstance() {
                return new getRecentPosition_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getRecentPosition_result getResult(I iface, getRecentPosition_args args) throws org.apache.thrift.TException {
                getRecentPosition_result result = new getRecentPosition_result();
                try {
                    result.success = iface.getRecentPosition(args.hrId, args.userId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addApplicationReferral<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addApplicationReferral_args> {
            public addApplicationReferral() {
                super("addApplicationReferral");
            }

            public addApplicationReferral_args getEmptyArgsInstance() {
                return new addApplicationReferral_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addApplicationReferral_result getResult(I iface, addApplicationReferral_args args) throws org.apache.thrift.TException {
                addApplicationReferral_result result = new addApplicationReferral_result();
                try {
                    result.success = iface.addApplicationReferral(args.applicationId, args.pscId, args.directReferralUserId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getApplicationReferral<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationReferral_args> {
            public getApplicationReferral() {
                super("getApplicationReferral");
            }

            public getApplicationReferral_args getEmptyArgsInstance() {
                return new getApplicationReferral_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getApplicationReferral_result getResult(I iface, getApplicationReferral_args args) throws org.apache.thrift.TException {
                getApplicationReferral_result result = new getApplicationReferral_result();
                try {
                    result.success = iface.getApplicationReferral(args.applicationId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getPositionLayerInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionLayerInfo_args> {
            public getPositionLayerInfo() {
                super("getPositionLayerInfo");
            }

            public getPositionLayerInfo_args getEmptyArgsInstance() {
                return new getPositionLayerInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionLayerInfo_result getResult(I iface, getPositionLayerInfo_args args) throws org.apache.thrift.TException {
                getPositionLayerInfo_result result = new getPositionLayerInfo_result();
                try {
                    result.success = iface.getPositionLayerInfo(args.userId, args.companyId, args.positionId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class handerElasticLayer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handerElasticLayer_args> {
            public handerElasticLayer() {
                super("handerElasticLayer");
            }

            public handerElasticLayer_args getEmptyArgsInstance() {
                return new handerElasticLayer_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public handerElasticLayer_result getResult(I iface, handerElasticLayer_args args) throws org.apache.thrift.TException {
                handerElasticLayer_result result = new handerElasticLayer_result();
                try {
                    result.success = iface.handerElasticLayer(args.userId, args.companyId, args.type);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("glancePosition", new glancePosition());
            processMap.put("changeInteresting", new changeInteresting());
            processMap.put("candidateList", new candidateList());
            processMap.put("getRecomendations", new getRecomendations());
            processMap.put("recommend", new recommend());
            processMap.put("getRecommendation", new getRecommendation());
            processMap.put("getRecommendatorySorting", new getRecommendatorySorting());
            processMap.put("ignore", new ignore());
            processMap.put("getCandidateInfo", new getCandidateInfo());
            processMap.put("getRecentPosition", new getRecentPosition());
            processMap.put("addApplicationReferral", new addApplicationReferral());
            processMap.put("getApplicationReferral", new getApplicationReferral());
            processMap.put("getPositionLayerInfo", new getPositionLayerInfo());
            processMap.put("handerElasticLayer", new handerElasticLayer());
            return processMap;
        }

        public static class glancePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, glancePosition_args, Void> {
            public glancePosition() {
                super("glancePosition");
            }

            public glancePosition_args getEmptyArgsInstance() {
                return new glancePosition_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        glancePosition_result result = new glancePosition_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        glancePosition_result result = new glancePosition_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, glancePosition_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.glancePosition(args.userId, args.positionId, args.shareChainId,resultHandler);
            }
        }

        public static class changeInteresting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeInteresting_args, com.moseeker.thrift.gen.common.struct.Response> {
            public changeInteresting() {
                super("changeInteresting");
            }

            public changeInteresting_args getEmptyArgsInstance() {
                return new changeInteresting_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        changeInteresting_result result = new changeInteresting_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        changeInteresting_result result = new changeInteresting_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, changeInteresting_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.changeInteresting(args.user_id, args.position_id, args.is_interested,resultHandler);
            }
        }

        public static class candidateList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, candidateList_args, java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> {
            public candidateList() {
                super("candidateList");
            }

            public candidateList_args getEmptyArgsInstance() {
                return new candidateList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>>() {
                    public void onComplete(java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> o) {
                        candidateList_result result = new candidateList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        candidateList_result result = new candidateList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, candidateList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> resultHandler) throws org.apache.thrift.TException {
                iface.candidateList(args.param,resultHandler);
            }
        }

        public static class getRecomendations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecomendations_args, com.moseeker.thrift.gen.candidate.struct.RecommendResult> {
            public getRecomendations() {
                super("getRecomendations");
            }

            public getRecomendations_args getEmptyArgsInstance() {
                return new getRecomendations_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult>() {
                    public void onComplete(com.moseeker.thrift.gen.candidate.struct.RecommendResult o) {
                        getRecomendations_result result = new getRecomendations_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getRecomendations_result result = new getRecomendations_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRecomendations_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException {
                iface.getRecomendations(args.companyId, args.idList,resultHandler);
            }
        }

        public static class recommend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recommend_args, com.moseeker.thrift.gen.candidate.struct.RecommendResult> {
            public recommend() {
                super("recommend");
            }

            public recommend_args getEmptyArgsInstance() {
                return new recommend_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult>() {
                    public void onComplete(com.moseeker.thrift.gen.candidate.struct.RecommendResult o) {
                        recommend_result result = new recommend_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        recommend_result result = new recommend_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, recommend_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException {
                iface.recommend(args.param,resultHandler);
            }
        }

        public static class getRecommendation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecommendation_args, com.moseeker.thrift.gen.candidate.struct.RecomRecordResult> {
            public getRecommendation() {
                super("getRecommendation");
            }

            public getRecommendation_args getEmptyArgsInstance() {
                return new getRecommendation_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecomRecordResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecomRecordResult>() {
                    public void onComplete(com.moseeker.thrift.gen.candidate.struct.RecomRecordResult o) {
                        getRecommendation_result result = new getRecommendation_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getRecommendation_result result = new getRecommendation_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRecommendation_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecomRecordResult> resultHandler) throws org.apache.thrift.TException {
                iface.getRecommendation(args.id, args.postUserId,resultHandler);
            }
        }

        public static class getRecommendatorySorting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecommendatorySorting_args, com.moseeker.thrift.gen.candidate.struct.SortResult> {
            public getRecommendatorySorting() {
                super("getRecommendatorySorting");
            }

            public getRecommendatorySorting_args getEmptyArgsInstance() {
                return new getRecommendatorySorting_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.SortResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.SortResult>() {
                    public void onComplete(com.moseeker.thrift.gen.candidate.struct.SortResult o) {
                        getRecommendatorySorting_result result = new getRecommendatorySorting_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getRecommendatorySorting_result result = new getRecommendatorySorting_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRecommendatorySorting_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.SortResult> resultHandler) throws org.apache.thrift.TException {
                iface.getRecommendatorySorting(args.postUserId, args.companyId,resultHandler);
            }
        }

        public static class ignore<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ignore_args, com.moseeker.thrift.gen.candidate.struct.RecommendResult> {
            public ignore() {
                super("ignore");
            }

            public ignore_args getEmptyArgsInstance() {
                return new ignore_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult>() {
                    public void onComplete(com.moseeker.thrift.gen.candidate.struct.RecommendResult o) {
                        ignore_result result = new ignore_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ignore_result result = new ignore_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ignore_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecommendResult> resultHandler) throws org.apache.thrift.TException {
                iface.ignore(args.id, args.companyId, args.postUserId, args.clickTime,resultHandler);
            }
        }

        public static class getCandidateInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidateInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCandidateInfo() {
                super("getCandidateInfo");
            }

            public getCandidateInfo_args getEmptyArgsInstance() {
                return new getCandidateInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCandidateInfo_result result = new getCandidateInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCandidateInfo_result result = new getCandidateInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCandidateInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCandidateInfo(args.hrId, args.userId, args.positionId,resultHandler);
            }
        }

        public static class getRecentPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecentPosition_args, com.moseeker.thrift.gen.candidate.struct.RecentPosition> {
            public getRecentPosition() {
                super("getRecentPosition");
            }

            public getRecentPosition_args getEmptyArgsInstance() {
                return new getRecentPosition_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecentPosition> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecentPosition>() {
                    public void onComplete(com.moseeker.thrift.gen.candidate.struct.RecentPosition o) {
                        getRecentPosition_result result = new getRecentPosition_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getRecentPosition_result result = new getRecentPosition_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getRecentPosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.candidate.struct.RecentPosition> resultHandler) throws org.apache.thrift.TException {
                iface.getRecentPosition(args.hrId, args.userId,resultHandler);
            }
        }

        public static class addApplicationReferral<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addApplicationReferral_args, com.moseeker.thrift.gen.common.struct.Response> {
            public addApplicationReferral() {
                super("addApplicationReferral");
            }

            public addApplicationReferral_args getEmptyArgsInstance() {
                return new addApplicationReferral_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        addApplicationReferral_result result = new addApplicationReferral_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addApplicationReferral_result result = new addApplicationReferral_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addApplicationReferral_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.addApplicationReferral(args.applicationId, args.pscId, args.directReferralUserId,resultHandler);
            }
        }

        public static class getApplicationReferral<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationReferral_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getApplicationReferral() {
                super("getApplicationReferral");
            }

            public getApplicationReferral_args getEmptyArgsInstance() {
                return new getApplicationReferral_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getApplicationReferral_result result = new getApplicationReferral_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getApplicationReferral_result result = new getApplicationReferral_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getApplicationReferral_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getApplicationReferral(args.applicationId,resultHandler);
            }
        }

        public static class getPositionLayerInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionLayerInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPositionLayerInfo() {
                super("getPositionLayerInfo");
            }

            public getPositionLayerInfo_args getEmptyArgsInstance() {
                return new getPositionLayerInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPositionLayerInfo_result result = new getPositionLayerInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionLayerInfo_result result = new getPositionLayerInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionLayerInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionLayerInfo(args.userId, args.companyId, args.positionId,resultHandler);
            }
        }

        public static class handerElasticLayer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handerElasticLayer_args, com.moseeker.thrift.gen.common.struct.Response> {
            public handerElasticLayer() {
                super("handerElasticLayer");
            }

            public handerElasticLayer_args getEmptyArgsInstance() {
                return new handerElasticLayer_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        handerElasticLayer_result result = new handerElasticLayer_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        handerElasticLayer_result result = new handerElasticLayer_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, handerElasticLayer_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.handerElasticLayer(args.userId, args.companyId, args.type,resultHandler);
            }
        }

    }

    public static class glancePosition_args implements org.apache.thrift.TBase<glancePosition_args, glancePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<glancePosition_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("glancePosition_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField SHARE_CHAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shareChainId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new glancePosition_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new glancePosition_argsTupleSchemeFactory();

        public int userId; // required
        public int positionId; // required
        public int shareChainId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            POSITION_ID((short)2, "positionId"),
            SHARE_CHAIN_ID((short)3, "shareChainId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // POSITION_ID
                        return POSITION_ID;
                    case 3: // SHARE_CHAIN_ID
                        return SHARE_CHAIN_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __POSITIONID_ISSET_ID = 1;
        private static final int __SHARECHAINID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.SHARE_CHAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("shareChainId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(glancePosition_args.class, metaDataMap);
        }

        public glancePosition_args() {
        }

        public glancePosition_args(
                int userId,
                int positionId,
                int shareChainId)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.shareChainId = shareChainId;
            setShareChainIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public glancePosition_args(glancePosition_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.positionId = other.positionId;
            this.shareChainId = other.shareChainId;
        }

        public glancePosition_args deepCopy() {
            return new glancePosition_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
            setShareChainIdIsSet(false);
            this.shareChainId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public glancePosition_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public glancePosition_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getShareChainId() {
            return this.shareChainId;
        }

        public glancePosition_args setShareChainId(int shareChainId) {
            this.shareChainId = shareChainId;
            setShareChainIdIsSet(true);
            return this;
        }

        public void unsetShareChainId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARECHAINID_ISSET_ID);
        }

        /** Returns true if field shareChainId is set (has been assigned a value) and false otherwise */
        public boolean isSetShareChainId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARECHAINID_ISSET_ID);
        }

        public void setShareChainIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARECHAINID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case SHARE_CHAIN_ID:
                    if (value == null) {
                        unsetShareChainId();
                    } else {
                        setShareChainId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case POSITION_ID:
                    return getPositionId();

                case SHARE_CHAIN_ID:
                    return getShareChainId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case POSITION_ID:
                    return isSetPositionId();
                case SHARE_CHAIN_ID:
                    return isSetShareChainId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof glancePosition_args)
                return this.equals((glancePosition_args)that);
            return false;
        }

        public boolean equals(glancePosition_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_shareChainId = true;
            boolean that_present_shareChainId = true;
            if (this_present_shareChainId || that_present_shareChainId) {
                if (!(this_present_shareChainId && that_present_shareChainId))
                    return false;
                if (this.shareChainId != that.shareChainId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + shareChainId;

            return hashCode;
        }

        @Override
        public int compareTo(glancePosition_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetShareChainId()).compareTo(other.isSetShareChainId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetShareChainId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareChainId, other.shareChainId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("glancePosition_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("shareChainId:");
            sb.append(this.shareChainId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class glancePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public glancePosition_argsStandardScheme getScheme() {
                return new glancePosition_argsStandardScheme();
            }
        }

        private static class glancePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<glancePosition_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, glancePosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SHARE_CHAIN_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.shareChainId = iprot.readI32();
                                struct.setShareChainIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, glancePosition_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(SHARE_CHAIN_ID_FIELD_DESC);
                oprot.writeI32(struct.shareChainId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class glancePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public glancePosition_argsTupleScheme getScheme() {
                return new glancePosition_argsTupleScheme();
            }
        }

        private static class glancePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<glancePosition_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, glancePosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(1);
                }
                if (struct.isSetShareChainId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetShareChainId()) {
                    oprot.writeI32(struct.shareChainId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, glancePosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.shareChainId = iprot.readI32();
                    struct.setShareChainIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class glancePosition_result implements org.apache.thrift.TBase<glancePosition_result, glancePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<glancePosition_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("glancePosition_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new glancePosition_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new glancePosition_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(glancePosition_result.class, metaDataMap);
        }

        public glancePosition_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public glancePosition_result(glancePosition_result other) {
        }

        public glancePosition_result deepCopy() {
            return new glancePosition_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof glancePosition_result)
                return this.equals((glancePosition_result)that);
            return false;
        }

        public boolean equals(glancePosition_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(glancePosition_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("glancePosition_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class glancePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public glancePosition_resultStandardScheme getScheme() {
                return new glancePosition_resultStandardScheme();
            }
        }

        private static class glancePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<glancePosition_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, glancePosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, glancePosition_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class glancePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public glancePosition_resultTupleScheme getScheme() {
                return new glancePosition_resultTupleScheme();
            }
        }

        private static class glancePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<glancePosition_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, glancePosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, glancePosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class changeInteresting_args implements org.apache.thrift.TBase<changeInteresting_args, changeInteresting_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeInteresting_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeInteresting_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("position_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField IS_INTERESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_interested", org.apache.thrift.protocol.TType.BYTE, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeInteresting_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeInteresting_argsTupleSchemeFactory();

        public int user_id; // required
        public int position_id; // required
        public byte is_interested; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "user_id"),
            POSITION_ID((short)2, "position_id"),
            IS_INTERESTED((short)3, "is_interested");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // POSITION_ID
                        return POSITION_ID;
                    case 3: // IS_INTERESTED
                        return IS_INTERESTED;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USER_ID_ISSET_ID = 0;
        private static final int __POSITION_ID_ISSET_ID = 1;
        private static final int __IS_INTERESTED_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("position_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.IS_INTERESTED, new org.apache.thrift.meta_data.FieldMetaData("is_interested", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeInteresting_args.class, metaDataMap);
        }

        public changeInteresting_args() {
        }

        public changeInteresting_args(
                int user_id,
                int position_id,
                byte is_interested)
        {
            this();
            this.user_id = user_id;
            setUser_idIsSet(true);
            this.position_id = position_id;
            setPosition_idIsSet(true);
            this.is_interested = is_interested;
            setIs_interestedIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public changeInteresting_args(changeInteresting_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.user_id = other.user_id;
            this.position_id = other.position_id;
            this.is_interested = other.is_interested;
        }

        public changeInteresting_args deepCopy() {
            return new changeInteresting_args(this);
        }

        @Override
        public void clear() {
            setUser_idIsSet(false);
            this.user_id = 0;
            setPosition_idIsSet(false);
            this.position_id = 0;
            setIs_interestedIsSet(false);
            this.is_interested = 0;
        }

        public int getUser_id() {
            return this.user_id;
        }

        public changeInteresting_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public int getPosition_id() {
            return this.position_id;
        }

        public changeInteresting_args setPosition_id(int position_id) {
            this.position_id = position_id;
            setPosition_idIsSet(true);
            return this;
        }

        public void unsetPosition_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
        }

        /** Returns true if field position_id is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
        }

        public void setPosition_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_ID_ISSET_ID, value);
        }

        public byte getIs_interested() {
            return this.is_interested;
        }

        public changeInteresting_args setIs_interested(byte is_interested) {
            this.is_interested = is_interested;
            setIs_interestedIsSet(true);
            return this;
        }

        public void unsetIs_interested() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_INTERESTED_ISSET_ID);
        }

        /** Returns true if field is_interested is set (has been assigned a value) and false otherwise */
        public boolean isSetIs_interested() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_INTERESTED_ISSET_ID);
        }

        public void setIs_interestedIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_INTERESTED_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPosition_id();
                    } else {
                        setPosition_id((java.lang.Integer)value);
                    }
                    break;

                case IS_INTERESTED:
                    if (value == null) {
                        unsetIs_interested();
                    } else {
                        setIs_interested((java.lang.Byte)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUser_id();

                case POSITION_ID:
                    return getPosition_id();

                case IS_INTERESTED:
                    return getIs_interested();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUser_id();
                case POSITION_ID:
                    return isSetPosition_id();
                case IS_INTERESTED:
                    return isSetIs_interested();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof changeInteresting_args)
                return this.equals((changeInteresting_args)that);
            return false;
        }

        public boolean equals(changeInteresting_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            boolean this_present_position_id = true;
            boolean that_present_position_id = true;
            if (this_present_position_id || that_present_position_id) {
                if (!(this_present_position_id && that_present_position_id))
                    return false;
                if (this.position_id != that.position_id)
                    return false;
            }

            boolean this_present_is_interested = true;
            boolean that_present_is_interested = true;
            if (this_present_is_interested || that_present_is_interested) {
                if (!(this_present_is_interested && that_present_is_interested))
                    return false;
                if (this.is_interested != that.is_interested)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + user_id;

            hashCode = hashCode * 8191 + position_id;

            hashCode = hashCode * 8191 + (int) (is_interested);

            return hashCode;
        }

        @Override
        public int compareTo(changeInteresting_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPosition_id()).compareTo(other.isSetPosition_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_id, other.position_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetIs_interested()).compareTo(other.isSetIs_interested());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIs_interested()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_interested, other.is_interested);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("changeInteresting_args(");
            boolean first = true;

            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position_id:");
            sb.append(this.position_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("is_interested:");
            sb.append(this.is_interested);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class changeInteresting_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public changeInteresting_argsStandardScheme getScheme() {
                return new changeInteresting_argsStandardScheme();
            }
        }

        private static class changeInteresting_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeInteresting_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, changeInteresting_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.position_id = iprot.readI32();
                                struct.setPosition_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // IS_INTERESTED
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.is_interested = iprot.readByte();
                                struct.setIs_interestedIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, changeInteresting_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.position_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(IS_INTERESTED_FIELD_DESC);
                oprot.writeByte(struct.is_interested);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class changeInteresting_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public changeInteresting_argsTupleScheme getScheme() {
                return new changeInteresting_argsTupleScheme();
            }
        }

        private static class changeInteresting_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeInteresting_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, changeInteresting_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUser_id()) {
                    optionals.set(0);
                }
                if (struct.isSetPosition_id()) {
                    optionals.set(1);
                }
                if (struct.isSetIs_interested()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
                if (struct.isSetPosition_id()) {
                    oprot.writeI32(struct.position_id);
                }
                if (struct.isSetIs_interested()) {
                    oprot.writeByte(struct.is_interested);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, changeInteresting_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.position_id = iprot.readI32();
                    struct.setPosition_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.is_interested = iprot.readByte();
                    struct.setIs_interestedIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class changeInteresting_result implements org.apache.thrift.TBase<changeInteresting_result, changeInteresting_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeInteresting_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeInteresting_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeInteresting_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeInteresting_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeInteresting_result.class, metaDataMap);
        }

        public changeInteresting_result() {
        }

        public changeInteresting_result(
                com.moseeker.thrift.gen.common.struct.Response success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public changeInteresting_result(changeInteresting_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
        }

        public changeInteresting_result deepCopy() {
            return new changeInteresting_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public changeInteresting_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof changeInteresting_result)
                return this.equals((changeInteresting_result)that);
            return false;
        }

        public boolean equals(changeInteresting_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(changeInteresting_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("changeInteresting_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class changeInteresting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public changeInteresting_resultStandardScheme getScheme() {
                return new changeInteresting_resultStandardScheme();
            }
        }

        private static class changeInteresting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeInteresting_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, changeInteresting_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, changeInteresting_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class changeInteresting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public changeInteresting_resultTupleScheme getScheme() {
                return new changeInteresting_resultTupleScheme();
            }
        }

        private static class changeInteresting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeInteresting_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, changeInteresting_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, changeInteresting_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class candidateList_args implements org.apache.thrift.TBase<candidateList_args, candidateList_args._Fields>, java.io.Serializable, Cloneable, Comparable<candidateList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("candidateList_args");

        private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new candidateList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new candidateList_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.candidate.struct.CandidateListParam param; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAM((short)1, "param");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAM
                        return PARAM;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.CandidateListParam.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(candidateList_args.class, metaDataMap);
        }

        public candidateList_args() {
        }

        public candidateList_args(
                com.moseeker.thrift.gen.candidate.struct.CandidateListParam param)
        {
            this();
            this.param = param;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public candidateList_args(candidateList_args other) {
            if (other.isSetParam()) {
                this.param = new com.moseeker.thrift.gen.candidate.struct.CandidateListParam(other.param);
            }
        }

        public candidateList_args deepCopy() {
            return new candidateList_args(this);
        }

        @Override
        public void clear() {
            this.param = null;
        }

        public com.moseeker.thrift.gen.candidate.struct.CandidateListParam getParam() {
            return this.param;
        }

        public candidateList_args setParam(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param) {
            this.param = param;
            return this;
        }

        public void unsetParam() {
            this.param = null;
        }

        /** Returns true if field param is set (has been assigned a value) and false otherwise */
        public boolean isSetParam() {
            return this.param != null;
        }

        public void setParamIsSet(boolean value) {
            if (!value) {
                this.param = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAM:
                    if (value == null) {
                        unsetParam();
                    } else {
                        setParam((com.moseeker.thrift.gen.candidate.struct.CandidateListParam)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAM:
                    return getParam();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAM:
                    return isSetParam();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof candidateList_args)
                return this.equals((candidateList_args)that);
            return false;
        }

        public boolean equals(candidateList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_param = true && this.isSetParam();
            boolean that_present_param = true && that.isSetParam();
            if (this_present_param || that_present_param) {
                if (!(this_present_param && that_present_param))
                    return false;
                if (!this.param.equals(that.param))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParam()) ? 131071 : 524287);
            if (isSetParam())
                hashCode = hashCode * 8191 + param.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(candidateList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("candidateList_args(");
            boolean first = true;

            sb.append("param:");
            if (this.param == null) {
                sb.append("null");
            } else {
                sb.append(this.param);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (param != null) {
                param.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class candidateList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public candidateList_argsStandardScheme getScheme() {
                return new candidateList_argsStandardScheme();
            }
        }

        private static class candidateList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<candidateList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, candidateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAM
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.param = new com.moseeker.thrift.gen.candidate.struct.CandidateListParam();
                                struct.param.read(iprot);
                                struct.setParamIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, candidateList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.param != null) {
                    oprot.writeFieldBegin(PARAM_FIELD_DESC);
                    struct.param.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class candidateList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public candidateList_argsTupleScheme getScheme() {
                return new candidateList_argsTupleScheme();
            }
        }

        private static class candidateList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<candidateList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, candidateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParam()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetParam()) {
                    struct.param.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, candidateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.param = new com.moseeker.thrift.gen.candidate.struct.CandidateListParam();
                    struct.param.read(iprot);
                    struct.setParamIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class candidateList_result implements org.apache.thrift.TBase<candidateList_result, candidateList_result._Fields>, java.io.Serializable, Cloneable, Comparable<candidateList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("candidateList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new candidateList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new candidateList_resultTupleSchemeFactory();

        public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.CandidateList.class))));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(candidateList_result.class, metaDataMap);
        }

        public candidateList_result() {
        }

        public candidateList_result(
                java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public candidateList_result(candidateList_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.candidate.struct.CandidateList>(other.success.size());
                for (com.moseeker.thrift.gen.candidate.struct.CandidateList other_element : other.success) {
                    __this__success.add(new com.moseeker.thrift.gen.candidate.struct.CandidateList(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public candidateList_result deepCopy() {
            return new candidateList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.candidate.struct.CandidateList> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.moseeker.thrift.gen.candidate.struct.CandidateList elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.moseeker.thrift.gen.candidate.struct.CandidateList>();
            }
            this.success.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> getSuccess() {
            return this.success;
        }

        public candidateList_result setSuccess(java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public candidateList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof candidateList_result)
                return this.equals((candidateList_result)that);
            return false;
        }

        public boolean equals(candidateList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(candidateList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("candidateList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class candidateList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public candidateList_resultStandardScheme getScheme() {
                return new candidateList_resultStandardScheme();
            }
        }

        private static class candidateList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<candidateList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, candidateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.candidate.struct.CandidateList>(_list0.size);
                                    com.moseeker.thrift.gen.candidate.struct.CandidateList _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                                    {
                                        _elem1 = new com.moseeker.thrift.gen.candidate.struct.CandidateList();
                                        _elem1.read(iprot);
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, candidateList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.moseeker.thrift.gen.candidate.struct.CandidateList _iter3 : struct.success)
                        {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class candidateList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public candidateList_resultTupleScheme getScheme() {
                return new candidateList_resultTupleScheme();
            }
        }

        private static class candidateList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<candidateList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, candidateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.moseeker.thrift.gen.candidate.struct.CandidateList _iter4 : struct.success)
                        {
                            _iter4.write(oprot);
                        }
                    }
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, candidateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.candidate.struct.CandidateList>(_list5.size);
                        com.moseeker.thrift.gen.candidate.struct.CandidateList _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                        {
                            _elem6 = new com.moseeker.thrift.gen.candidate.struct.CandidateList();
                            _elem6.read(iprot);
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecomendations_args implements org.apache.thrift.TBase<getRecomendations_args, getRecomendations_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecomendations_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecomendations_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("idList", org.apache.thrift.protocol.TType.LIST, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecomendations_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecomendations_argsTupleSchemeFactory();

        public int companyId; // required
        public java.util.List<java.lang.Integer> idList; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            ID_LIST((short)2, "idList");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // ID_LIST
                        return ID_LIST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("idList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecomendations_args.class, metaDataMap);
        }

        public getRecomendations_args() {
        }

        public getRecomendations_args(
                int companyId,
                java.util.List<java.lang.Integer> idList)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.idList = idList;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecomendations_args(getRecomendations_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            if (other.isSetIdList()) {
                java.util.List<java.lang.Integer> __this__idList = new java.util.ArrayList<java.lang.Integer>(other.idList);
                this.idList = __this__idList;
            }
        }

        public getRecomendations_args deepCopy() {
            return new getRecomendations_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            this.idList = null;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getRecomendations_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getIdListSize() {
            return (this.idList == null) ? 0 : this.idList.size();
        }

        public java.util.Iterator<java.lang.Integer> getIdListIterator() {
            return (this.idList == null) ? null : this.idList.iterator();
        }

        public void addToIdList(int elem) {
            if (this.idList == null) {
                this.idList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.idList.add(elem);
        }

        public java.util.List<java.lang.Integer> getIdList() {
            return this.idList;
        }

        public getRecomendations_args setIdList(java.util.List<java.lang.Integer> idList) {
            this.idList = idList;
            return this;
        }

        public void unsetIdList() {
            this.idList = null;
        }

        /** Returns true if field idList is set (has been assigned a value) and false otherwise */
        public boolean isSetIdList() {
            return this.idList != null;
        }

        public void setIdListIsSet(boolean value) {
            if (!value) {
                this.idList = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case ID_LIST:
                    if (value == null) {
                        unsetIdList();
                    } else {
                        setIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case ID_LIST:
                    return getIdList();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case ID_LIST:
                    return isSetIdList();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecomendations_args)
                return this.equals((getRecomendations_args)that);
            return false;
        }

        public boolean equals(getRecomendations_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_idList = true && this.isSetIdList();
            boolean that_present_idList = true && that.isSetIdList();
            if (this_present_idList || that_present_idList) {
                if (!(this_present_idList && that_present_idList))
                    return false;
                if (!this.idList.equals(that.idList))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + ((isSetIdList()) ? 131071 : 524287);
            if (isSetIdList())
                hashCode = hashCode * 8191 + idList.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRecomendations_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetIdList()).compareTo(other.isSetIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idList, other.idList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecomendations_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("idList:");
            if (this.idList == null) {
                sb.append("null");
            } else {
                sb.append(this.idList);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecomendations_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecomendations_argsStandardScheme getScheme() {
                return new getRecomendations_argsStandardScheme();
            }
        }

        private static class getRecomendations_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecomendations_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecomendations_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.idList = new java.util.ArrayList<java.lang.Integer>(_list8.size);
                                    int _elem9;
                                    for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                                    {
                                        _elem9 = iprot.readI32();
                                        struct.idList.add(_elem9);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecomendations_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                if (struct.idList != null) {
                    oprot.writeFieldBegin(ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.idList.size()));
                        for (int _iter11 : struct.idList)
                        {
                            oprot.writeI32(_iter11);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecomendations_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecomendations_argsTupleScheme getScheme() {
                return new getRecomendations_argsTupleScheme();
            }
        }

        private static class getRecomendations_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecomendations_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecomendations_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetIdList()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetIdList()) {
                    {
                        oprot.writeI32(struct.idList.size());
                        for (int _iter12 : struct.idList)
                        {
                            oprot.writeI32(_iter12);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecomendations_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.idList = new java.util.ArrayList<java.lang.Integer>(_list13.size);
                        int _elem14;
                        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                        {
                            _elem14 = iprot.readI32();
                            struct.idList.add(_elem14);
                        }
                    }
                    struct.setIdListIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecomendations_result implements org.apache.thrift.TBase<getRecomendations_result, getRecomendations_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecomendations_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecomendations_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecomendations_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecomendations_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.RecommendResult.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecomendations_result.class, metaDataMap);
        }

        public getRecomendations_result() {
        }

        public getRecomendations_result(
                com.moseeker.thrift.gen.candidate.struct.RecommendResult success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecomendations_result(getRecomendations_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getRecomendations_result deepCopy() {
            return new getRecomendations_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult getSuccess() {
            return this.success;
        }

        public getRecomendations_result setSuccess(com.moseeker.thrift.gen.candidate.struct.RecommendResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getRecomendations_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.candidate.struct.RecommendResult)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecomendations_result)
                return this.equals((getRecomendations_result)that);
            return false;
        }

        public boolean equals(getRecomendations_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRecomendations_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecomendations_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecomendations_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecomendations_resultStandardScheme getScheme() {
                return new getRecomendations_resultStandardScheme();
            }
        }

        private static class getRecomendations_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecomendations_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecomendations_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecomendations_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecomendations_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecomendations_resultTupleScheme getScheme() {
                return new getRecomendations_resultTupleScheme();
            }
        }

        private static class getRecomendations_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecomendations_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecomendations_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecomendations_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class recommend_args implements org.apache.thrift.TBase<recommend_args, recommend_args._Fields>, java.io.Serializable, Cloneable, Comparable<recommend_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recommend_args");

        private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recommend_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recommend_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.candidate.struct.RecommmendParam param; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAM((short)1, "param");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAM
                        return PARAM;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.RecommmendParam.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recommend_args.class, metaDataMap);
        }

        public recommend_args() {
        }

        public recommend_args(
                com.moseeker.thrift.gen.candidate.struct.RecommmendParam param)
        {
            this();
            this.param = param;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public recommend_args(recommend_args other) {
            if (other.isSetParam()) {
                this.param = new com.moseeker.thrift.gen.candidate.struct.RecommmendParam(other.param);
            }
        }

        public recommend_args deepCopy() {
            return new recommend_args(this);
        }

        @Override
        public void clear() {
            this.param = null;
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommmendParam getParam() {
            return this.param;
        }

        public recommend_args setParam(com.moseeker.thrift.gen.candidate.struct.RecommmendParam param) {
            this.param = param;
            return this;
        }

        public void unsetParam() {
            this.param = null;
        }

        /** Returns true if field param is set (has been assigned a value) and false otherwise */
        public boolean isSetParam() {
            return this.param != null;
        }

        public void setParamIsSet(boolean value) {
            if (!value) {
                this.param = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAM:
                    if (value == null) {
                        unsetParam();
                    } else {
                        setParam((com.moseeker.thrift.gen.candidate.struct.RecommmendParam)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAM:
                    return getParam();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAM:
                    return isSetParam();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof recommend_args)
                return this.equals((recommend_args)that);
            return false;
        }

        public boolean equals(recommend_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_param = true && this.isSetParam();
            boolean that_present_param = true && that.isSetParam();
            if (this_present_param || that_present_param) {
                if (!(this_present_param && that_present_param))
                    return false;
                if (!this.param.equals(that.param))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParam()) ? 131071 : 524287);
            if (isSetParam())
                hashCode = hashCode * 8191 + param.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(recommend_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("recommend_args(");
            boolean first = true;

            sb.append("param:");
            if (this.param == null) {
                sb.append("null");
            } else {
                sb.append(this.param);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (param != null) {
                param.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class recommend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public recommend_argsStandardScheme getScheme() {
                return new recommend_argsStandardScheme();
            }
        }

        private static class recommend_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recommend_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, recommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAM
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.param = new com.moseeker.thrift.gen.candidate.struct.RecommmendParam();
                                struct.param.read(iprot);
                                struct.setParamIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, recommend_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.param != null) {
                    oprot.writeFieldBegin(PARAM_FIELD_DESC);
                    struct.param.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class recommend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public recommend_argsTupleScheme getScheme() {
                return new recommend_argsTupleScheme();
            }
        }

        private static class recommend_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recommend_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, recommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParam()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetParam()) {
                    struct.param.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, recommend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.param = new com.moseeker.thrift.gen.candidate.struct.RecommmendParam();
                    struct.param.read(iprot);
                    struct.setParamIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class recommend_result implements org.apache.thrift.TBase<recommend_result, recommend_result._Fields>, java.io.Serializable, Cloneable, Comparable<recommend_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recommend_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recommend_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recommend_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.RecommendResult.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recommend_result.class, metaDataMap);
        }

        public recommend_result() {
        }

        public recommend_result(
                com.moseeker.thrift.gen.candidate.struct.RecommendResult success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public recommend_result(recommend_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public recommend_result deepCopy() {
            return new recommend_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult getSuccess() {
            return this.success;
        }

        public recommend_result setSuccess(com.moseeker.thrift.gen.candidate.struct.RecommendResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public recommend_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.candidate.struct.RecommendResult)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof recommend_result)
                return this.equals((recommend_result)that);
            return false;
        }

        public boolean equals(recommend_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(recommend_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("recommend_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class recommend_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public recommend_resultStandardScheme getScheme() {
                return new recommend_resultStandardScheme();
            }
        }

        private static class recommend_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recommend_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, recommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, recommend_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class recommend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public recommend_resultTupleScheme getScheme() {
                return new recommend_resultTupleScheme();
            }
        }

        private static class recommend_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recommend_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, recommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, recommend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecommendation_args implements org.apache.thrift.TBase<getRecommendation_args, getRecommendation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommendation_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommendation_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecommendation_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecommendation_argsTupleSchemeFactory();

        public int id; // required
        public int postUserId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short)1, "id"),
            POST_USER_ID((short)2, "postUserId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // POST_USER_ID
                        return POST_USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private static final int __POSTUSERID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommendation_args.class, metaDataMap);
        }

        public getRecommendation_args() {
        }

        public getRecommendation_args(
                int id,
                int postUserId)
        {
            this();
            this.id = id;
            setIdIsSet(true);
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecommendation_args(getRecommendation_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            this.postUserId = other.postUserId;
        }

        public getRecommendation_args deepCopy() {
            return new getRecommendation_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            setPostUserIdIsSet(false);
            this.postUserId = 0;
        }

        public int getId() {
            return this.id;
        }

        public getRecommendation_args setId(int id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public int getPostUserId() {
            return this.postUserId;
        }

        public getRecommendation_args setPostUserId(int postUserId) {
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            return this;
        }

        public void unsetPostUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetPostUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        public void setPostUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Integer)value);
                    }
                    break;

                case POST_USER_ID:
                    if (value == null) {
                        unsetPostUserId();
                    } else {
                        setPostUserId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case POST_USER_ID:
                    return getPostUserId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case POST_USER_ID:
                    return isSetPostUserId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecommendation_args)
                return this.equals((getRecommendation_args)that);
            return false;
        }

        public boolean equals(getRecommendation_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_postUserId = true;
            boolean that_present_postUserId = true;
            if (this_present_postUserId || that_present_postUserId) {
                if (!(this_present_postUserId && that_present_postUserId))
                    return false;
                if (this.postUserId != that.postUserId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + id;

            hashCode = hashCode * 8191 + postUserId;

            return hashCode;
        }

        @Override
        public int compareTo(getRecommendation_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPostUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecommendation_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("postUserId:");
            sb.append(this.postUserId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecommendation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendation_argsStandardScheme getScheme() {
                return new getRecommendation_argsStandardScheme();
            }
        }

        private static class getRecommendation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecommendation_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommendation_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.id = iprot.readI32();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POST_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.postUserId = iprot.readI32();
                                struct.setPostUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommendation_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.postUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecommendation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendation_argsTupleScheme getScheme() {
                return new getRecommendation_argsTupleScheme();
            }
        }

        private static class getRecommendation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecommendation_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecommendation_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetPostUserId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI32(struct.id);
                }
                if (struct.isSetPostUserId()) {
                    oprot.writeI32(struct.postUserId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecommendation_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI32();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.postUserId = iprot.readI32();
                    struct.setPostUserIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecommendation_result implements org.apache.thrift.TBase<getRecommendation_result, getRecommendation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommendation_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommendation_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecommendation_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecommendation_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.candidate.struct.RecomRecordResult success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.RecomRecordResult.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommendation_result.class, metaDataMap);
        }

        public getRecommendation_result() {
        }

        public getRecommendation_result(
                com.moseeker.thrift.gen.candidate.struct.RecomRecordResult success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecommendation_result(getRecommendation_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.candidate.struct.RecomRecordResult(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getRecommendation_result deepCopy() {
            return new getRecommendation_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.candidate.struct.RecomRecordResult getSuccess() {
            return this.success;
        }

        public getRecommendation_result setSuccess(com.moseeker.thrift.gen.candidate.struct.RecomRecordResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getRecommendation_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.candidate.struct.RecomRecordResult)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecommendation_result)
                return this.equals((getRecommendation_result)that);
            return false;
        }

        public boolean equals(getRecommendation_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRecommendation_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecommendation_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecommendation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendation_resultStandardScheme getScheme() {
                return new getRecommendation_resultStandardScheme();
            }
        }

        private static class getRecommendation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecommendation_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommendation_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.candidate.struct.RecomRecordResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommendation_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecommendation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendation_resultTupleScheme getScheme() {
                return new getRecommendation_resultTupleScheme();
            }
        }

        private static class getRecommendation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecommendation_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecommendation_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecommendation_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.candidate.struct.RecomRecordResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecommendatorySorting_args implements org.apache.thrift.TBase<getRecommendatorySorting_args, getRecommendatorySorting_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommendatorySorting_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommendatorySorting_args");

        private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecommendatorySorting_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecommendatorySorting_argsTupleSchemeFactory();

        public int postUserId; // required
        public int companyId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            POST_USER_ID((short)1, "postUserId"),
            COMPANY_ID((short)2, "companyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // POST_USER_ID
                        return POST_USER_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __POSTUSERID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommendatorySorting_args.class, metaDataMap);
        }

        public getRecommendatorySorting_args() {
        }

        public getRecommendatorySorting_args(
                int postUserId,
                int companyId)
        {
            this();
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecommendatorySorting_args(getRecommendatorySorting_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.postUserId = other.postUserId;
            this.companyId = other.companyId;
        }

        public getRecommendatorySorting_args deepCopy() {
            return new getRecommendatorySorting_args(this);
        }

        @Override
        public void clear() {
            setPostUserIdIsSet(false);
            this.postUserId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
        }

        public int getPostUserId() {
            return this.postUserId;
        }

        public getRecommendatorySorting_args setPostUserId(int postUserId) {
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            return this;
        }

        public void unsetPostUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetPostUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        public void setPostUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getRecommendatorySorting_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case POST_USER_ID:
                    if (value == null) {
                        unsetPostUserId();
                    } else {
                        setPostUserId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case POST_USER_ID:
                    return getPostUserId();

                case COMPANY_ID:
                    return getCompanyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case POST_USER_ID:
                    return isSetPostUserId();
                case COMPANY_ID:
                    return isSetCompanyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecommendatorySorting_args)
                return this.equals((getRecommendatorySorting_args)that);
            return false;
        }

        public boolean equals(getRecommendatorySorting_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_postUserId = true;
            boolean that_present_postUserId = true;
            if (this_present_postUserId || that_present_postUserId) {
                if (!(this_present_postUserId && that_present_postUserId))
                    return false;
                if (this.postUserId != that.postUserId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + postUserId;

            hashCode = hashCode * 8191 + companyId;

            return hashCode;
        }

        @Override
        public int compareTo(getRecommendatorySorting_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPostUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecommendatorySorting_args(");
            boolean first = true;

            sb.append("postUserId:");
            sb.append(this.postUserId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecommendatorySorting_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendatorySorting_argsStandardScheme getScheme() {
                return new getRecommendatorySorting_argsStandardScheme();
            }
        }

        private static class getRecommendatorySorting_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecommendatorySorting_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommendatorySorting_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // POST_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.postUserId = iprot.readI32();
                                struct.setPostUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommendatorySorting_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.postUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecommendatorySorting_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendatorySorting_argsTupleScheme getScheme() {
                return new getRecommendatorySorting_argsTupleScheme();
            }
        }

        private static class getRecommendatorySorting_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecommendatorySorting_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecommendatorySorting_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetPostUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPostUserId()) {
                    oprot.writeI32(struct.postUserId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecommendatorySorting_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.postUserId = iprot.readI32();
                    struct.setPostUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecommendatorySorting_result implements org.apache.thrift.TBase<getRecommendatorySorting_result, getRecommendatorySorting_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommendatorySorting_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommendatorySorting_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecommendatorySorting_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecommendatorySorting_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.candidate.struct.SortResult success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.SortResult.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommendatorySorting_result.class, metaDataMap);
        }

        public getRecommendatorySorting_result() {
        }

        public getRecommendatorySorting_result(
                com.moseeker.thrift.gen.candidate.struct.SortResult success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecommendatorySorting_result(getRecommendatorySorting_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.candidate.struct.SortResult(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getRecommendatorySorting_result deepCopy() {
            return new getRecommendatorySorting_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.candidate.struct.SortResult getSuccess() {
            return this.success;
        }

        public getRecommendatorySorting_result setSuccess(com.moseeker.thrift.gen.candidate.struct.SortResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getRecommendatorySorting_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.candidate.struct.SortResult)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecommendatorySorting_result)
                return this.equals((getRecommendatorySorting_result)that);
            return false;
        }

        public boolean equals(getRecommendatorySorting_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRecommendatorySorting_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecommendatorySorting_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecommendatorySorting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendatorySorting_resultStandardScheme getScheme() {
                return new getRecommendatorySorting_resultStandardScheme();
            }
        }

        private static class getRecommendatorySorting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecommendatorySorting_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommendatorySorting_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.candidate.struct.SortResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommendatorySorting_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecommendatorySorting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecommendatorySorting_resultTupleScheme getScheme() {
                return new getRecommendatorySorting_resultTupleScheme();
            }
        }

        private static class getRecommendatorySorting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecommendatorySorting_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecommendatorySorting_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecommendatorySorting_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.candidate.struct.SortResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ignore_args implements org.apache.thrift.TBase<ignore_args, ignore_args._Fields>, java.io.Serializable, Cloneable, Comparable<ignore_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ignore_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField CLICK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("clickTime", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ignore_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ignore_argsTupleSchemeFactory();

        public int id; // required
        public int companyId; // required
        public int postUserId; // required
        public java.lang.String clickTime; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short)1, "id"),
            COMPANY_ID((short)2, "companyId"),
            POST_USER_ID((short)3, "postUserId"),
            CLICK_TIME((short)4, "clickTime");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // POST_USER_ID
                        return POST_USER_ID;
                    case 4: // CLICK_TIME
                        return CLICK_TIME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __POSTUSERID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CLICK_TIME, new org.apache.thrift.meta_data.FieldMetaData("clickTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ignore_args.class, metaDataMap);
        }

        public ignore_args() {
        }

        public ignore_args(
                int id,
                int companyId,
                int postUserId,
                java.lang.String clickTime)
        {
            this();
            this.id = id;
            setIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            this.clickTime = clickTime;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ignore_args(ignore_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            this.companyId = other.companyId;
            this.postUserId = other.postUserId;
            if (other.isSetClickTime()) {
                this.clickTime = other.clickTime;
            }
        }

        public ignore_args deepCopy() {
            return new ignore_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setPostUserIdIsSet(false);
            this.postUserId = 0;
            this.clickTime = null;
        }

        public int getId() {
            return this.id;
        }

        public ignore_args setId(int id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public ignore_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getPostUserId() {
            return this.postUserId;
        }

        public ignore_args setPostUserId(int postUserId) {
            this.postUserId = postUserId;
            setPostUserIdIsSet(true);
            return this;
        }

        public void unsetPostUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetPostUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
        }

        public void setPostUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
        }

        public java.lang.String getClickTime() {
            return this.clickTime;
        }

        public ignore_args setClickTime(java.lang.String clickTime) {
            this.clickTime = clickTime;
            return this;
        }

        public void unsetClickTime() {
            this.clickTime = null;
        }

        /** Returns true if field clickTime is set (has been assigned a value) and false otherwise */
        public boolean isSetClickTime() {
            return this.clickTime != null;
        }

        public void setClickTimeIsSet(boolean value) {
            if (!value) {
                this.clickTime = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case POST_USER_ID:
                    if (value == null) {
                        unsetPostUserId();
                    } else {
                        setPostUserId((java.lang.Integer)value);
                    }
                    break;

                case CLICK_TIME:
                    if (value == null) {
                        unsetClickTime();
                    } else {
                        setClickTime((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case COMPANY_ID:
                    return getCompanyId();

                case POST_USER_ID:
                    return getPostUserId();

                case CLICK_TIME:
                    return getClickTime();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case POST_USER_ID:
                    return isSetPostUserId();
                case CLICK_TIME:
                    return isSetClickTime();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ignore_args)
                return this.equals((ignore_args)that);
            return false;
        }

        public boolean equals(ignore_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_postUserId = true;
            boolean that_present_postUserId = true;
            if (this_present_postUserId || that_present_postUserId) {
                if (!(this_present_postUserId && that_present_postUserId))
                    return false;
                if (this.postUserId != that.postUserId)
                    return false;
            }

            boolean this_present_clickTime = true && this.isSetClickTime();
            boolean that_present_clickTime = true && that.isSetClickTime();
            if (this_present_clickTime || that_present_clickTime) {
                if (!(this_present_clickTime && that_present_clickTime))
                    return false;
                if (!this.clickTime.equals(that.clickTime))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + id;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + postUserId;

            hashCode = hashCode * 8191 + ((isSetClickTime()) ? 131071 : 524287);
            if (isSetClickTime())
                hashCode = hashCode * 8191 + clickTime.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ignore_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPostUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetClickTime()).compareTo(other.isSetClickTime());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetClickTime()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickTime, other.clickTime);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ignore_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("postUserId:");
            sb.append(this.postUserId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("clickTime:");
            if (this.clickTime == null) {
                sb.append("null");
            } else {
                sb.append(this.clickTime);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ignore_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ignore_argsStandardScheme getScheme() {
                return new ignore_argsStandardScheme();
            }
        }

        private static class ignore_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ignore_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ignore_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.id = iprot.readI32();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POST_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.postUserId = iprot.readI32();
                                struct.setPostUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // CLICK_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.clickTime = iprot.readString();
                                struct.setClickTimeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ignore_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.postUserId);
                oprot.writeFieldEnd();
                if (struct.clickTime != null) {
                    oprot.writeFieldBegin(CLICK_TIME_FIELD_DESC);
                    oprot.writeString(struct.clickTime);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ignore_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ignore_argsTupleScheme getScheme() {
                return new ignore_argsTupleScheme();
            }
        }

        private static class ignore_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ignore_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ignore_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetPostUserId()) {
                    optionals.set(2);
                }
                if (struct.isSetClickTime()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetId()) {
                    oprot.writeI32(struct.id);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetPostUserId()) {
                    oprot.writeI32(struct.postUserId);
                }
                if (struct.isSetClickTime()) {
                    oprot.writeString(struct.clickTime);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ignore_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.id = iprot.readI32();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.postUserId = iprot.readI32();
                    struct.setPostUserIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.clickTime = iprot.readString();
                    struct.setClickTimeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ignore_result implements org.apache.thrift.TBase<ignore_result, ignore_result._Fields>, java.io.Serializable, Cloneable, Comparable<ignore_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ignore_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ignore_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ignore_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.RecommendResult.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ignore_result.class, metaDataMap);
        }

        public ignore_result() {
        }

        public ignore_result(
                com.moseeker.thrift.gen.candidate.struct.RecommendResult success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ignore_result(ignore_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public ignore_result deepCopy() {
            return new ignore_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.candidate.struct.RecommendResult getSuccess() {
            return this.success;
        }

        public ignore_result setSuccess(com.moseeker.thrift.gen.candidate.struct.RecommendResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public ignore_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.candidate.struct.RecommendResult)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ignore_result)
                return this.equals((ignore_result)that);
            return false;
        }

        public boolean equals(ignore_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ignore_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ignore_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ignore_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ignore_resultStandardScheme getScheme() {
                return new ignore_resultStandardScheme();
            }
        }

        private static class ignore_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ignore_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ignore_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ignore_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ignore_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ignore_resultTupleScheme getScheme() {
                return new ignore_resultTupleScheme();
            }
        }

        private static class ignore_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ignore_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ignore_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ignore_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.candidate.struct.RecommendResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCandidateInfo_args implements org.apache.thrift.TBase<getCandidateInfo_args, getCandidateInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateInfo_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateInfo_argsTupleSchemeFactory();

        public int hrId; // required
        public int userId; // required
        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            USER_ID((short)2, "userId"),
            POSITION_ID((short)3, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_ID
                        return USER_ID;
                    case 3: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __USERID_ISSET_ID = 1;
        private static final int __POSITIONID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateInfo_args.class, metaDataMap);
        }

        public getCandidateInfo_args() {
        }

        public getCandidateInfo_args(
                int hrId,
                int userId,
                int positionId)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.userId = userId;
            setUserIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCandidateInfo_args(getCandidateInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            this.userId = other.userId;
            this.positionId = other.positionId;
        }

        public getCandidateInfo_args deepCopy() {
            return new getCandidateInfo_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            setUserIdIsSet(false);
            this.userId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public getCandidateInfo_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getUserId() {
            return this.userId;
        }

        public getCandidateInfo_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public getCandidateInfo_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case USER_ID:
                    return getUserId();

                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case USER_ID:
                    return isSetUserId();
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCandidateInfo_args)
                return this.equals((getCandidateInfo_args)that);
            return false;
        }

        public boolean equals(getCandidateInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(getCandidateInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateInfo_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCandidateInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCandidateInfo_argsStandardScheme getScheme() {
                return new getCandidateInfo_argsStandardScheme();
            }
        }

        private static class getCandidateInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCandidateInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCandidateInfo_argsTupleScheme getScheme() {
                return new getCandidateInfo_argsTupleScheme();
            }
        }

        private static class getCandidateInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetUserId()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCandidateInfo_result implements org.apache.thrift.TBase<getCandidateInfo_result, getCandidateInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateInfo_result.class, metaDataMap);
        }

        public getCandidateInfo_result() {
        }

        public getCandidateInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCandidateInfo_result(getCandidateInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCandidateInfo_result deepCopy() {
            return new getCandidateInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCandidateInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCandidateInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCandidateInfo_result)
                return this.equals((getCandidateInfo_result)that);
            return false;
        }

        public boolean equals(getCandidateInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCandidateInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCandidateInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCandidateInfo_resultStandardScheme getScheme() {
                return new getCandidateInfo_resultStandardScheme();
            }
        }

        private static class getCandidateInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCandidateInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCandidateInfo_resultTupleScheme getScheme() {
                return new getCandidateInfo_resultTupleScheme();
            }
        }

        private static class getCandidateInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecentPosition_args implements org.apache.thrift.TBase<getRecentPosition_args, getRecentPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentPosition_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentPosition_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecentPosition_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecentPosition_argsTupleSchemeFactory();

        public int hrId; // required
        public int userId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            USER_ID((short)2, "userId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __USERID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentPosition_args.class, metaDataMap);
        }

        public getRecentPosition_args() {
        }

        public getRecentPosition_args(
                int hrId,
                int userId)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.userId = userId;
            setUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecentPosition_args(getRecentPosition_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            this.userId = other.userId;
        }

        public getRecentPosition_args deepCopy() {
            return new getRecentPosition_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            setUserIdIsSet(false);
            this.userId = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public getRecentPosition_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getUserId() {
            return this.userId;
        }

        public getRecentPosition_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case USER_ID:
                    return getUserId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case USER_ID:
                    return isSetUserId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecentPosition_args)
                return this.equals((getRecentPosition_args)that);
            return false;
        }

        public boolean equals(getRecentPosition_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + userId;

            return hashCode;
        }

        @Override
        public int compareTo(getRecentPosition_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecentPosition_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecentPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecentPosition_argsStandardScheme getScheme() {
                return new getRecentPosition_argsStandardScheme();
            }
        }

        private static class getRecentPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecentPosition_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentPosition_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecentPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecentPosition_argsTupleScheme getScheme() {
                return new getRecentPosition_argsTupleScheme();
            }
        }

        private static class getRecentPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecentPosition_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecentPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetUserId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecentPosition_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getRecentPosition_result implements org.apache.thrift.TBase<getRecentPosition_result, getRecentPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentPosition_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentPosition_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecentPosition_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecentPosition_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.candidate.struct.RecentPosition success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.RecentPosition.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentPosition_result.class, metaDataMap);
        }

        public getRecentPosition_result() {
        }

        public getRecentPosition_result(
                com.moseeker.thrift.gen.candidate.struct.RecentPosition success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getRecentPosition_result(getRecentPosition_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.candidate.struct.RecentPosition(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getRecentPosition_result deepCopy() {
            return new getRecentPosition_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.candidate.struct.RecentPosition getSuccess() {
            return this.success;
        }

        public getRecentPosition_result setSuccess(com.moseeker.thrift.gen.candidate.struct.RecentPosition success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getRecentPosition_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.candidate.struct.RecentPosition)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getRecentPosition_result)
                return this.equals((getRecentPosition_result)that);
            return false;
        }

        public boolean equals(getRecentPosition_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getRecentPosition_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecentPosition_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getRecentPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecentPosition_resultStandardScheme getScheme() {
                return new getRecentPosition_resultStandardScheme();
            }
        }

        private static class getRecentPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecentPosition_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.candidate.struct.RecentPosition();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentPosition_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getRecentPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getRecentPosition_resultTupleScheme getScheme() {
                return new getRecentPosition_resultTupleScheme();
            }
        }

        private static class getRecentPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecentPosition_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getRecentPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getRecentPosition_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.candidate.struct.RecentPosition();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addApplicationReferral_args implements org.apache.thrift.TBase<addApplicationReferral_args, addApplicationReferral_args._Fields>, java.io.Serializable, Cloneable, Comparable<addApplicationReferral_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplicationReferral_args");

        private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PSC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pscId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField DIRECT_REFERRAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("directReferralUserId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addApplicationReferral_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addApplicationReferral_argsTupleSchemeFactory();

        public int applicationId; // required
        public int pscId; // required
        public int directReferralUserId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            APPLICATION_ID((short)1, "applicationId"),
            PSC_ID((short)2, "pscId"),
            DIRECT_REFERRAL_USER_ID((short)3, "directReferralUserId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // APPLICATION_ID
                        return APPLICATION_ID;
                    case 2: // PSC_ID
                        return PSC_ID;
                    case 3: // DIRECT_REFERRAL_USER_ID
                        return DIRECT_REFERRAL_USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __APPLICATIONID_ISSET_ID = 0;
        private static final int __PSCID_ISSET_ID = 1;
        private static final int __DIRECTREFERRALUSERID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PSC_ID, new org.apache.thrift.meta_data.FieldMetaData("pscId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.DIRECT_REFERRAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("directReferralUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplicationReferral_args.class, metaDataMap);
        }

        public addApplicationReferral_args() {
        }

        public addApplicationReferral_args(
                int applicationId,
                int pscId,
                int directReferralUserId)
        {
            this();
            this.applicationId = applicationId;
            setApplicationIdIsSet(true);
            this.pscId = pscId;
            setPscIdIsSet(true);
            this.directReferralUserId = directReferralUserId;
            setDirectReferralUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addApplicationReferral_args(addApplicationReferral_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.applicationId = other.applicationId;
            this.pscId = other.pscId;
            this.directReferralUserId = other.directReferralUserId;
        }

        public addApplicationReferral_args deepCopy() {
            return new addApplicationReferral_args(this);
        }

        @Override
        public void clear() {
            setApplicationIdIsSet(false);
            this.applicationId = 0;
            setPscIdIsSet(false);
            this.pscId = 0;
            setDirectReferralUserIdIsSet(false);
            this.directReferralUserId = 0;
        }

        public int getApplicationId() {
            return this.applicationId;
        }

        public addApplicationReferral_args setApplicationId(int applicationId) {
            this.applicationId = applicationId;
            setApplicationIdIsSet(true);
            return this;
        }

        public void unsetApplicationId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
        }

        /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
        public boolean isSetApplicationId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
        }

        public void setApplicationIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPLICATIONID_ISSET_ID, value);
        }

        public int getPscId() {
            return this.pscId;
        }

        public addApplicationReferral_args setPscId(int pscId) {
            this.pscId = pscId;
            setPscIdIsSet(true);
            return this;
        }

        public void unsetPscId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PSCID_ISSET_ID);
        }

        /** Returns true if field pscId is set (has been assigned a value) and false otherwise */
        public boolean isSetPscId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PSCID_ISSET_ID);
        }

        public void setPscIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PSCID_ISSET_ID, value);
        }

        public int getDirectReferralUserId() {
            return this.directReferralUserId;
        }

        public addApplicationReferral_args setDirectReferralUserId(int directReferralUserId) {
            this.directReferralUserId = directReferralUserId;
            setDirectReferralUserIdIsSet(true);
            return this;
        }

        public void unsetDirectReferralUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECTREFERRALUSERID_ISSET_ID);
        }

        /** Returns true if field directReferralUserId is set (has been assigned a value) and false otherwise */
        public boolean isSetDirectReferralUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECTREFERRALUSERID_ISSET_ID);
        }

        public void setDirectReferralUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECTREFERRALUSERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case APPLICATION_ID:
                    if (value == null) {
                        unsetApplicationId();
                    } else {
                        setApplicationId((java.lang.Integer)value);
                    }
                    break;

                case PSC_ID:
                    if (value == null) {
                        unsetPscId();
                    } else {
                        setPscId((java.lang.Integer)value);
                    }
                    break;

                case DIRECT_REFERRAL_USER_ID:
                    if (value == null) {
                        unsetDirectReferralUserId();
                    } else {
                        setDirectReferralUserId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case APPLICATION_ID:
                    return getApplicationId();

                case PSC_ID:
                    return getPscId();

                case DIRECT_REFERRAL_USER_ID:
                    return getDirectReferralUserId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case APPLICATION_ID:
                    return isSetApplicationId();
                case PSC_ID:
                    return isSetPscId();
                case DIRECT_REFERRAL_USER_ID:
                    return isSetDirectReferralUserId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addApplicationReferral_args)
                return this.equals((addApplicationReferral_args)that);
            return false;
        }

        public boolean equals(addApplicationReferral_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_applicationId = true;
            boolean that_present_applicationId = true;
            if (this_present_applicationId || that_present_applicationId) {
                if (!(this_present_applicationId && that_present_applicationId))
                    return false;
                if (this.applicationId != that.applicationId)
                    return false;
            }

            boolean this_present_pscId = true;
            boolean that_present_pscId = true;
            if (this_present_pscId || that_present_pscId) {
                if (!(this_present_pscId && that_present_pscId))
                    return false;
                if (this.pscId != that.pscId)
                    return false;
            }

            boolean this_present_directReferralUserId = true;
            boolean that_present_directReferralUserId = true;
            if (this_present_directReferralUserId || that_present_directReferralUserId) {
                if (!(this_present_directReferralUserId && that_present_directReferralUserId))
                    return false;
                if (this.directReferralUserId != that.directReferralUserId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + applicationId;

            hashCode = hashCode * 8191 + pscId;

            hashCode = hashCode * 8191 + directReferralUserId;

            return hashCode;
        }

        @Override
        public int compareTo(addApplicationReferral_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetApplicationId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPscId()).compareTo(other.isSetPscId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPscId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pscId, other.pscId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetDirectReferralUserId()).compareTo(other.isSetDirectReferralUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDirectReferralUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directReferralUserId, other.directReferralUserId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addApplicationReferral_args(");
            boolean first = true;

            sb.append("applicationId:");
            sb.append(this.applicationId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pscId:");
            sb.append(this.pscId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("directReferralUserId:");
            sb.append(this.directReferralUserId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addApplicationReferral_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addApplicationReferral_argsStandardScheme getScheme() {
                return new addApplicationReferral_argsStandardScheme();
            }
        }

        private static class addApplicationReferral_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addApplicationReferral_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addApplicationReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // APPLICATION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.applicationId = iprot.readI32();
                                struct.setApplicationIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PSC_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pscId = iprot.readI32();
                                struct.setPscIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // DIRECT_REFERRAL_USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.directReferralUserId = iprot.readI32();
                                struct.setDirectReferralUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addApplicationReferral_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
                oprot.writeI32(struct.applicationId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PSC_ID_FIELD_DESC);
                oprot.writeI32(struct.pscId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(DIRECT_REFERRAL_USER_ID_FIELD_DESC);
                oprot.writeI32(struct.directReferralUserId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addApplicationReferral_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addApplicationReferral_argsTupleScheme getScheme() {
                return new addApplicationReferral_argsTupleScheme();
            }
        }

        private static class addApplicationReferral_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addApplicationReferral_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addApplicationReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetApplicationId()) {
                    optionals.set(0);
                }
                if (struct.isSetPscId()) {
                    optionals.set(1);
                }
                if (struct.isSetDirectReferralUserId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetApplicationId()) {
                    oprot.writeI32(struct.applicationId);
                }
                if (struct.isSetPscId()) {
                    oprot.writeI32(struct.pscId);
                }
                if (struct.isSetDirectReferralUserId()) {
                    oprot.writeI32(struct.directReferralUserId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addApplicationReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.applicationId = iprot.readI32();
                    struct.setApplicationIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pscId = iprot.readI32();
                    struct.setPscIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.directReferralUserId = iprot.readI32();
                    struct.setDirectReferralUserIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addApplicationReferral_result implements org.apache.thrift.TBase<addApplicationReferral_result, addApplicationReferral_result._Fields>, java.io.Serializable, Cloneable, Comparable<addApplicationReferral_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplicationReferral_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addApplicationReferral_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addApplicationReferral_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplicationReferral_result.class, metaDataMap);
        }

        public addApplicationReferral_result() {
        }

        public addApplicationReferral_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addApplicationReferral_result(addApplicationReferral_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addApplicationReferral_result deepCopy() {
            return new addApplicationReferral_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public addApplicationReferral_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addApplicationReferral_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addApplicationReferral_result)
                return this.equals((addApplicationReferral_result)that);
            return false;
        }

        public boolean equals(addApplicationReferral_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addApplicationReferral_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addApplicationReferral_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addApplicationReferral_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addApplicationReferral_resultStandardScheme getScheme() {
                return new addApplicationReferral_resultStandardScheme();
            }
        }

        private static class addApplicationReferral_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addApplicationReferral_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addApplicationReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addApplicationReferral_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addApplicationReferral_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addApplicationReferral_resultTupleScheme getScheme() {
                return new addApplicationReferral_resultTupleScheme();
            }
        }

        private static class addApplicationReferral_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addApplicationReferral_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addApplicationReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addApplicationReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getApplicationReferral_args implements org.apache.thrift.TBase<getApplicationReferral_args, getApplicationReferral_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationReferral_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationReferral_args");

        private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getApplicationReferral_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getApplicationReferral_argsTupleSchemeFactory();

        public int applicationId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            APPLICATION_ID((short)1, "applicationId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // APPLICATION_ID
                        return APPLICATION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __APPLICATIONID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationReferral_args.class, metaDataMap);
        }

        public getApplicationReferral_args() {
        }

        public getApplicationReferral_args(
                int applicationId)
        {
            this();
            this.applicationId = applicationId;
            setApplicationIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getApplicationReferral_args(getApplicationReferral_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.applicationId = other.applicationId;
        }

        public getApplicationReferral_args deepCopy() {
            return new getApplicationReferral_args(this);
        }

        @Override
        public void clear() {
            setApplicationIdIsSet(false);
            this.applicationId = 0;
        }

        public int getApplicationId() {
            return this.applicationId;
        }

        public getApplicationReferral_args setApplicationId(int applicationId) {
            this.applicationId = applicationId;
            setApplicationIdIsSet(true);
            return this;
        }

        public void unsetApplicationId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
        }

        /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
        public boolean isSetApplicationId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
        }

        public void setApplicationIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPLICATIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case APPLICATION_ID:
                    if (value == null) {
                        unsetApplicationId();
                    } else {
                        setApplicationId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case APPLICATION_ID:
                    return getApplicationId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case APPLICATION_ID:
                    return isSetApplicationId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getApplicationReferral_args)
                return this.equals((getApplicationReferral_args)that);
            return false;
        }

        public boolean equals(getApplicationReferral_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_applicationId = true;
            boolean that_present_applicationId = true;
            if (this_present_applicationId || that_present_applicationId) {
                if (!(this_present_applicationId && that_present_applicationId))
                    return false;
                if (this.applicationId != that.applicationId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + applicationId;

            return hashCode;
        }

        @Override
        public int compareTo(getApplicationReferral_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetApplicationId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getApplicationReferral_args(");
            boolean first = true;

            sb.append("applicationId:");
            sb.append(this.applicationId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getApplicationReferral_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getApplicationReferral_argsStandardScheme getScheme() {
                return new getApplicationReferral_argsStandardScheme();
            }
        }

        private static class getApplicationReferral_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getApplicationReferral_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // APPLICATION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.applicationId = iprot.readI32();
                                struct.setApplicationIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationReferral_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
                oprot.writeI32(struct.applicationId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getApplicationReferral_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getApplicationReferral_argsTupleScheme getScheme() {
                return new getApplicationReferral_argsTupleScheme();
            }
        }

        private static class getApplicationReferral_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getApplicationReferral_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetApplicationId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetApplicationId()) {
                    oprot.writeI32(struct.applicationId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationReferral_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.applicationId = iprot.readI32();
                    struct.setApplicationIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getApplicationReferral_result implements org.apache.thrift.TBase<getApplicationReferral_result, getApplicationReferral_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationReferral_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationReferral_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getApplicationReferral_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getApplicationReferral_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationReferral_result.class, metaDataMap);
        }

        public getApplicationReferral_result() {
        }

        public getApplicationReferral_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getApplicationReferral_result(getApplicationReferral_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getApplicationReferral_result deepCopy() {
            return new getApplicationReferral_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getApplicationReferral_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getApplicationReferral_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getApplicationReferral_result)
                return this.equals((getApplicationReferral_result)that);
            return false;
        }

        public boolean equals(getApplicationReferral_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getApplicationReferral_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getApplicationReferral_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getApplicationReferral_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getApplicationReferral_resultStandardScheme getScheme() {
                return new getApplicationReferral_resultStandardScheme();
            }
        }

        private static class getApplicationReferral_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getApplicationReferral_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationReferral_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getApplicationReferral_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getApplicationReferral_resultTupleScheme getScheme() {
                return new getApplicationReferral_resultTupleScheme();
            }
        }

        private static class getApplicationReferral_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getApplicationReferral_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationReferral_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionLayerInfo_args implements org.apache.thrift.TBase<getPositionLayerInfo_args, getPositionLayerInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionLayerInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionLayerInfo_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionLayerInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionLayerInfo_argsTupleSchemeFactory();

        public int userId; // required
        public int companyId; // required
        public int positionId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            COMPANY_ID((short)2, "companyId"),
            POSITION_ID((short)3, "positionId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __POSITIONID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionLayerInfo_args.class, metaDataMap);
        }

        public getPositionLayerInfo_args() {
        }

        public getPositionLayerInfo_args(
                int userId,
                int companyId,
                int positionId)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionLayerInfo_args(getPositionLayerInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.companyId = other.companyId;
            this.positionId = other.positionId;
        }

        public getPositionLayerInfo_args deepCopy() {
            return new getPositionLayerInfo_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public getPositionLayerInfo_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getPositionLayerInfo_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public getPositionLayerInfo_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case COMPANY_ID:
                    return getCompanyId();

                case POSITION_ID:
                    return getPositionId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case POSITION_ID:
                    return isSetPositionId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionLayerInfo_args)
                return this.equals((getPositionLayerInfo_args)that);
            return false;
        }

        public boolean equals(getPositionLayerInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + positionId;

            return hashCode;
        }

        @Override
        public int compareTo(getPositionLayerInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionLayerInfo_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionLayerInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionLayerInfo_argsStandardScheme getScheme() {
                return new getPositionLayerInfo_argsStandardScheme();
            }
        }

        private static class getPositionLayerInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionLayerInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionLayerInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionLayerInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionLayerInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionLayerInfo_argsTupleScheme getScheme() {
                return new getPositionLayerInfo_argsTupleScheme();
            }
        }

        private static class getPositionLayerInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionLayerInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionLayerInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionLayerInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionLayerInfo_result implements org.apache.thrift.TBase<getPositionLayerInfo_result, getPositionLayerInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionLayerInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionLayerInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionLayerInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionLayerInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionLayerInfo_result.class, metaDataMap);
        }

        public getPositionLayerInfo_result() {
        }

        public getPositionLayerInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionLayerInfo_result(getPositionLayerInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getPositionLayerInfo_result deepCopy() {
            return new getPositionLayerInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPositionLayerInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getPositionLayerInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionLayerInfo_result)
                return this.equals((getPositionLayerInfo_result)that);
            return false;
        }

        public boolean equals(getPositionLayerInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionLayerInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionLayerInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionLayerInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionLayerInfo_resultStandardScheme getScheme() {
                return new getPositionLayerInfo_resultStandardScheme();
            }
        }

        private static class getPositionLayerInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionLayerInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionLayerInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionLayerInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionLayerInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionLayerInfo_resultTupleScheme getScheme() {
                return new getPositionLayerInfo_resultTupleScheme();
            }
        }

        private static class getPositionLayerInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionLayerInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionLayerInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionLayerInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handerElasticLayer_args implements org.apache.thrift.TBase<handerElasticLayer_args, handerElasticLayer_args._Fields>, java.io.Serializable, Cloneable, Comparable<handerElasticLayer_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handerElasticLayer_args");

        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handerElasticLayer_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handerElasticLayer_argsTupleSchemeFactory();

        public int userId; // required
        public int companyId; // required
        public int type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short)1, "userId"),
            COMPANY_ID((short)2, "companyId"),
            TYPE((short)3, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handerElasticLayer_args.class, metaDataMap);
        }

        public handerElasticLayer_args() {
        }

        public handerElasticLayer_args(
                int userId,
                int companyId,
                int type)
        {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.type = type;
            setTypeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handerElasticLayer_args(handerElasticLayer_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            this.companyId = other.companyId;
            this.type = other.type;
        }

        public handerElasticLayer_args deepCopy() {
            return new handerElasticLayer_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setTypeIsSet(false);
            this.type = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public handerElasticLayer_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /** Returns true if field userId is set (has been assigned a value) and false otherwise */
        public boolean isSetUserId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public handerElasticLayer_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public handerElasticLayer_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return getUserId();

                case COMPANY_ID:
                    return getCompanyId();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handerElasticLayer_args)
                return this.equals((handerElasticLayer_args)that);
            return false;
        }

        public boolean equals(handerElasticLayer_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + userId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + type;

            return hashCode;
        }

        @Override
        public int compareTo(handerElasticLayer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handerElasticLayer_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handerElasticLayer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerElasticLayer_argsStandardScheme getScheme() {
                return new handerElasticLayer_argsStandardScheme();
            }
        }

        private static class handerElasticLayer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handerElasticLayer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handerElasticLayer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handerElasticLayer_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handerElasticLayer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerElasticLayer_argsTupleScheme getScheme() {
                return new handerElasticLayer_argsTupleScheme();
            }
        }

        private static class handerElasticLayer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handerElasticLayer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handerElasticLayer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handerElasticLayer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handerElasticLayer_result implements org.apache.thrift.TBase<handerElasticLayer_result, handerElasticLayer_result._Fields>, java.io.Serializable, Cloneable, Comparable<handerElasticLayer_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handerElasticLayer_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handerElasticLayer_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handerElasticLayer_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handerElasticLayer_result.class, metaDataMap);
        }

        public handerElasticLayer_result() {
        }

        public handerElasticLayer_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handerElasticLayer_result(handerElasticLayer_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public handerElasticLayer_result deepCopy() {
            return new handerElasticLayer_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public handerElasticLayer_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public handerElasticLayer_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handerElasticLayer_result)
                return this.equals((handerElasticLayer_result)that);
            return false;
        }

        public boolean equals(handerElasticLayer_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(handerElasticLayer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handerElasticLayer_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handerElasticLayer_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerElasticLayer_resultStandardScheme getScheme() {
                return new handerElasticLayer_resultStandardScheme();
            }
        }

        private static class handerElasticLayer_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handerElasticLayer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handerElasticLayer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handerElasticLayer_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handerElasticLayer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerElasticLayer_resultTupleScheme getScheme() {
                return new handerElasticLayer_resultTupleScheme();
            }
        }

        private static class handerElasticLayer_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handerElasticLayer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handerElasticLayer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handerElasticLayer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
