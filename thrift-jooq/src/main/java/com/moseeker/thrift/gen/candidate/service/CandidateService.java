/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.candidate.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-07")
public class CandidateService {

  public interface Iface {

    public void glancePosition(int userId, int positionId, int shareChainId) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response changeInteresting(int user_id, int position_id, byte is_interested) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void glancePosition(int userId, int positionId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void changeInteresting(int user_id, int position_id, byte is_interested, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void glancePosition(int userId, int positionId, int shareChainId) throws org.apache.thrift.TException
    {
      send_glancePosition(userId, positionId, shareChainId);
      recv_glancePosition();
    }

    public void send_glancePosition(int userId, int positionId, int shareChainId) throws org.apache.thrift.TException
    {
      glancePosition_args args = new glancePosition_args();
      args.setUserId(userId);
      args.setPositionId(positionId);
      args.setShareChainId(shareChainId);
      sendBase("glancePosition", args);
    }

    public void recv_glancePosition() throws org.apache.thrift.TException
    {
      glancePosition_result result = new glancePosition_result();
      receiveBase(result, "glancePosition");
      return;
    }

    public com.moseeker.thrift.gen.common.struct.Response changeInteresting(int user_id, int position_id, byte is_interested) throws org.apache.thrift.TException
    {
      send_changeInteresting(user_id, position_id, is_interested);
      return recv_changeInteresting();
    }

    public void send_changeInteresting(int user_id, int position_id, byte is_interested) throws org.apache.thrift.TException
    {
      changeInteresting_args args = new changeInteresting_args();
      args.setUser_id(user_id);
      args.setPosition_id(position_id);
      args.setIs_interested(is_interested);
      sendBase("changeInteresting", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_changeInteresting() throws org.apache.thrift.TException
    {
      changeInteresting_result result = new changeInteresting_result();
      receiveBase(result, "changeInteresting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeInteresting failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_candidateList(param);
      return recv_candidateList();
    }

    public void send_candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param) throws org.apache.thrift.TException
    {
      candidateList_args args = new candidateList_args();
      args.setParam(param);
      sendBase("candidateList", args);
    }

    public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> recv_candidateList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      candidateList_result result = new candidateList_result();
      receiveBase(result, "candidateList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "candidateList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void glancePosition(int userId, int positionId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      glancePosition_call method_call = new glancePosition_call(userId, positionId, shareChainId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class glancePosition_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int userId;
      private int positionId;
      private int shareChainId;
      public glancePosition_call(int userId, int positionId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.positionId = positionId;
        this.shareChainId = shareChainId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("glancePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        glancePosition_args args = new glancePosition_args();
        args.setUserId(userId);
        args.setPositionId(positionId);
        args.setShareChainId(shareChainId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void changeInteresting(int user_id, int position_id, byte is_interested, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeInteresting_call method_call = new changeInteresting_call(user_id, position_id, is_interested, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeInteresting_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int user_id;
      private int position_id;
      private byte is_interested;
      public changeInteresting_call(int user_id, int position_id, byte is_interested, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_id = user_id;
        this.position_id = position_id;
        this.is_interested = is_interested;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeInteresting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeInteresting_args args = new changeInteresting_args();
        args.setUser_id(user_id);
        args.setPosition_id(position_id);
        args.setIs_interested(is_interested);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeInteresting();
      }
    }

    public void candidateList(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      candidateList_call method_call = new candidateList_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class candidateList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> {
      private com.moseeker.thrift.gen.candidate.struct.CandidateListParam param;
      public candidateList_call(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("candidateList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        candidateList_args args = new candidateList_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_candidateList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("glancePosition", new glancePosition());
      processMap.put("changeInteresting", new changeInteresting());
      processMap.put("candidateList", new candidateList());
      return processMap;
    }

    public static class glancePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, glancePosition_args> {
      public glancePosition() {
        super("glancePosition");
      }

      public glancePosition_args getEmptyArgsInstance() {
        return new glancePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public glancePosition_result getResult(I iface, glancePosition_args args) throws org.apache.thrift.TException {
        glancePosition_result result = new glancePosition_result();
        iface.glancePosition(args.userId, args.positionId, args.shareChainId);
        return result;
      }
    }

    public static class changeInteresting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeInteresting_args> {
      public changeInteresting() {
        super("changeInteresting");
      }

      public changeInteresting_args getEmptyArgsInstance() {
        return new changeInteresting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeInteresting_result getResult(I iface, changeInteresting_args args) throws org.apache.thrift.TException {
        changeInteresting_result result = new changeInteresting_result();
        result.success = iface.changeInteresting(args.user_id, args.position_id, args.is_interested);
        return result;
      }
    }

    public static class candidateList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, candidateList_args> {
      public candidateList() {
        super("candidateList");
      }

      public candidateList_args getEmptyArgsInstance() {
        return new candidateList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public candidateList_result getResult(I iface, candidateList_args args) throws org.apache.thrift.TException {
        candidateList_result result = new candidateList_result();
        try {
          result.success = iface.candidateList(args.param);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("glancePosition", new glancePosition());
      processMap.put("changeInteresting", new changeInteresting());
      processMap.put("candidateList", new candidateList());
      return processMap;
    }

    public static class glancePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, glancePosition_args, Void> {
      public glancePosition() {
        super("glancePosition");
      }

      public glancePosition_args getEmptyArgsInstance() {
        return new glancePosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            glancePosition_result result = new glancePosition_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            glancePosition_result result = new glancePosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, glancePosition_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.glancePosition(args.userId, args.positionId, args.shareChainId,resultHandler);
      }
    }

    public static class changeInteresting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeInteresting_args, com.moseeker.thrift.gen.common.struct.Response> {
      public changeInteresting() {
        super("changeInteresting");
      }

      public changeInteresting_args getEmptyArgsInstance() {
        return new changeInteresting_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            changeInteresting_result result = new changeInteresting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changeInteresting_result result = new changeInteresting_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeInteresting_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.changeInteresting(args.user_id, args.position_id, args.is_interested,resultHandler);
      }
    }

    public static class candidateList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, candidateList_args, java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> {
      public candidateList() {
        super("candidateList");
      }

      public candidateList_args getEmptyArgsInstance() {
        return new candidateList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> o) {
            candidateList_result result = new candidateList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            candidateList_result result = new candidateList_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, candidateList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>> resultHandler) throws org.apache.thrift.TException {
        iface.candidateList(args.param,resultHandler);
      }
    }

  }

  public static class glancePosition_args implements org.apache.thrift.TBase<glancePosition_args, glancePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<glancePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("glancePosition_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SHARE_CHAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shareChainId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new glancePosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new glancePosition_argsTupleSchemeFactory();

    public int userId; // required
    public int positionId; // required
    public int shareChainId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      POSITION_ID((short)2, "positionId"),
      SHARE_CHAIN_ID((short)3, "shareChainId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // POSITION_ID
            return POSITION_ID;
          case 3: // SHARE_CHAIN_ID
            return SHARE_CHAIN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __POSITIONID_ISSET_ID = 1;
    private static final int __SHARECHAINID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SHARE_CHAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("shareChainId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(glancePosition_args.class, metaDataMap);
    }

    public glancePosition_args() {
    }

    public glancePosition_args(
      int userId,
      int positionId,
      int shareChainId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.positionId = positionId;
      setPositionIdIsSet(true);
      this.shareChainId = shareChainId;
      setShareChainIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public glancePosition_args(glancePosition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.positionId = other.positionId;
      this.shareChainId = other.shareChainId;
    }

    public glancePosition_args deepCopy() {
      return new glancePosition_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setPositionIdIsSet(false);
      this.positionId = 0;
      setShareChainIdIsSet(false);
      this.shareChainId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public glancePosition_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getPositionId() {
      return this.positionId;
    }

    public glancePosition_args setPositionId(int positionId) {
      this.positionId = positionId;
      setPositionIdIsSet(true);
      return this;
    }

    public void unsetPositionId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    public void setPositionIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
    }

    public int getShareChainId() {
      return this.shareChainId;
    }

    public glancePosition_args setShareChainId(int shareChainId) {
      this.shareChainId = shareChainId;
      setShareChainIdIsSet(true);
      return this;
    }

    public void unsetShareChainId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARECHAINID_ISSET_ID);
    }

    /** Returns true if field shareChainId is set (has been assigned a value) and false otherwise */
    public boolean isSetShareChainId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARECHAINID_ISSET_ID);
    }

    public void setShareChainIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARECHAINID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case POSITION_ID:
        if (value == null) {
          unsetPositionId();
        } else {
          setPositionId((java.lang.Integer)value);
        }
        break;

      case SHARE_CHAIN_ID:
        if (value == null) {
          unsetShareChainId();
        } else {
          setShareChainId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case POSITION_ID:
        return getPositionId();

      case SHARE_CHAIN_ID:
        return getShareChainId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case POSITION_ID:
        return isSetPositionId();
      case SHARE_CHAIN_ID:
        return isSetShareChainId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof glancePosition_args)
        return this.equals((glancePosition_args)that);
      return false;
    }

    public boolean equals(glancePosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_positionId = true;
      boolean that_present_positionId = true;
      if (this_present_positionId || that_present_positionId) {
        if (!(this_present_positionId && that_present_positionId))
          return false;
        if (this.positionId != that.positionId)
          return false;
      }

      boolean this_present_shareChainId = true;
      boolean that_present_shareChainId = true;
      if (this_present_shareChainId || that_present_shareChainId) {
        if (!(this_present_shareChainId && that_present_shareChainId))
          return false;
        if (this.shareChainId != that.shareChainId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + positionId;

      hashCode = hashCode * 8191 + shareChainId;

      return hashCode;
    }

    @Override
    public int compareTo(glancePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetShareChainId()).compareTo(other.isSetShareChainId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShareChainId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareChainId, other.shareChainId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("glancePosition_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shareChainId:");
      sb.append(this.shareChainId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class glancePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public glancePosition_argsStandardScheme getScheme() {
        return new glancePosition_argsStandardScheme();
      }
    }

    private static class glancePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<glancePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, glancePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.positionId = iprot.readI32();
                struct.setPositionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARE_CHAIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shareChainId = iprot.readI32();
                struct.setShareChainIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, glancePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SHARE_CHAIN_ID_FIELD_DESC);
        oprot.writeI32(struct.shareChainId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class glancePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public glancePosition_argsTupleScheme getScheme() {
        return new glancePosition_argsTupleScheme();
      }
    }

    private static class glancePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<glancePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, glancePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetPositionId()) {
          optionals.set(1);
        }
        if (struct.isSetShareChainId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetPositionId()) {
          oprot.writeI32(struct.positionId);
        }
        if (struct.isSetShareChainId()) {
          oprot.writeI32(struct.shareChainId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, glancePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.positionId = iprot.readI32();
          struct.setPositionIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shareChainId = iprot.readI32();
          struct.setShareChainIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class glancePosition_result implements org.apache.thrift.TBase<glancePosition_result, glancePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<glancePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("glancePosition_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new glancePosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new glancePosition_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(glancePosition_result.class, metaDataMap);
    }

    public glancePosition_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public glancePosition_result(glancePosition_result other) {
    }

    public glancePosition_result deepCopy() {
      return new glancePosition_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof glancePosition_result)
        return this.equals((glancePosition_result)that);
      return false;
    }

    public boolean equals(glancePosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(glancePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("glancePosition_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class glancePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public glancePosition_resultStandardScheme getScheme() {
        return new glancePosition_resultStandardScheme();
      }
    }

    private static class glancePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<glancePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, glancePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, glancePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class glancePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public glancePosition_resultTupleScheme getScheme() {
        return new glancePosition_resultTupleScheme();
      }
    }

    private static class glancePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<glancePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, glancePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, glancePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeInteresting_args implements org.apache.thrift.TBase<changeInteresting_args, changeInteresting_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeInteresting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeInteresting_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("position_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField IS_INTERESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_interested", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeInteresting_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeInteresting_argsTupleSchemeFactory();

    public int user_id; // required
    public int position_id; // required
    public byte is_interested; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "user_id"),
      POSITION_ID((short)2, "position_id"),
      IS_INTERESTED((short)3, "is_interested");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // POSITION_ID
            return POSITION_ID;
          case 3: // IS_INTERESTED
            return IS_INTERESTED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ID_ISSET_ID = 0;
    private static final int __POSITION_ID_ISSET_ID = 1;
    private static final int __IS_INTERESTED_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("position_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_INTERESTED, new org.apache.thrift.meta_data.FieldMetaData("is_interested", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeInteresting_args.class, metaDataMap);
    }

    public changeInteresting_args() {
    }

    public changeInteresting_args(
      int user_id,
      int position_id,
      byte is_interested)
    {
      this();
      this.user_id = user_id;
      setUser_idIsSet(true);
      this.position_id = position_id;
      setPosition_idIsSet(true);
      this.is_interested = is_interested;
      setIs_interestedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeInteresting_args(changeInteresting_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user_id = other.user_id;
      this.position_id = other.position_id;
      this.is_interested = other.is_interested;
    }

    public changeInteresting_args deepCopy() {
      return new changeInteresting_args(this);
    }

    @Override
    public void clear() {
      setUser_idIsSet(false);
      this.user_id = 0;
      setPosition_idIsSet(false);
      this.position_id = 0;
      setIs_interestedIsSet(false);
      this.is_interested = 0;
    }

    public int getUser_id() {
      return this.user_id;
    }

    public changeInteresting_args setUser_id(int user_id) {
      this.user_id = user_id;
      setUser_idIsSet(true);
      return this;
    }

    public void unsetUser_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    public void setUser_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
    }

    public int getPosition_id() {
      return this.position_id;
    }

    public changeInteresting_args setPosition_id(int position_id) {
      this.position_id = position_id;
      setPosition_idIsSet(true);
      return this;
    }

    public void unsetPosition_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
    }

    /** Returns true if field position_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
    }

    public void setPosition_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_ID_ISSET_ID, value);
    }

    public byte getIs_interested() {
      return this.is_interested;
    }

    public changeInteresting_args setIs_interested(byte is_interested) {
      this.is_interested = is_interested;
      setIs_interestedIsSet(true);
      return this;
    }

    public void unsetIs_interested() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_INTERESTED_ISSET_ID);
    }

    /** Returns true if field is_interested is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_interested() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_INTERESTED_ISSET_ID);
    }

    public void setIs_interestedIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_INTERESTED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((java.lang.Integer)value);
        }
        break;

      case POSITION_ID:
        if (value == null) {
          unsetPosition_id();
        } else {
          setPosition_id((java.lang.Integer)value);
        }
        break;

      case IS_INTERESTED:
        if (value == null) {
          unsetIs_interested();
        } else {
          setIs_interested((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUser_id();

      case POSITION_ID:
        return getPosition_id();

      case IS_INTERESTED:
        return getIs_interested();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUser_id();
      case POSITION_ID:
        return isSetPosition_id();
      case IS_INTERESTED:
        return isSetIs_interested();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changeInteresting_args)
        return this.equals((changeInteresting_args)that);
      return false;
    }

    public boolean equals(changeInteresting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_user_id = true;
      boolean that_present_user_id = true;
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (this.user_id != that.user_id)
          return false;
      }

      boolean this_present_position_id = true;
      boolean that_present_position_id = true;
      if (this_present_position_id || that_present_position_id) {
        if (!(this_present_position_id && that_present_position_id))
          return false;
        if (this.position_id != that.position_id)
          return false;
      }

      boolean this_present_is_interested = true;
      boolean that_present_is_interested = true;
      if (this_present_is_interested || that_present_is_interested) {
        if (!(this_present_is_interested && that_present_is_interested))
          return false;
        if (this.is_interested != that.is_interested)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + user_id;

      hashCode = hashCode * 8191 + position_id;

      hashCode = hashCode * 8191 + (int) (is_interested);

      return hashCode;
    }

    @Override
    public int compareTo(changeInteresting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPosition_id()).compareTo(other.isSetPosition_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_id, other.position_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIs_interested()).compareTo(other.isSetIs_interested());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_interested()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_interested, other.is_interested);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changeInteresting_args(");
      boolean first = true;

      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("position_id:");
      sb.append(this.position_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_interested:");
      sb.append(this.is_interested);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeInteresting_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeInteresting_argsStandardScheme getScheme() {
        return new changeInteresting_argsStandardScheme();
      }
    }

    private static class changeInteresting_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeInteresting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeInteresting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user_id = iprot.readI32();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position_id = iprot.readI32();
                struct.setPosition_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_INTERESTED
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.is_interested = iprot.readByte();
                struct.setIs_interestedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeInteresting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.position_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_INTERESTED_FIELD_DESC);
        oprot.writeByte(struct.is_interested);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeInteresting_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeInteresting_argsTupleScheme getScheme() {
        return new changeInteresting_argsTupleScheme();
      }
    }

    private static class changeInteresting_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeInteresting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeInteresting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUser_id()) {
          optionals.set(0);
        }
        if (struct.isSetPosition_id()) {
          optionals.set(1);
        }
        if (struct.isSetIs_interested()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_id()) {
          oprot.writeI32(struct.user_id);
        }
        if (struct.isSetPosition_id()) {
          oprot.writeI32(struct.position_id);
        }
        if (struct.isSetIs_interested()) {
          oprot.writeByte(struct.is_interested);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeInteresting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_id = iprot.readI32();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.position_id = iprot.readI32();
          struct.setPosition_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.is_interested = iprot.readByte();
          struct.setIs_interestedIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeInteresting_result implements org.apache.thrift.TBase<changeInteresting_result, changeInteresting_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeInteresting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeInteresting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeInteresting_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeInteresting_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeInteresting_result.class, metaDataMap);
    }

    public changeInteresting_result() {
    }

    public changeInteresting_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeInteresting_result(changeInteresting_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public changeInteresting_result deepCopy() {
      return new changeInteresting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public changeInteresting_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changeInteresting_result)
        return this.equals((changeInteresting_result)that);
      return false;
    }

    public boolean equals(changeInteresting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changeInteresting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changeInteresting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeInteresting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeInteresting_resultStandardScheme getScheme() {
        return new changeInteresting_resultStandardScheme();
      }
    }

    private static class changeInteresting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeInteresting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeInteresting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeInteresting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeInteresting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeInteresting_resultTupleScheme getScheme() {
        return new changeInteresting_resultTupleScheme();
      }
    }

    private static class changeInteresting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeInteresting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeInteresting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeInteresting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class candidateList_args implements org.apache.thrift.TBase<candidateList_args, candidateList_args._Fields>, java.io.Serializable, Cloneable, Comparable<candidateList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("candidateList_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new candidateList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new candidateList_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.candidate.struct.CandidateListParam param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.CandidateListParam.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(candidateList_args.class, metaDataMap);
    }

    public candidateList_args() {
    }

    public candidateList_args(
      com.moseeker.thrift.gen.candidate.struct.CandidateListParam param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public candidateList_args(candidateList_args other) {
      if (other.isSetParam()) {
        this.param = new com.moseeker.thrift.gen.candidate.struct.CandidateListParam(other.param);
      }
    }

    public candidateList_args deepCopy() {
      return new candidateList_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public com.moseeker.thrift.gen.candidate.struct.CandidateListParam getParam() {
      return this.param;
    }

    public candidateList_args setParam(com.moseeker.thrift.gen.candidate.struct.CandidateListParam param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((com.moseeker.thrift.gen.candidate.struct.CandidateListParam)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof candidateList_args)
        return this.equals((candidateList_args)that);
      return false;
    }

    public boolean equals(candidateList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetParam()) ? 131071 : 524287);
      if (isSetParam())
        hashCode = hashCode * 8191 + param.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(candidateList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("candidateList_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (param != null) {
        param.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class candidateList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public candidateList_argsStandardScheme getScheme() {
        return new candidateList_argsStandardScheme();
      }
    }

    private static class candidateList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<candidateList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, candidateList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.param = new com.moseeker.thrift.gen.candidate.struct.CandidateListParam();
                struct.param.read(iprot);
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, candidateList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          struct.param.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class candidateList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public candidateList_argsTupleScheme getScheme() {
        return new candidateList_argsTupleScheme();
      }
    }

    private static class candidateList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<candidateList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, candidateList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          struct.param.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, candidateList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.param = new com.moseeker.thrift.gen.candidate.struct.CandidateListParam();
          struct.param.read(iprot);
          struct.setParamIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class candidateList_result implements org.apache.thrift.TBase<candidateList_result, candidateList_result._Fields>, java.io.Serializable, Cloneable, Comparable<candidateList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("candidateList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new candidateList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new candidateList_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.candidate.struct.CandidateList.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(candidateList_result.class, metaDataMap);
    }

    public candidateList_result() {
    }

    public candidateList_result(
      java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public candidateList_result(candidateList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.candidate.struct.CandidateList>(other.success.size());
        for (com.moseeker.thrift.gen.candidate.struct.CandidateList other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.candidate.struct.CandidateList(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public candidateList_result deepCopy() {
      return new candidateList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.candidate.struct.CandidateList> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.candidate.struct.CandidateList elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.candidate.struct.CandidateList>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> getSuccess() {
      return this.success;
    }

    public candidateList_result setSuccess(java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public candidateList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.candidate.struct.CandidateList>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof candidateList_result)
        return this.equals((candidateList_result)that);
      return false;
    }

    public boolean equals(candidateList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(candidateList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("candidateList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class candidateList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public candidateList_resultStandardScheme getScheme() {
        return new candidateList_resultStandardScheme();
      }
    }

    private static class candidateList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<candidateList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, candidateList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.candidate.struct.CandidateList>(_list0.size);
                  com.moseeker.thrift.gen.candidate.struct.CandidateList _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.moseeker.thrift.gen.candidate.struct.CandidateList();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, candidateList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.candidate.struct.CandidateList _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class candidateList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public candidateList_resultTupleScheme getScheme() {
        return new candidateList_resultTupleScheme();
      }
    }

    private static class candidateList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<candidateList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, candidateList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.candidate.struct.CandidateList _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, candidateList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.candidate.struct.CandidateList>(_list5.size);
            com.moseeker.thrift.gen.candidate.struct.CandidateList _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.moseeker.thrift.gen.candidate.struct.CandidateList();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
