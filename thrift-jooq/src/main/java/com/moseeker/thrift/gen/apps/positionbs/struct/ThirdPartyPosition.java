/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.apps.positionbs.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-22")
public class ThirdPartyPosition implements org.apache.thrift.TBase<ThirdPartyPosition, ThirdPartyPosition._Fields>, java.io.Serializable, Cloneable, Comparable<ThirdPartyPosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThridPartyPosition");

  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_top", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_bottom", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USE_COMPANY_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("use_company_address", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField OCCUPATION_LEVEL1_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation_level1", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OCCUPATION_LEVEL2_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation_level2", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.BYTE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThridPartyPositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThridPartyPositionTupleSchemeFactory());
  }

  public int salary_top; // optional
  public int salary_bottom; // optional
  public int count; // optional
  public String address; // optional
  public boolean use_company_address; // optional
  public String occupation_level1; // optional
  public String occupation_level2; // optional
  public byte channel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SALARY_TOP((short)1, "salary_top"),
    SALARY_BOTTOM((short)2, "salary_bottom"),
    COUNT((short)3, "count"),
    ADDRESS((short)4, "address"),
    USE_COMPANY_ADDRESS((short)5, "use_company_address"),
    OCCUPATION_LEVEL1((short)6, "occupation_level1"),
    OCCUPATION_LEVEL2((short)7, "occupation_level2"),
    CHANNEL((short)8, "channel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SALARY_TOP
          return SALARY_TOP;
        case 2: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 3: // COUNT
          return COUNT;
        case 4: // ADDRESS
          return ADDRESS;
        case 5: // USE_COMPANY_ADDRESS
          return USE_COMPANY_ADDRESS;
        case 6: // OCCUPATION_LEVEL1
          return OCCUPATION_LEVEL1;
        case 7: // OCCUPATION_LEVEL2
          return OCCUPATION_LEVEL2;
        case 8: // CHANNEL
          return CHANNEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SALARY_TOP_ISSET_ID = 0;
  private static final int __SALARY_BOTTOM_ISSET_ID = 1;
  private static final int __COUNT_ISSET_ID = 2;
  private static final int __USE_COMPANY_ADDRESS_ISSET_ID = 3;
  private static final int __CHANNEL_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SALARY_TOP,_Fields.SALARY_BOTTOM,_Fields.COUNT,_Fields.ADDRESS,_Fields.USE_COMPANY_ADDRESS,_Fields.OCCUPATION_LEVEL1,_Fields.OCCUPATION_LEVEL2,_Fields.CHANNEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salary_top", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salary_bottom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_COMPANY_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("use_company_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OCCUPATION_LEVEL1, new org.apache.thrift.meta_data.FieldMetaData("occupation_level1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCUPATION_LEVEL2, new org.apache.thrift.meta_data.FieldMetaData("occupation_level2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThirdPartyPosition.class, metaDataMap);
  }

  public ThirdPartyPosition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThirdPartyPosition(ThirdPartyPosition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.salary_top = other.salary_top;
    this.salary_bottom = other.salary_bottom;
    this.count = other.count;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    this.use_company_address = other.use_company_address;
    if (other.isSetOccupation_level1()) {
      this.occupation_level1 = other.occupation_level1;
    }
    if (other.isSetOccupation_level2()) {
      this.occupation_level2 = other.occupation_level2;
    }
    this.channel = other.channel;
  }

  public ThirdPartyPosition deepCopy() {
    return new ThirdPartyPosition(this);
  }

  @Override
  public void clear() {
    setSalary_topIsSet(false);
    this.salary_top = 0;
    setSalary_bottomIsSet(false);
    this.salary_bottom = 0;
    setCountIsSet(false);
    this.count = 0;
    this.address = null;
    setUse_company_addressIsSet(false);
    this.use_company_address = false;
    this.occupation_level1 = null;
    this.occupation_level2 = null;
    setChannelIsSet(false);
    this.channel = 0;
  }

  public int getSalary_top() {
    return this.salary_top;
  }

  public ThirdPartyPosition setSalary_top(int salary_top) {
    this.salary_top = salary_top;
    setSalary_topIsSet(true);
    return this;
  }

  public void unsetSalary_top() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  /** Returns true if field salary_top is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_top() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  public void setSalary_topIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_TOP_ISSET_ID, value);
  }

  public int getSalary_bottom() {
    return this.salary_bottom;
  }

  public ThirdPartyPosition setSalary_bottom(int salary_bottom) {
    this.salary_bottom = salary_bottom;
    setSalary_bottomIsSet(true);
    return this;
  }

  public void unsetSalary_bottom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  /** Returns true if field salary_bottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_bottom() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  public void setSalary_bottomIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public ThirdPartyPosition setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public String getAddress() {
    return this.address;
  }

  public ThirdPartyPosition setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public boolean isUse_company_address() {
    return this.use_company_address;
  }

  public ThirdPartyPosition setUse_company_address(boolean use_company_address) {
    this.use_company_address = use_company_address;
    setUse_company_addressIsSet(true);
    return this;
  }

  public void unsetUse_company_address() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_COMPANY_ADDRESS_ISSET_ID);
  }

  /** Returns true if field use_company_address is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_company_address() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_COMPANY_ADDRESS_ISSET_ID);
  }

  public void setUse_company_addressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_COMPANY_ADDRESS_ISSET_ID, value);
  }

  public String getOccupation_level1() {
    return this.occupation_level1;
  }

  public ThirdPartyPosition setOccupation_level1(String occupation_level1) {
    this.occupation_level1 = occupation_level1;
    return this;
  }

  public void unsetOccupation_level1() {
    this.occupation_level1 = null;
  }

  /** Returns true if field occupation_level1 is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation_level1() {
    return this.occupation_level1 != null;
  }

  public void setOccupation_level1IsSet(boolean value) {
    if (!value) {
      this.occupation_level1 = null;
    }
  }

  public String getOccupation_level2() {
    return this.occupation_level2;
  }

  public ThirdPartyPosition setOccupation_level2(String occupation_level2) {
    this.occupation_level2 = occupation_level2;
    return this;
  }

  public void unsetOccupation_level2() {
    this.occupation_level2 = null;
  }

  /** Returns true if field occupation_level2 is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation_level2() {
    return this.occupation_level2 != null;
  }

  public void setOccupation_level2IsSet(boolean value) {
    if (!value) {
      this.occupation_level2 = null;
    }
  }

  public byte getChannel() {
    return this.channel;
  }

  public ThirdPartyPosition setChannel(byte channel) {
    this.channel = channel;
    setChannelIsSet(true);
    return this;
  }

  public void unsetChannel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  public void setChannelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SALARY_TOP:
      if (value == null) {
        unsetSalary_top();
      } else {
        setSalary_top((Integer)value);
      }
      break;

    case SALARY_BOTTOM:
      if (value == null) {
        unsetSalary_bottom();
      } else {
        setSalary_bottom((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case USE_COMPANY_ADDRESS:
      if (value == null) {
        unsetUse_company_address();
      } else {
        setUse_company_address((Boolean)value);
      }
      break;

    case OCCUPATION_LEVEL1:
      if (value == null) {
        unsetOccupation_level1();
      } else {
        setOccupation_level1((String)value);
      }
      break;

    case OCCUPATION_LEVEL2:
      if (value == null) {
        unsetOccupation_level2();
      } else {
        setOccupation_level2((String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SALARY_TOP:
      return Integer.valueOf(getSalary_top());

    case SALARY_BOTTOM:
      return Integer.valueOf(getSalary_bottom());

    case COUNT:
      return Integer.valueOf(getCount());

    case ADDRESS:
      return getAddress();

    case USE_COMPANY_ADDRESS:
      return Boolean.valueOf(isUse_company_address());

    case OCCUPATION_LEVEL1:
      return getOccupation_level1();

    case OCCUPATION_LEVEL2:
      return getOccupation_level2();

    case CHANNEL:
      return Byte.valueOf(getChannel());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SALARY_TOP:
      return isSetSalary_top();
    case SALARY_BOTTOM:
      return isSetSalary_bottom();
    case COUNT:
      return isSetCount();
    case ADDRESS:
      return isSetAddress();
    case USE_COMPANY_ADDRESS:
      return isSetUse_company_address();
    case OCCUPATION_LEVEL1:
      return isSetOccupation_level1();
    case OCCUPATION_LEVEL2:
      return isSetOccupation_level2();
    case CHANNEL:
      return isSetChannel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThirdPartyPosition)
      return this.equals((ThirdPartyPosition)that);
    return false;
  }

  public boolean equals(ThirdPartyPosition that) {
    if (that == null)
      return false;

    boolean this_present_salary_top = true && this.isSetSalary_top();
    boolean that_present_salary_top = true && that.isSetSalary_top();
    if (this_present_salary_top || that_present_salary_top) {
      if (!(this_present_salary_top && that_present_salary_top))
        return false;
      if (this.salary_top != that.salary_top)
        return false;
    }

    boolean this_present_salary_bottom = true && this.isSetSalary_bottom();
    boolean that_present_salary_bottom = true && that.isSetSalary_bottom();
    if (this_present_salary_bottom || that_present_salary_bottom) {
      if (!(this_present_salary_bottom && that_present_salary_bottom))
        return false;
      if (this.salary_bottom != that.salary_bottom)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_use_company_address = true && this.isSetUse_company_address();
    boolean that_present_use_company_address = true && that.isSetUse_company_address();
    if (this_present_use_company_address || that_present_use_company_address) {
      if (!(this_present_use_company_address && that_present_use_company_address))
        return false;
      if (this.use_company_address != that.use_company_address)
        return false;
    }

    boolean this_present_occupation_level1 = true && this.isSetOccupation_level1();
    boolean that_present_occupation_level1 = true && that.isSetOccupation_level1();
    if (this_present_occupation_level1 || that_present_occupation_level1) {
      if (!(this_present_occupation_level1 && that_present_occupation_level1))
        return false;
      if (!this.occupation_level1.equals(that.occupation_level1))
        return false;
    }

    boolean this_present_occupation_level2 = true && this.isSetOccupation_level2();
    boolean that_present_occupation_level2 = true && that.isSetOccupation_level2();
    if (this_present_occupation_level2 || that_present_occupation_level2) {
      if (!(this_present_occupation_level2 && that_present_occupation_level2))
        return false;
      if (!this.occupation_level2.equals(that.occupation_level2))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (this.channel != that.channel)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_salary_top = true && (isSetSalary_top());
    list.add(present_salary_top);
    if (present_salary_top)
      list.add(salary_top);

    boolean present_salary_bottom = true && (isSetSalary_bottom());
    list.add(present_salary_bottom);
    if (present_salary_bottom)
      list.add(salary_bottom);

    boolean present_count = true && (isSetCount());
    list.add(present_count);
    if (present_count)
      list.add(count);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_use_company_address = true && (isSetUse_company_address());
    list.add(present_use_company_address);
    if (present_use_company_address)
      list.add(use_company_address);

    boolean present_occupation_level1 = true && (isSetOccupation_level1());
    list.add(present_occupation_level1);
    if (present_occupation_level1)
      list.add(occupation_level1);

    boolean present_occupation_level2 = true && (isSetOccupation_level2());
    list.add(present_occupation_level2);
    if (present_occupation_level2)
      list.add(occupation_level2);

    boolean present_channel = true && (isSetChannel());
    list.add(present_channel);
    if (present_channel)
      list.add(channel);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThirdPartyPosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSalary_top()).compareTo(other.isSetSalary_top());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_top()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_top, other.salary_top);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_bottom()).compareTo(other.isSetSalary_bottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_bottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_bottom, other.salary_bottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_company_address()).compareTo(other.isSetUse_company_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_company_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_company_address, other.use_company_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation_level1()).compareTo(other.isSetOccupation_level1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation_level1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation_level1, other.occupation_level1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation_level2()).compareTo(other.isSetOccupation_level2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation_level2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation_level2, other.occupation_level2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThridPartyPosition(");
    boolean first = true;

    if (isSetSalary_top()) {
      sb.append("salary_top:");
      sb.append(this.salary_top);
      first = false;
    }
    if (isSetSalary_bottom()) {
      if (!first) sb.append(", ");
      sb.append("salary_bottom:");
      sb.append(this.salary_bottom);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetUse_company_address()) {
      if (!first) sb.append(", ");
      sb.append("use_company_address:");
      sb.append(this.use_company_address);
      first = false;
    }
    if (isSetOccupation_level1()) {
      if (!first) sb.append(", ");
      sb.append("occupation_level1:");
      if (this.occupation_level1 == null) {
        sb.append("null");
      } else {
        sb.append(this.occupation_level1);
      }
      first = false;
    }
    if (isSetOccupation_level2()) {
      if (!first) sb.append(", ");
      sb.append("occupation_level2:");
      if (this.occupation_level2 == null) {
        sb.append("null");
      } else {
        sb.append(this.occupation_level2);
      }
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThridPartyPositionStandardSchemeFactory implements SchemeFactory {
    public ThridPartyPositionStandardScheme getScheme() {
      return new ThridPartyPositionStandardScheme();
    }
  }

  private static class ThridPartyPositionStandardScheme extends StandardScheme<ThirdPartyPosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThirdPartyPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_top = iprot.readI32();
              struct.setSalary_topIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_bottom = iprot.readI32();
              struct.setSalary_bottomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USE_COMPANY_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_company_address = iprot.readBool();
              struct.setUse_company_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OCCUPATION_LEVEL1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation_level1 = iprot.readString();
              struct.setOccupation_level1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OCCUPATION_LEVEL2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation_level2 = iprot.readString();
              struct.setOccupation_level2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.channel = iprot.readByte();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThirdPartyPosition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSalary_top()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeI32(struct.salary_top);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeI32(struct.salary_bottom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_company_address()) {
        oprot.writeFieldBegin(USE_COMPANY_ADDRESS_FIELD_DESC);
        oprot.writeBool(struct.use_company_address);
        oprot.writeFieldEnd();
      }
      if (struct.occupation_level1 != null) {
        if (struct.isSetOccupation_level1()) {
          oprot.writeFieldBegin(OCCUPATION_LEVEL1_FIELD_DESC);
          oprot.writeString(struct.occupation_level1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.occupation_level2 != null) {
        if (struct.isSetOccupation_level2()) {
          oprot.writeFieldBegin(OCCUPATION_LEVEL2_FIELD_DESC);
          oprot.writeString(struct.occupation_level2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChannel()) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeByte(struct.channel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThridPartyPositionTupleSchemeFactory implements SchemeFactory {
    public ThridPartyPositionTupleScheme getScheme() {
      return new ThridPartyPositionTupleScheme();
    }
  }

  private static class ThridPartyPositionTupleScheme extends TupleScheme<ThirdPartyPosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThirdPartyPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSalary_top()) {
        optionals.set(0);
      }
      if (struct.isSetSalary_bottom()) {
        optionals.set(1);
      }
      if (struct.isSetCount()) {
        optionals.set(2);
      }
      if (struct.isSetAddress()) {
        optionals.set(3);
      }
      if (struct.isSetUse_company_address()) {
        optionals.set(4);
      }
      if (struct.isSetOccupation_level1()) {
        optionals.set(5);
      }
      if (struct.isSetOccupation_level2()) {
        optionals.set(6);
      }
      if (struct.isSetChannel()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSalary_top()) {
        oprot.writeI32(struct.salary_top);
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeI32(struct.salary_bottom);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetUse_company_address()) {
        oprot.writeBool(struct.use_company_address);
      }
      if (struct.isSetOccupation_level1()) {
        oprot.writeString(struct.occupation_level1);
      }
      if (struct.isSetOccupation_level2()) {
        oprot.writeString(struct.occupation_level2);
      }
      if (struct.isSetChannel()) {
        oprot.writeByte(struct.channel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThirdPartyPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.salary_top = iprot.readI32();
        struct.setSalary_topIsSet(true);
      }
      if (incoming.get(1)) {
        struct.salary_bottom = iprot.readI32();
        struct.setSalary_bottomIsSet(true);
      }
      if (incoming.get(2)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.use_company_address = iprot.readBool();
        struct.setUse_company_addressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.occupation_level1 = iprot.readString();
        struct.setOccupation_level1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.occupation_level2 = iprot.readString();
        struct.setOccupation_level2IsSet(true);
      }
      if (incoming.get(7)) {
        struct.channel = iprot.readByte();
        struct.setChannelIsSet(true);
      }
    }
  }

}

