/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.apps.positionbs.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-11")
public class ThirdPartyPosition implements org.apache.thrift.TBase<ThirdPartyPosition, ThirdPartyPosition._Fields>, java.io.Serializable, Cloneable, Comparable<ThirdPartyPosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThirdPartyPosition");

  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryTop", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryBottom", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SALARY_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryMonth", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField USE_COMPANY_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("useCompanyAddress", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField OCCUPATION_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyAccountId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField FEEDBACK_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("feedbackPeriod", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SALARY_DISCUSS_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryDiscuss", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField PRACTICE_SALARY_FIELD_DESC = new org.apache.thrift.protocol.TField("practiceSalary", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PRACTICE_PER_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("practicePerWeek", org.apache.thrift.protocol.TType.BYTE, (short)12);
  private static final org.apache.thrift.protocol.TField PRACTICE_SALARY_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("practiceSalaryUnit", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ADDRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addressId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ADDRESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("addressName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThirdPartyPositionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThirdPartyPositionTupleSchemeFactory();

  public int salaryTop; // optional
  public int salaryBottom; // optional
  public int salaryMonth; // optional
  public int count; // optional
  public boolean useCompanyAddress; // optional
  public java.util.List<String> occupation; // optional
  public int channel; // optional
  public int thirdPartyAccountId; // optional
  public int feedbackPeriod; // optional
  public boolean salaryDiscuss; // optional
  public int practiceSalary; // optional
  public byte practicePerWeek; // optional
  public byte practiceSalaryUnit; // optional
  public int departmentId; // optional
  public String departmentName; // optional
  public int companyId; // optional
  public String companyName; // optional
  public int addressId; // optional
  public String addressName; // optional
  public java.util.List<String> feature; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SALARY_TOP((short)1, "salaryTop"),
    SALARY_BOTTOM((short)2, "salaryBottom"),
    SALARY_MONTH((short)3, "salaryMonth"),
    COUNT((short)4, "count"),
    USE_COMPANY_ADDRESS((short)5, "useCompanyAddress"),
    OCCUPATION((short)6, "occupation"),
    CHANNEL((short)7, "channel"),
    THIRD_PARTY_ACCOUNT_ID((short)8, "thirdPartyAccountId"),
    FEEDBACK_PERIOD((short)9, "feedbackPeriod"),
    SALARY_DISCUSS((short)10, "salaryDiscuss"),
    PRACTICE_SALARY((short)11, "practiceSalary"),
    PRACTICE_PER_WEEK((short)12, "practicePerWeek"),
    PRACTICE_SALARY_UNIT((short)13, "practiceSalaryUnit"),
    DEPARTMENT_ID((short)14, "departmentId"),
    DEPARTMENT_NAME((short)15, "departmentName"),
    COMPANY_ID((short)16, "companyId"),
    COMPANY_NAME((short)17, "companyName"),
    ADDRESS_ID((short)18, "addressId"),
    ADDRESS_NAME((short)19, "addressName"),
    FEATURE((short)20, "feature");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SALARY_TOP
          return SALARY_TOP;
        case 2: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 3: // SALARY_MONTH
          return SALARY_MONTH;
        case 4: // COUNT
          return COUNT;
        case 5: // USE_COMPANY_ADDRESS
          return USE_COMPANY_ADDRESS;
        case 6: // OCCUPATION
          return OCCUPATION;
        case 7: // CHANNEL
          return CHANNEL;
        case 8: // THIRD_PARTY_ACCOUNT_ID
          return THIRD_PARTY_ACCOUNT_ID;
        case 9: // FEEDBACK_PERIOD
          return FEEDBACK_PERIOD;
        case 10: // SALARY_DISCUSS
          return SALARY_DISCUSS;
        case 11: // PRACTICE_SALARY
          return PRACTICE_SALARY;
        case 12: // PRACTICE_PER_WEEK
          return PRACTICE_PER_WEEK;
        case 13: // PRACTICE_SALARY_UNIT
          return PRACTICE_SALARY_UNIT;
        case 14: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 15: // DEPARTMENT_NAME
          return DEPARTMENT_NAME;
        case 16: // COMPANY_ID
          return COMPANY_ID;
        case 17: // COMPANY_NAME
          return COMPANY_NAME;
        case 18: // ADDRESS_ID
          return ADDRESS_ID;
        case 19: // ADDRESS_NAME
          return ADDRESS_NAME;
        case 20: // FEATURE
          return FEATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SALARYTOP_ISSET_ID = 0;
  private static final int __SALARYBOTTOM_ISSET_ID = 1;
  private static final int __SALARYMONTH_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private static final int __USECOMPANYADDRESS_ISSET_ID = 4;
  private static final int __CHANNEL_ISSET_ID = 5;
  private static final int __THIRDPARTYACCOUNTID_ISSET_ID = 6;
  private static final int __FEEDBACKPERIOD_ISSET_ID = 7;
  private static final int __SALARYDISCUSS_ISSET_ID = 8;
  private static final int __PRACTICESALARY_ISSET_ID = 9;
  private static final int __PRACTICEPERWEEK_ISSET_ID = 10;
  private static final int __PRACTICESALARYUNIT_ISSET_ID = 11;
  private static final int __DEPARTMENTID_ISSET_ID = 12;
  private static final int __COMPANYID_ISSET_ID = 13;
  private static final int __ADDRESSID_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SALARY_TOP,_Fields.SALARY_BOTTOM,_Fields.SALARY_MONTH,_Fields.COUNT,_Fields.USE_COMPANY_ADDRESS,_Fields.OCCUPATION,_Fields.CHANNEL,_Fields.THIRD_PARTY_ACCOUNT_ID,_Fields.FEEDBACK_PERIOD,_Fields.SALARY_DISCUSS,_Fields.PRACTICE_SALARY,_Fields.PRACTICE_PER_WEEK,_Fields.PRACTICE_SALARY_UNIT,_Fields.DEPARTMENT_ID,_Fields.DEPARTMENT_NAME,_Fields.COMPANY_ID,_Fields.COMPANY_NAME,_Fields.ADDRESS_ID,_Fields.ADDRESS_NAME,_Fields.FEATURE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salaryTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salaryBottom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_MONTH, new org.apache.thrift.meta_data.FieldMetaData("salaryMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_COMPANY_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("useCompanyAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OCCUPATION, new org.apache.thrift.meta_data.FieldMetaData("occupation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIRD_PARTY_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEEDBACK_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("feedbackPeriod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_DISCUSS, new org.apache.thrift.meta_data.FieldMetaData("salaryDiscuss", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRACTICE_SALARY, new org.apache.thrift.meta_data.FieldMetaData("practiceSalary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRACTICE_PER_WEEK, new org.apache.thrift.meta_data.FieldMetaData("practicePerWeek", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRACTICE_SALARY_UNIT, new org.apache.thrift.meta_data.FieldMetaData("practiceSalaryUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("departmentName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("addressId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("addressName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThirdPartyPosition.class, metaDataMap);
  }

  public ThirdPartyPosition() {
    this.salaryDiscuss = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThirdPartyPosition(ThirdPartyPosition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.salaryTop = other.salaryTop;
    this.salaryBottom = other.salaryBottom;
    this.salaryMonth = other.salaryMonth;
    this.count = other.count;
    this.useCompanyAddress = other.useCompanyAddress;
    if (other.isSetOccupation()) {
      java.util.List<String> __this__occupation = new java.util.ArrayList<String>(other.occupation);
      this.occupation = __this__occupation;
    }
    this.channel = other.channel;
    this.thirdPartyAccountId = other.thirdPartyAccountId;
    this.feedbackPeriod = other.feedbackPeriod;
    this.salaryDiscuss = other.salaryDiscuss;
    this.practiceSalary = other.practiceSalary;
    this.practicePerWeek = other.practicePerWeek;
    this.practiceSalaryUnit = other.practiceSalaryUnit;
    this.departmentId = other.departmentId;
    if (other.isSetDepartmentName()) {
      this.departmentName = other.departmentName;
    }
    this.companyId = other.companyId;
    if (other.isSetCompanyName()) {
      this.companyName = other.companyName;
    }
    this.addressId = other.addressId;
    if (other.isSetAddressName()) {
      this.addressName = other.addressName;
    }
    if (other.isSetFeature()) {
      java.util.List<String> __this__feature = new java.util.ArrayList<String>(other.feature);
      this.feature = __this__feature;
    }
  }

  public ThirdPartyPosition deepCopy() {
    return new ThirdPartyPosition(this);
  }

  @Override
  public void clear() {
    setSalaryTopIsSet(false);
    this.salaryTop = 0;
    setSalaryBottomIsSet(false);
    this.salaryBottom = 0;
    setSalaryMonthIsSet(false);
    this.salaryMonth = 0;
    setCountIsSet(false);
    this.count = 0;
    setUseCompanyAddressIsSet(false);
    this.useCompanyAddress = false;
    this.occupation = null;
    setChannelIsSet(false);
    this.channel = 0;
    setThirdPartyAccountIdIsSet(false);
    this.thirdPartyAccountId = 0;
    setFeedbackPeriodIsSet(false);
    this.feedbackPeriod = 0;
    this.salaryDiscuss = false;

    setPracticeSalaryIsSet(false);
    this.practiceSalary = 0;
    setPracticePerWeekIsSet(false);
    this.practicePerWeek = 0;
    setPracticeSalaryUnitIsSet(false);
    this.practiceSalaryUnit = 0;
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    this.departmentName = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.companyName = null;
    setAddressIdIsSet(false);
    this.addressId = 0;
    this.addressName = null;
    this.feature = null;
  }

  public int getSalaryTop() {
    return this.salaryTop;
  }

  public ThirdPartyPosition setSalaryTop(int salaryTop) {
    this.salaryTop = salaryTop;
    setSalaryTopIsSet(true);
    return this;
  }

  public void unsetSalaryTop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYTOP_ISSET_ID);
  }

  /** Returns true if field salaryTop is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryTop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYTOP_ISSET_ID);
  }

  public void setSalaryTopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYTOP_ISSET_ID, value);
  }

  public int getSalaryBottom() {
    return this.salaryBottom;
  }

  public ThirdPartyPosition setSalaryBottom(int salaryBottom) {
    this.salaryBottom = salaryBottom;
    setSalaryBottomIsSet(true);
    return this;
  }

  public void unsetSalaryBottom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID);
  }

  /** Returns true if field salaryBottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryBottom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID);
  }

  public void setSalaryBottomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYBOTTOM_ISSET_ID, value);
  }

  public int getSalaryMonth() {
    return this.salaryMonth;
  }

  public ThirdPartyPosition setSalaryMonth(int salaryMonth) {
    this.salaryMonth = salaryMonth;
    setSalaryMonthIsSet(true);
    return this;
  }

  public void unsetSalaryMonth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYMONTH_ISSET_ID);
  }

  /** Returns true if field salaryMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryMonth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYMONTH_ISSET_ID);
  }

  public void setSalaryMonthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYMONTH_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public ThirdPartyPosition setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public boolean isUseCompanyAddress() {
    return this.useCompanyAddress;
  }

  public ThirdPartyPosition setUseCompanyAddress(boolean useCompanyAddress) {
    this.useCompanyAddress = useCompanyAddress;
    setUseCompanyAddressIsSet(true);
    return this;
  }

  public void unsetUseCompanyAddress() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID);
  }

  /** Returns true if field useCompanyAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetUseCompanyAddress() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID);
  }

  public void setUseCompanyAddressIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USECOMPANYADDRESS_ISSET_ID, value);
  }

  public int getOccupationSize() {
    return (this.occupation == null) ? 0 : this.occupation.size();
  }

  public java.util.Iterator<String> getOccupationIterator() {
    return (this.occupation == null) ? null : this.occupation.iterator();
  }

  public void addToOccupation(String elem) {
    if (this.occupation == null) {
      this.occupation = new java.util.ArrayList<String>();
    }
    this.occupation.add(elem);
  }

  public java.util.List<String> getOccupation() {
    return this.occupation;
  }

  public ThirdPartyPosition setOccupation(java.util.List<String> occupation) {
    this.occupation = occupation;
    return this;
  }

  public void unsetOccupation() {
    this.occupation = null;
  }

  /** Returns true if field occupation is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation() {
    return this.occupation != null;
  }

  public void setOccupationIsSet(boolean value) {
    if (!value) {
      this.occupation = null;
    }
  }

  public int getChannel() {
    return this.channel;
  }

  public ThirdPartyPosition setChannel(int channel) {
    this.channel = channel;
    setChannelIsSet(true);
    return this;
  }

  public void unsetChannel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  public void setChannelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
  }

  public int getThirdPartyAccountId() {
    return this.thirdPartyAccountId;
  }

  public ThirdPartyPosition setThirdPartyAccountId(int thirdPartyAccountId) {
    this.thirdPartyAccountId = thirdPartyAccountId;
    setThirdPartyAccountIdIsSet(true);
    return this;
  }

  public void unsetThirdPartyAccountId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THIRDPARTYACCOUNTID_ISSET_ID);
  }

  /** Returns true if field thirdPartyAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartyAccountId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THIRDPARTYACCOUNTID_ISSET_ID);
  }

  public void setThirdPartyAccountIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THIRDPARTYACCOUNTID_ISSET_ID, value);
  }

  public int getFeedbackPeriod() {
    return this.feedbackPeriod;
  }

  public ThirdPartyPosition setFeedbackPeriod(int feedbackPeriod) {
    this.feedbackPeriod = feedbackPeriod;
    setFeedbackPeriodIsSet(true);
    return this;
  }

  public void unsetFeedbackPeriod() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEEDBACKPERIOD_ISSET_ID);
  }

  /** Returns true if field feedbackPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedbackPeriod() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEEDBACKPERIOD_ISSET_ID);
  }

  public void setFeedbackPeriodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEEDBACKPERIOD_ISSET_ID, value);
  }

  public boolean isSalaryDiscuss() {
    return this.salaryDiscuss;
  }

  public ThirdPartyPosition setSalaryDiscuss(boolean salaryDiscuss) {
    this.salaryDiscuss = salaryDiscuss;
    setSalaryDiscussIsSet(true);
    return this;
  }

  public void unsetSalaryDiscuss() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYDISCUSS_ISSET_ID);
  }

  /** Returns true if field salaryDiscuss is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryDiscuss() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYDISCUSS_ISSET_ID);
  }

  public void setSalaryDiscussIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYDISCUSS_ISSET_ID, value);
  }

  public int getPracticeSalary() {
    return this.practiceSalary;
  }

  public ThirdPartyPosition setPracticeSalary(int practiceSalary) {
    this.practiceSalary = practiceSalary;
    setPracticeSalaryIsSet(true);
    return this;
  }

  public void unsetPracticeSalary() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRACTICESALARY_ISSET_ID);
  }

  /** Returns true if field practiceSalary is set (has been assigned a value) and false otherwise */
  public boolean isSetPracticeSalary() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRACTICESALARY_ISSET_ID);
  }

  public void setPracticeSalaryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRACTICESALARY_ISSET_ID, value);
  }

  public byte getPracticePerWeek() {
    return this.practicePerWeek;
  }

  public ThirdPartyPosition setPracticePerWeek(byte practicePerWeek) {
    this.practicePerWeek = practicePerWeek;
    setPracticePerWeekIsSet(true);
    return this;
  }

  public void unsetPracticePerWeek() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRACTICEPERWEEK_ISSET_ID);
  }

  /** Returns true if field practicePerWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetPracticePerWeek() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRACTICEPERWEEK_ISSET_ID);
  }

  public void setPracticePerWeekIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRACTICEPERWEEK_ISSET_ID, value);
  }

  public byte getPracticeSalaryUnit() {
    return this.practiceSalaryUnit;
  }

  public ThirdPartyPosition setPracticeSalaryUnit(byte practiceSalaryUnit) {
    this.practiceSalaryUnit = practiceSalaryUnit;
    setPracticeSalaryUnitIsSet(true);
    return this;
  }

  public void unsetPracticeSalaryUnit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRACTICESALARYUNIT_ISSET_ID);
  }

  /** Returns true if field practiceSalaryUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetPracticeSalaryUnit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRACTICESALARYUNIT_ISSET_ID);
  }

  public void setPracticeSalaryUnitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRACTICESALARYUNIT_ISSET_ID, value);
  }

  public int getDepartmentId() {
    return this.departmentId;
  }

  public ThirdPartyPosition setDepartmentId(int departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  public String getDepartmentName() {
    return this.departmentName;
  }

  public ThirdPartyPosition setDepartmentName(String departmentName) {
    this.departmentName = departmentName;
    return this;
  }

  public void unsetDepartmentName() {
    this.departmentName = null;
  }

  /** Returns true if field departmentName is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentName() {
    return this.departmentName != null;
  }

  public void setDepartmentNameIsSet(boolean value) {
    if (!value) {
      this.departmentName = null;
    }
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public ThirdPartyPosition setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public String getCompanyName() {
    return this.companyName;
  }

  public ThirdPartyPosition setCompanyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  public void unsetCompanyName() {
    this.companyName = null;
  }

  /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyName() {
    return this.companyName != null;
  }

  public void setCompanyNameIsSet(boolean value) {
    if (!value) {
      this.companyName = null;
    }
  }

  public int getAddressId() {
    return this.addressId;
  }

  public ThirdPartyPosition setAddressId(int addressId) {
    this.addressId = addressId;
    setAddressIdIsSet(true);
    return this;
  }

  public void unsetAddressId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADDRESSID_ISSET_ID);
  }

  /** Returns true if field addressId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADDRESSID_ISSET_ID);
  }

  public void setAddressIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADDRESSID_ISSET_ID, value);
  }

  public String getAddressName() {
    return this.addressName;
  }

  public ThirdPartyPosition setAddressName(String addressName) {
    this.addressName = addressName;
    return this;
  }

  public void unsetAddressName() {
    this.addressName = null;
  }

  /** Returns true if field addressName is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressName() {
    return this.addressName != null;
  }

  public void setAddressNameIsSet(boolean value) {
    if (!value) {
      this.addressName = null;
    }
  }

  public int getFeatureSize() {
    return (this.feature == null) ? 0 : this.feature.size();
  }

  public java.util.Iterator<String> getFeatureIterator() {
    return (this.feature == null) ? null : this.feature.iterator();
  }

  public void addToFeature(String elem) {
    if (this.feature == null) {
      this.feature = new java.util.ArrayList<String>();
    }
    this.feature.add(elem);
  }

  public java.util.List<String> getFeature() {
    return this.feature;
  }

  public ThirdPartyPosition setFeature(java.util.List<String> feature) {
    this.feature = feature;
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SALARY_TOP:
      if (value == null) {
        unsetSalaryTop();
      } else {
        setSalaryTop((Integer)value);
      }
      break;

    case SALARY_BOTTOM:
      if (value == null) {
        unsetSalaryBottom();
      } else {
        setSalaryBottom((Integer)value);
      }
      break;

    case SALARY_MONTH:
      if (value == null) {
        unsetSalaryMonth();
      } else {
        setSalaryMonth((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case USE_COMPANY_ADDRESS:
      if (value == null) {
        unsetUseCompanyAddress();
      } else {
        setUseCompanyAddress((Boolean)value);
      }
      break;

    case OCCUPATION:
      if (value == null) {
        unsetOccupation();
      } else {
        setOccupation((java.util.List<String>)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((Integer)value);
      }
      break;

    case THIRD_PARTY_ACCOUNT_ID:
      if (value == null) {
        unsetThirdPartyAccountId();
      } else {
        setThirdPartyAccountId((Integer)value);
      }
      break;

    case FEEDBACK_PERIOD:
      if (value == null) {
        unsetFeedbackPeriod();
      } else {
        setFeedbackPeriod((Integer)value);
      }
      break;

    case SALARY_DISCUSS:
      if (value == null) {
        unsetSalaryDiscuss();
      } else {
        setSalaryDiscuss((Boolean)value);
      }
      break;

    case PRACTICE_SALARY:
      if (value == null) {
        unsetPracticeSalary();
      } else {
        setPracticeSalary((Integer)value);
      }
      break;

    case PRACTICE_PER_WEEK:
      if (value == null) {
        unsetPracticePerWeek();
      } else {
        setPracticePerWeek((Byte)value);
      }
      break;

    case PRACTICE_SALARY_UNIT:
      if (value == null) {
        unsetPracticeSalaryUnit();
      } else {
        setPracticeSalaryUnit((Byte)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((Integer)value);
      }
      break;

    case DEPARTMENT_NAME:
      if (value == null) {
        unsetDepartmentName();
      } else {
        setDepartmentName((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompanyName();
      } else {
        setCompanyName((String)value);
      }
      break;

    case ADDRESS_ID:
      if (value == null) {
        unsetAddressId();
      } else {
        setAddressId((Integer)value);
      }
      break;

    case ADDRESS_NAME:
      if (value == null) {
        unsetAddressName();
      } else {
        setAddressName((String)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((java.util.List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SALARY_TOP:
      return getSalaryTop();

    case SALARY_BOTTOM:
      return getSalaryBottom();

    case SALARY_MONTH:
      return getSalaryMonth();

    case COUNT:
      return getCount();

    case USE_COMPANY_ADDRESS:
      return isUseCompanyAddress();

    case OCCUPATION:
      return getOccupation();

    case CHANNEL:
      return getChannel();

    case THIRD_PARTY_ACCOUNT_ID:
      return getThirdPartyAccountId();

    case FEEDBACK_PERIOD:
      return getFeedbackPeriod();

    case SALARY_DISCUSS:
      return isSalaryDiscuss();

    case PRACTICE_SALARY:
      return getPracticeSalary();

    case PRACTICE_PER_WEEK:
      return getPracticePerWeek();

    case PRACTICE_SALARY_UNIT:
      return getPracticeSalaryUnit();

    case DEPARTMENT_ID:
      return getDepartmentId();

    case DEPARTMENT_NAME:
      return getDepartmentName();

    case COMPANY_ID:
      return getCompanyId();

    case COMPANY_NAME:
      return getCompanyName();

    case ADDRESS_ID:
      return getAddressId();

    case ADDRESS_NAME:
      return getAddressName();

    case FEATURE:
      return getFeature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SALARY_TOP:
      return isSetSalaryTop();
    case SALARY_BOTTOM:
      return isSetSalaryBottom();
    case SALARY_MONTH:
      return isSetSalaryMonth();
    case COUNT:
      return isSetCount();
    case USE_COMPANY_ADDRESS:
      return isSetUseCompanyAddress();
    case OCCUPATION:
      return isSetOccupation();
    case CHANNEL:
      return isSetChannel();
    case THIRD_PARTY_ACCOUNT_ID:
      return isSetThirdPartyAccountId();
    case FEEDBACK_PERIOD:
      return isSetFeedbackPeriod();
    case SALARY_DISCUSS:
      return isSetSalaryDiscuss();
    case PRACTICE_SALARY:
      return isSetPracticeSalary();
    case PRACTICE_PER_WEEK:
      return isSetPracticePerWeek();
    case PRACTICE_SALARY_UNIT:
      return isSetPracticeSalaryUnit();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case DEPARTMENT_NAME:
      return isSetDepartmentName();
    case COMPANY_ID:
      return isSetCompanyId();
    case COMPANY_NAME:
      return isSetCompanyName();
    case ADDRESS_ID:
      return isSetAddressId();
    case ADDRESS_NAME:
      return isSetAddressName();
    case FEATURE:
      return isSetFeature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThirdPartyPosition)
      return this.equals((ThirdPartyPosition)that);
    return false;
  }

  public boolean equals(ThirdPartyPosition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_salaryTop = true && this.isSetSalaryTop();
    boolean that_present_salaryTop = true && that.isSetSalaryTop();
    if (this_present_salaryTop || that_present_salaryTop) {
      if (!(this_present_salaryTop && that_present_salaryTop))
        return false;
      if (this.salaryTop != that.salaryTop)
        return false;
    }

    boolean this_present_salaryBottom = true && this.isSetSalaryBottom();
    boolean that_present_salaryBottom = true && that.isSetSalaryBottom();
    if (this_present_salaryBottom || that_present_salaryBottom) {
      if (!(this_present_salaryBottom && that_present_salaryBottom))
        return false;
      if (this.salaryBottom != that.salaryBottom)
        return false;
    }

    boolean this_present_salaryMonth = true && this.isSetSalaryMonth();
    boolean that_present_salaryMonth = true && that.isSetSalaryMonth();
    if (this_present_salaryMonth || that_present_salaryMonth) {
      if (!(this_present_salaryMonth && that_present_salaryMonth))
        return false;
      if (this.salaryMonth != that.salaryMonth)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_useCompanyAddress = true && this.isSetUseCompanyAddress();
    boolean that_present_useCompanyAddress = true && that.isSetUseCompanyAddress();
    if (this_present_useCompanyAddress || that_present_useCompanyAddress) {
      if (!(this_present_useCompanyAddress && that_present_useCompanyAddress))
        return false;
      if (this.useCompanyAddress != that.useCompanyAddress)
        return false;
    }

    boolean this_present_occupation = true && this.isSetOccupation();
    boolean that_present_occupation = true && that.isSetOccupation();
    if (this_present_occupation || that_present_occupation) {
      if (!(this_present_occupation && that_present_occupation))
        return false;
      if (!this.occupation.equals(that.occupation))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (this.channel != that.channel)
        return false;
    }

    boolean this_present_thirdPartyAccountId = true && this.isSetThirdPartyAccountId();
    boolean that_present_thirdPartyAccountId = true && that.isSetThirdPartyAccountId();
    if (this_present_thirdPartyAccountId || that_present_thirdPartyAccountId) {
      if (!(this_present_thirdPartyAccountId && that_present_thirdPartyAccountId))
        return false;
      if (this.thirdPartyAccountId != that.thirdPartyAccountId)
        return false;
    }

    boolean this_present_feedbackPeriod = true && this.isSetFeedbackPeriod();
    boolean that_present_feedbackPeriod = true && that.isSetFeedbackPeriod();
    if (this_present_feedbackPeriod || that_present_feedbackPeriod) {
      if (!(this_present_feedbackPeriod && that_present_feedbackPeriod))
        return false;
      if (this.feedbackPeriod != that.feedbackPeriod)
        return false;
    }

    boolean this_present_salaryDiscuss = true && this.isSetSalaryDiscuss();
    boolean that_present_salaryDiscuss = true && that.isSetSalaryDiscuss();
    if (this_present_salaryDiscuss || that_present_salaryDiscuss) {
      if (!(this_present_salaryDiscuss && that_present_salaryDiscuss))
        return false;
      if (this.salaryDiscuss != that.salaryDiscuss)
        return false;
    }

    boolean this_present_practiceSalary = true && this.isSetPracticeSalary();
    boolean that_present_practiceSalary = true && that.isSetPracticeSalary();
    if (this_present_practiceSalary || that_present_practiceSalary) {
      if (!(this_present_practiceSalary && that_present_practiceSalary))
        return false;
      if (this.practiceSalary != that.practiceSalary)
        return false;
    }

    boolean this_present_practicePerWeek = true && this.isSetPracticePerWeek();
    boolean that_present_practicePerWeek = true && that.isSetPracticePerWeek();
    if (this_present_practicePerWeek || that_present_practicePerWeek) {
      if (!(this_present_practicePerWeek && that_present_practicePerWeek))
        return false;
      if (this.practicePerWeek != that.practicePerWeek)
        return false;
    }

    boolean this_present_practiceSalaryUnit = true && this.isSetPracticeSalaryUnit();
    boolean that_present_practiceSalaryUnit = true && that.isSetPracticeSalaryUnit();
    if (this_present_practiceSalaryUnit || that_present_practiceSalaryUnit) {
      if (!(this_present_practiceSalaryUnit && that_present_practiceSalaryUnit))
        return false;
      if (this.practiceSalaryUnit != that.practiceSalaryUnit)
        return false;
    }

    boolean this_present_departmentId = true && this.isSetDepartmentId();
    boolean that_present_departmentId = true && that.isSetDepartmentId();
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_departmentName = true && this.isSetDepartmentName();
    boolean that_present_departmentName = true && that.isSetDepartmentName();
    if (this_present_departmentName || that_present_departmentName) {
      if (!(this_present_departmentName && that_present_departmentName))
        return false;
      if (!this.departmentName.equals(that.departmentName))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_companyName = true && this.isSetCompanyName();
    boolean that_present_companyName = true && that.isSetCompanyName();
    if (this_present_companyName || that_present_companyName) {
      if (!(this_present_companyName && that_present_companyName))
        return false;
      if (!this.companyName.equals(that.companyName))
        return false;
    }

    boolean this_present_addressId = true && this.isSetAddressId();
    boolean that_present_addressId = true && that.isSetAddressId();
    if (this_present_addressId || that_present_addressId) {
      if (!(this_present_addressId && that_present_addressId))
        return false;
      if (this.addressId != that.addressId)
        return false;
    }

    boolean this_present_addressName = true && this.isSetAddressName();
    boolean that_present_addressName = true && that.isSetAddressName();
    if (this_present_addressName || that_present_addressName) {
      if (!(this_present_addressName && that_present_addressName))
        return false;
      if (!this.addressName.equals(that.addressName))
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSalaryTop()) ? 131071 : 524287);
    if (isSetSalaryTop())
      hashCode = hashCode * 8191 + salaryTop;

    hashCode = hashCode * 8191 + ((isSetSalaryBottom()) ? 131071 : 524287);
    if (isSetSalaryBottom())
      hashCode = hashCode * 8191 + salaryBottom;

    hashCode = hashCode * 8191 + ((isSetSalaryMonth()) ? 131071 : 524287);
    if (isSetSalaryMonth())
      hashCode = hashCode * 8191 + salaryMonth;

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + count;

    hashCode = hashCode * 8191 + ((isSetUseCompanyAddress()) ? 131071 : 524287);
    if (isSetUseCompanyAddress())
      hashCode = hashCode * 8191 + ((useCompanyAddress) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOccupation()) ? 131071 : 524287);
    if (isSetOccupation())
      hashCode = hashCode * 8191 + occupation.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel()) ? 131071 : 524287);
    if (isSetChannel())
      hashCode = hashCode * 8191 + channel;

    hashCode = hashCode * 8191 + ((isSetThirdPartyAccountId()) ? 131071 : 524287);
    if (isSetThirdPartyAccountId())
      hashCode = hashCode * 8191 + thirdPartyAccountId;

    hashCode = hashCode * 8191 + ((isSetFeedbackPeriod()) ? 131071 : 524287);
    if (isSetFeedbackPeriod())
      hashCode = hashCode * 8191 + feedbackPeriod;

    hashCode = hashCode * 8191 + ((isSetSalaryDiscuss()) ? 131071 : 524287);
    if (isSetSalaryDiscuss())
      hashCode = hashCode * 8191 + ((salaryDiscuss) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPracticeSalary()) ? 131071 : 524287);
    if (isSetPracticeSalary())
      hashCode = hashCode * 8191 + practiceSalary;

    hashCode = hashCode * 8191 + ((isSetPracticePerWeek()) ? 131071 : 524287);
    if (isSetPracticePerWeek())
      hashCode = hashCode * 8191 + (int) (practicePerWeek);

    hashCode = hashCode * 8191 + ((isSetPracticeSalaryUnit()) ? 131071 : 524287);
    if (isSetPracticeSalaryUnit())
      hashCode = hashCode * 8191 + (int) (practiceSalaryUnit);

    hashCode = hashCode * 8191 + ((isSetDepartmentId()) ? 131071 : 524287);
    if (isSetDepartmentId())
      hashCode = hashCode * 8191 + departmentId;

    hashCode = hashCode * 8191 + ((isSetDepartmentName()) ? 131071 : 524287);
    if (isSetDepartmentName())
      hashCode = hashCode * 8191 + departmentName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetCompanyName()) ? 131071 : 524287);
    if (isSetCompanyName())
      hashCode = hashCode * 8191 + companyName.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddressId()) ? 131071 : 524287);
    if (isSetAddressId())
      hashCode = hashCode * 8191 + addressId;

    hashCode = hashCode * 8191 + ((isSetAddressName()) ? 131071 : 524287);
    if (isSetAddressName())
      hashCode = hashCode * 8191 + addressName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
    if (isSetFeature())
      hashCode = hashCode * 8191 + feature.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThirdPartyPosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSalaryTop()).compareTo(other.isSetSalaryTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryTop, other.salaryTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryBottom()).compareTo(other.isSetSalaryBottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryBottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryBottom, other.salaryBottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryMonth()).compareTo(other.isSetSalaryMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryMonth, other.salaryMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseCompanyAddress()).compareTo(other.isSetUseCompanyAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseCompanyAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useCompanyAddress, other.useCompanyAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation()).compareTo(other.isSetOccupation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation, other.occupation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartyAccountId()).compareTo(other.isSetThirdPartyAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyAccountId, other.thirdPartyAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedbackPeriod()).compareTo(other.isSetFeedbackPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedbackPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedbackPeriod, other.feedbackPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryDiscuss()).compareTo(other.isSetSalaryDiscuss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryDiscuss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryDiscuss, other.salaryDiscuss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPracticeSalary()).compareTo(other.isSetPracticeSalary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPracticeSalary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.practiceSalary, other.practiceSalary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPracticePerWeek()).compareTo(other.isSetPracticePerWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPracticePerWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.practicePerWeek, other.practicePerWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPracticeSalaryUnit()).compareTo(other.isSetPracticeSalaryUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPracticeSalaryUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.practiceSalaryUnit, other.practiceSalaryUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentName()).compareTo(other.isSetDepartmentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentName, other.departmentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressId()).compareTo(other.isSetAddressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressId, other.addressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressName()).compareTo(other.isSetAddressName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressName, other.addressName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThirdPartyPosition(");
    boolean first = true;

    if (isSetSalaryTop()) {
      sb.append("salaryTop:");
      sb.append(this.salaryTop);
      first = false;
    }
    if (isSetSalaryBottom()) {
      if (!first) sb.append(", ");
      sb.append("salaryBottom:");
      sb.append(this.salaryBottom);
      first = false;
    }
    if (isSetSalaryMonth()) {
      if (!first) sb.append(", ");
      sb.append("salaryMonth:");
      sb.append(this.salaryMonth);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetUseCompanyAddress()) {
      if (!first) sb.append(", ");
      sb.append("useCompanyAddress:");
      sb.append(this.useCompanyAddress);
      first = false;
    }
    if (isSetOccupation()) {
      if (!first) sb.append(", ");
      sb.append("occupation:");
      if (this.occupation == null) {
        sb.append("null");
      } else {
        sb.append(this.occupation);
      }
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
    }
    if (isSetThirdPartyAccountId()) {
      if (!first) sb.append(", ");
      sb.append("thirdPartyAccountId:");
      sb.append(this.thirdPartyAccountId);
      first = false;
    }
    if (isSetFeedbackPeriod()) {
      if (!first) sb.append(", ");
      sb.append("feedbackPeriod:");
      sb.append(this.feedbackPeriod);
      first = false;
    }
    if (isSetSalaryDiscuss()) {
      if (!first) sb.append(", ");
      sb.append("salaryDiscuss:");
      sb.append(this.salaryDiscuss);
      first = false;
    }
    if (isSetPracticeSalary()) {
      if (!first) sb.append(", ");
      sb.append("practiceSalary:");
      sb.append(this.practiceSalary);
      first = false;
    }
    if (isSetPracticePerWeek()) {
      if (!first) sb.append(", ");
      sb.append("practicePerWeek:");
      sb.append(this.practicePerWeek);
      first = false;
    }
    if (isSetPracticeSalaryUnit()) {
      if (!first) sb.append(", ");
      sb.append("practiceSalaryUnit:");
      sb.append(this.practiceSalaryUnit);
      first = false;
    }
    if (isSetDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
    }
    if (isSetDepartmentName()) {
      if (!first) sb.append(", ");
      sb.append("departmentName:");
      if (this.departmentName == null) {
        sb.append("null");
      } else {
        sb.append(this.departmentName);
      }
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetCompanyName()) {
      if (!first) sb.append(", ");
      sb.append("companyName:");
      if (this.companyName == null) {
        sb.append("null");
      } else {
        sb.append(this.companyName);
      }
      first = false;
    }
    if (isSetAddressId()) {
      if (!first) sb.append(", ");
      sb.append("addressId:");
      sb.append(this.addressId);
      first = false;
    }
    if (isSetAddressName()) {
      if (!first) sb.append(", ");
      sb.append("addressName:");
      if (this.addressName == null) {
        sb.append("null");
      } else {
        sb.append(this.addressName);
      }
      first = false;
    }
    if (isSetFeature()) {
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThirdPartyPositionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThirdPartyPositionStandardScheme getScheme() {
      return new ThirdPartyPositionStandardScheme();
    }
  }

  private static class ThirdPartyPositionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThirdPartyPosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThirdPartyPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryTop = iprot.readI32();
              struct.setSalaryTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryBottom = iprot.readI32();
              struct.setSalaryBottomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SALARY_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryMonth = iprot.readI32();
              struct.setSalaryMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USE_COMPANY_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.useCompanyAddress = iprot.readBool();
              struct.setUseCompanyAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OCCUPATION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.occupation = new java.util.ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.occupation.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOccupationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel = iprot.readI32();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // THIRD_PARTY_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thirdPartyAccountId = iprot.readI32();
              struct.setThirdPartyAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FEEDBACK_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.feedbackPeriod = iprot.readI32();
              struct.setFeedbackPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SALARY_DISCUSS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.salaryDiscuss = iprot.readBool();
              struct.setSalaryDiscussIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRACTICE_SALARY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.practiceSalary = iprot.readI32();
              struct.setPracticeSalaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRACTICE_PER_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.practicePerWeek = iprot.readByte();
              struct.setPracticePerWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PRACTICE_SALARY_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.practiceSalaryUnit = iprot.readByte();
              struct.setPracticeSalaryUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.departmentId = iprot.readI32();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEPARTMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.departmentName = iprot.readString();
              struct.setDepartmentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyName = iprot.readString();
              struct.setCompanyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ADDRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addressId = iprot.readI32();
              struct.setAddressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ADDRESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressName = iprot.readString();
              struct.setAddressNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.feature = new java.util.ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.feature.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThirdPartyPosition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSalaryTop()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeI32(struct.salaryTop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryBottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeI32(struct.salaryBottom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryMonth()) {
        oprot.writeFieldBegin(SALARY_MONTH_FIELD_DESC);
        oprot.writeI32(struct.salaryMonth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseCompanyAddress()) {
        oprot.writeFieldBegin(USE_COMPANY_ADDRESS_FIELD_DESC);
        oprot.writeBool(struct.useCompanyAddress);
        oprot.writeFieldEnd();
      }
      if (struct.occupation != null) {
        if (struct.isSetOccupation()) {
          oprot.writeFieldBegin(OCCUPATION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.occupation.size()));
            for (String _iter6 : struct.occupation)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChannel()) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThirdPartyAccountId()) {
        oprot.writeFieldBegin(THIRD_PARTY_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.thirdPartyAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFeedbackPeriod()) {
        oprot.writeFieldBegin(FEEDBACK_PERIOD_FIELD_DESC);
        oprot.writeI32(struct.feedbackPeriod);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryDiscuss()) {
        oprot.writeFieldBegin(SALARY_DISCUSS_FIELD_DESC);
        oprot.writeBool(struct.salaryDiscuss);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPracticeSalary()) {
        oprot.writeFieldBegin(PRACTICE_SALARY_FIELD_DESC);
        oprot.writeI32(struct.practiceSalary);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPracticePerWeek()) {
        oprot.writeFieldBegin(PRACTICE_PER_WEEK_FIELD_DESC);
        oprot.writeByte(struct.practicePerWeek);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPracticeSalaryUnit()) {
        oprot.writeFieldBegin(PRACTICE_SALARY_UNIT_FIELD_DESC);
        oprot.writeByte(struct.practiceSalaryUnit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.departmentId);
        oprot.writeFieldEnd();
      }
      if (struct.departmentName != null) {
        if (struct.isSetDepartmentName()) {
          oprot.writeFieldBegin(DEPARTMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.departmentName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.companyName != null) {
        if (struct.isSetCompanyName()) {
          oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
          oprot.writeString(struct.companyName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAddressId()) {
        oprot.writeFieldBegin(ADDRESS_ID_FIELD_DESC);
        oprot.writeI32(struct.addressId);
        oprot.writeFieldEnd();
      }
      if (struct.addressName != null) {
        if (struct.isSetAddressName()) {
          oprot.writeFieldBegin(ADDRESS_NAME_FIELD_DESC);
          oprot.writeString(struct.addressName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.feature != null) {
        if (struct.isSetFeature()) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature.size()));
            for (String _iter7 : struct.feature)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThirdPartyPositionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThirdPartyPositionTupleScheme getScheme() {
      return new ThirdPartyPositionTupleScheme();
    }
  }

  private static class ThirdPartyPositionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThirdPartyPosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThirdPartyPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSalaryTop()) {
        optionals.set(0);
      }
      if (struct.isSetSalaryBottom()) {
        optionals.set(1);
      }
      if (struct.isSetSalaryMonth()) {
        optionals.set(2);
      }
      if (struct.isSetCount()) {
        optionals.set(3);
      }
      if (struct.isSetUseCompanyAddress()) {
        optionals.set(4);
      }
      if (struct.isSetOccupation()) {
        optionals.set(5);
      }
      if (struct.isSetChannel()) {
        optionals.set(6);
      }
      if (struct.isSetThirdPartyAccountId()) {
        optionals.set(7);
      }
      if (struct.isSetFeedbackPeriod()) {
        optionals.set(8);
      }
      if (struct.isSetSalaryDiscuss()) {
        optionals.set(9);
      }
      if (struct.isSetPracticeSalary()) {
        optionals.set(10);
      }
      if (struct.isSetPracticePerWeek()) {
        optionals.set(11);
      }
      if (struct.isSetPracticeSalaryUnit()) {
        optionals.set(12);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(13);
      }
      if (struct.isSetDepartmentName()) {
        optionals.set(14);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(15);
      }
      if (struct.isSetCompanyName()) {
        optionals.set(16);
      }
      if (struct.isSetAddressId()) {
        optionals.set(17);
      }
      if (struct.isSetAddressName()) {
        optionals.set(18);
      }
      if (struct.isSetFeature()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetSalaryTop()) {
        oprot.writeI32(struct.salaryTop);
      }
      if (struct.isSetSalaryBottom()) {
        oprot.writeI32(struct.salaryBottom);
      }
      if (struct.isSetSalaryMonth()) {
        oprot.writeI32(struct.salaryMonth);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetUseCompanyAddress()) {
        oprot.writeBool(struct.useCompanyAddress);
      }
      if (struct.isSetOccupation()) {
        {
          oprot.writeI32(struct.occupation.size());
          for (String _iter8 : struct.occupation)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetChannel()) {
        oprot.writeI32(struct.channel);
      }
      if (struct.isSetThirdPartyAccountId()) {
        oprot.writeI32(struct.thirdPartyAccountId);
      }
      if (struct.isSetFeedbackPeriod()) {
        oprot.writeI32(struct.feedbackPeriod);
      }
      if (struct.isSetSalaryDiscuss()) {
        oprot.writeBool(struct.salaryDiscuss);
      }
      if (struct.isSetPracticeSalary()) {
        oprot.writeI32(struct.practiceSalary);
      }
      if (struct.isSetPracticePerWeek()) {
        oprot.writeByte(struct.practicePerWeek);
      }
      if (struct.isSetPracticeSalaryUnit()) {
        oprot.writeByte(struct.practiceSalaryUnit);
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeI32(struct.departmentId);
      }
      if (struct.isSetDepartmentName()) {
        oprot.writeString(struct.departmentName);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetCompanyName()) {
        oprot.writeString(struct.companyName);
      }
      if (struct.isSetAddressId()) {
        oprot.writeI32(struct.addressId);
      }
      if (struct.isSetAddressName()) {
        oprot.writeString(struct.addressName);
      }
      if (struct.isSetFeature()) {
        {
          oprot.writeI32(struct.feature.size());
          for (String _iter9 : struct.feature)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThirdPartyPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.salaryTop = iprot.readI32();
        struct.setSalaryTopIsSet(true);
      }
      if (incoming.get(1)) {
        struct.salaryBottom = iprot.readI32();
        struct.setSalaryBottomIsSet(true);
      }
      if (incoming.get(2)) {
        struct.salaryMonth = iprot.readI32();
        struct.setSalaryMonthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.useCompanyAddress = iprot.readBool();
        struct.setUseCompanyAddressIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.occupation = new java.util.ArrayList<String>(_list10.size);
          String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.occupation.add(_elem11);
          }
        }
        struct.setOccupationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.channel = iprot.readI32();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.thirdPartyAccountId = iprot.readI32();
        struct.setThirdPartyAccountIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.feedbackPeriod = iprot.readI32();
        struct.setFeedbackPeriodIsSet(true);
      }
      if (incoming.get(9)) {
        struct.salaryDiscuss = iprot.readBool();
        struct.setSalaryDiscussIsSet(true);
      }
      if (incoming.get(10)) {
        struct.practiceSalary = iprot.readI32();
        struct.setPracticeSalaryIsSet(true);
      }
      if (incoming.get(11)) {
        struct.practicePerWeek = iprot.readByte();
        struct.setPracticePerWeekIsSet(true);
      }
      if (incoming.get(12)) {
        struct.practiceSalaryUnit = iprot.readByte();
        struct.setPracticeSalaryUnitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.departmentId = iprot.readI32();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.departmentName = iprot.readString();
        struct.setDepartmentNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.companyName = iprot.readString();
        struct.setCompanyNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.addressId = iprot.readI32();
        struct.setAddressIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.addressName = iprot.readString();
        struct.setAddressNameIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.feature = new java.util.ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.feature.add(_elem14);
          }
        }
        struct.setFeatureIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

