/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-11")
public class EmployeeForwardViewPage implements org.apache.thrift.TBase<EmployeeForwardViewPage, EmployeeForwardViewPage._Fields>, java.io.Serializable, Cloneable, Comparable<EmployeeForwardViewPage> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmployeeForwardViewPage");

    private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userList", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EmployeeForwardViewPageStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EmployeeForwardViewPageTupleSchemeFactory();

    public int totalCount; // optional
    public int page; // optional
    public java.util.List<EmployeeForwardView> userList; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        TOTAL_COUNT((short)1, "totalCount"),
        PAGE((short)2, "page"),
        USER_LIST((short)3, "userList");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // TOTAL_COUNT
                    return TOTAL_COUNT;
                case 2: // PAGE
                    return PAGE;
                case 3: // USER_LIST
                    return USER_LIST;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TOTALCOUNT_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.TOTAL_COUNT,_Fields.PAGE,_Fields.USER_LIST};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.USER_LIST, new org.apache.thrift.meta_data.FieldMetaData("userList", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeForwardView.class))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmployeeForwardViewPage.class, metaDataMap);
    }

    public EmployeeForwardViewPage() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EmployeeForwardViewPage(EmployeeForwardViewPage other) {
        __isset_bitfield = other.__isset_bitfield;
        this.totalCount = other.totalCount;
        this.page = other.page;
        if (other.isSetUserList()) {
            java.util.List<EmployeeForwardView> __this__userList = new java.util.ArrayList<EmployeeForwardView>(other.userList.size());
            for (EmployeeForwardView other_element : other.userList) {
                __this__userList.add(new EmployeeForwardView(other_element));
            }
            this.userList = __this__userList;
        }
    }

    public EmployeeForwardViewPage deepCopy() {
        return new EmployeeForwardViewPage(this);
    }

    @Override
    public void clear() {
        setTotalCountIsSet(false);
        this.totalCount = 0;
        setPageIsSet(false);
        this.page = 0;
        this.userList = null;
    }

    public int getTotalCount() {
        return this.totalCount;
    }

    public EmployeeForwardViewPage setTotalCount(int totalCount) {
        this.totalCount = totalCount;
        setTotalCountIsSet(true);
        return this;
    }

    public void unsetTotalCount() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
    }

    /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalCount() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
    }

    public void setTotalCountIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
    }

    public int getPage() {
        return this.page;
    }

    public EmployeeForwardViewPage setPage(int page) {
        this.page = page;
        setPageIsSet(true);
        return this;
    }

    public void unsetPage() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getUserListSize() {
        return (this.userList == null) ? 0 : this.userList.size();
    }

    public java.util.Iterator<EmployeeForwardView> getUserListIterator() {
        return (this.userList == null) ? null : this.userList.iterator();
    }

    public void addToUserList(EmployeeForwardView elem) {
        if (this.userList == null) {
            this.userList = new java.util.ArrayList<EmployeeForwardView>();
        }
        this.userList.add(elem);
    }

    public java.util.List<EmployeeForwardView> getUserList() {
        return this.userList;
    }

    public EmployeeForwardViewPage setUserList(java.util.List<EmployeeForwardView> userList) {
        this.userList = userList;
        return this;
    }

    public void unsetUserList() {
        this.userList = null;
    }

    /** Returns true if field userList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserList() {
        return this.userList != null;
    }

    public void setUserListIsSet(boolean value) {
        if (!value) {
            this.userList = null;
        }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case TOTAL_COUNT:
                if (value == null) {
                    unsetTotalCount();
                } else {
                    setTotalCount((java.lang.Integer)value);
                }
                break;

            case PAGE:
                if (value == null) {
                    unsetPage();
                } else {
                    setPage((java.lang.Integer)value);
                }
                break;

            case USER_LIST:
                if (value == null) {
                    unsetUserList();
                } else {
                    setUserList((java.util.List<EmployeeForwardView>)value);
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case TOTAL_COUNT:
                return getTotalCount();

            case PAGE:
                return getPage();

            case USER_LIST:
                return getUserList();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case TOTAL_COUNT:
                return isSetTotalCount();
            case PAGE:
                return isSetPage();
            case USER_LIST:
                return isSetUserList();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof EmployeeForwardViewPage)
            return this.equals((EmployeeForwardViewPage)that);
        return false;
    }

    public boolean equals(EmployeeForwardViewPage that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_totalCount = true && this.isSetTotalCount();
        boolean that_present_totalCount = true && that.isSetTotalCount();
        if (this_present_totalCount || that_present_totalCount) {
            if (!(this_present_totalCount && that_present_totalCount))
                return false;
            if (this.totalCount != that.totalCount)
                return false;
        }

        boolean this_present_page = true && this.isSetPage();
        boolean that_present_page = true && that.isSetPage();
        if (this_present_page || that_present_page) {
            if (!(this_present_page && that_present_page))
                return false;
            if (this.page != that.page)
                return false;
        }

        boolean this_present_userList = true && this.isSetUserList();
        boolean that_present_userList = true && that.isSetUserList();
        if (this_present_userList || that_present_userList) {
            if (!(this_present_userList && that_present_userList))
                return false;
            if (!this.userList.equals(that.userList))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetTotalCount()) ? 131071 : 524287);
        if (isSetTotalCount())
            hashCode = hashCode * 8191 + totalCount;

        hashCode = hashCode * 8191 + ((isSetPage()) ? 131071 : 524287);
        if (isSetPage())
            hashCode = hashCode * 8191 + page;

        hashCode = hashCode * 8191 + ((isSetUserList()) ? 131071 : 524287);
        if (isSetUserList())
            hashCode = hashCode * 8191 + userList.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(EmployeeForwardViewPage other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTotalCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPage()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetUserList()).compareTo(other.isSetUserList());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserList()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userList, other.userList);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("EmployeeForwardViewPage(");
        boolean first = true;

        if (isSetTotalCount()) {
            sb.append("totalCount:");
            sb.append(this.totalCount);
            first = false;
        }
        if (isSetPage()) {
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
        }
        if (isSetUserList()) {
            if (!first) sb.append(", ");
            sb.append("userList:");
            if (this.userList == null) {
                sb.append("null");
            } else {
                sb.append(this.userList);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class EmployeeForwardViewPageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public EmployeeForwardViewPageStandardScheme getScheme() {
            return new EmployeeForwardViewPageStandardScheme();
        }
    }

    private static class EmployeeForwardViewPageStandardScheme extends org.apache.thrift.scheme.StandardScheme<EmployeeForwardViewPage> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, EmployeeForwardViewPage struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TOTAL_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.totalCount = iprot.readI32();
                            struct.setTotalCountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PAGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.page = iprot.readI32();
                            struct.setPageIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // USER_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                                struct.userList = new java.util.ArrayList<EmployeeForwardView>(_list148.size);
                                EmployeeForwardView _elem149;
                                for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                                {
                                    _elem149 = new EmployeeForwardView();
                                    _elem149.read(iprot);
                                    struct.userList.add(_elem149);
                                }
                                iprot.readListEnd();
                            }
                            struct.setUserListIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, EmployeeForwardViewPage struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetTotalCount()) {
                oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
                oprot.writeI32(struct.totalCount);
                oprot.writeFieldEnd();
            }
            if (struct.isSetPage()) {
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
            }
            if (struct.userList != null) {
                if (struct.isSetUserList()) {
                    oprot.writeFieldBegin(USER_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userList.size()));
                        for (EmployeeForwardView _iter151 : struct.userList)
                        {
                            _iter151.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class EmployeeForwardViewPageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public EmployeeForwardViewPageTupleScheme getScheme() {
            return new EmployeeForwardViewPageTupleScheme();
        }
    }

    private static class EmployeeForwardViewPageTupleScheme extends org.apache.thrift.scheme.TupleScheme<EmployeeForwardViewPage> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, EmployeeForwardViewPage struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetTotalCount()) {
                optionals.set(0);
            }
            if (struct.isSetPage()) {
                optionals.set(1);
            }
            if (struct.isSetUserList()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetTotalCount()) {
                oprot.writeI32(struct.totalCount);
            }
            if (struct.isSetPage()) {
                oprot.writeI32(struct.page);
            }
            if (struct.isSetUserList()) {
                {
                    oprot.writeI32(struct.userList.size());
                    for (EmployeeForwardView _iter152 : struct.userList)
                    {
                        _iter152.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, EmployeeForwardViewPage struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.totalCount = iprot.readI32();
                struct.setTotalCountIsSet(true);
            }
            if (incoming.get(1)) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.userList = new java.util.ArrayList<EmployeeForwardView>(_list153.size);
                    EmployeeForwardView _elem154;
                    for (int _i155 = 0; _i155 < _list153.size; ++_i155)
                    {
                        _elem154 = new EmployeeForwardView();
                        _elem154.read(iprot);
                        struct.userList.add(_elem154);
                    }
                }
                struct.setUserListIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

