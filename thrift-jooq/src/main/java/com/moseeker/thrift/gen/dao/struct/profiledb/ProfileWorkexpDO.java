/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.profiledb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class ProfileWorkexpDO implements org.apache.thrift.TBase<ProfileWorkexpDO, ProfileWorkexpDO._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileWorkexpDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileWorkexpDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_UNTIL_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("endUntilNow", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField SALARY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryCode", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField INDUSTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("industryCode", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField INDUSTRY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("industryName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField POSITION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionCode", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField POSITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("positionName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REPORT_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("reportTo", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField UNDERLINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("underlings", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reference", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RESIGN_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("resignReason", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField ACHIEVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("achievement", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProfileWorkexpDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProfileWorkexpDOTupleSchemeFactory();

  public int id; // optional
  public int profileId; // optional
  public String startTime; // optional
  public String endTime; // optional
  public byte endUntilNow; // optional
  public byte salaryCode; // optional
  public int industryCode; // optional
  public String industryName; // optional
  public int companyId; // optional
  public String departmentName; // optional
  public int positionCode; // optional
  public String positionName; // optional
  public String description; // optional
  public byte type; // optional
  public int cityCode; // optional
  public String cityName; // optional
  public String reportTo; // optional
  public int underlings; // optional
  public String reference; // optional
  public String resignReason; // optional
  public String achievement; // optional
  public String createTime; // optional
  public String updateTime; // optional
  public String job; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_ID((short)2, "profileId"),
    START_TIME((short)3, "startTime"),
    END_TIME((short)4, "endTime"),
    END_UNTIL_NOW((short)5, "endUntilNow"),
    SALARY_CODE((short)6, "salaryCode"),
    INDUSTRY_CODE((short)7, "industryCode"),
    INDUSTRY_NAME((short)8, "industryName"),
    COMPANY_ID((short)9, "companyId"),
    DEPARTMENT_NAME((short)10, "departmentName"),
    POSITION_CODE((short)11, "positionCode"),
    POSITION_NAME((short)12, "positionName"),
    DESCRIPTION((short)13, "description"),
    TYPE((short)14, "type"),
    CITY_CODE((short)15, "cityCode"),
    CITY_NAME((short)16, "cityName"),
    REPORT_TO((short)17, "reportTo"),
    UNDERLINGS((short)18, "underlings"),
    REFERENCE((short)19, "reference"),
    RESIGN_REASON((short)20, "resignReason"),
    ACHIEVEMENT((short)21, "achievement"),
    CREATE_TIME((short)22, "createTime"),
    UPDATE_TIME((short)23, "updateTime"),
    JOB((short)24, "job");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        case 5: // END_UNTIL_NOW
          return END_UNTIL_NOW;
        case 6: // SALARY_CODE
          return SALARY_CODE;
        case 7: // INDUSTRY_CODE
          return INDUSTRY_CODE;
        case 8: // INDUSTRY_NAME
          return INDUSTRY_NAME;
        case 9: // COMPANY_ID
          return COMPANY_ID;
        case 10: // DEPARTMENT_NAME
          return DEPARTMENT_NAME;
        case 11: // POSITION_CODE
          return POSITION_CODE;
        case 12: // POSITION_NAME
          return POSITION_NAME;
        case 13: // DESCRIPTION
          return DESCRIPTION;
        case 14: // TYPE
          return TYPE;
        case 15: // CITY_CODE
          return CITY_CODE;
        case 16: // CITY_NAME
          return CITY_NAME;
        case 17: // REPORT_TO
          return REPORT_TO;
        case 18: // UNDERLINGS
          return UNDERLINGS;
        case 19: // REFERENCE
          return REFERENCE;
        case 20: // RESIGN_REASON
          return RESIGN_REASON;
        case 21: // ACHIEVEMENT
          return ACHIEVEMENT;
        case 22: // CREATE_TIME
          return CREATE_TIME;
        case 23: // UPDATE_TIME
          return UPDATE_TIME;
        case 24: // JOB
          return JOB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILEID_ISSET_ID = 1;
  private static final int __ENDUNTILNOW_ISSET_ID = 2;
  private static final int __SALARYCODE_ISSET_ID = 3;
  private static final int __INDUSTRYCODE_ISSET_ID = 4;
  private static final int __COMPANYID_ISSET_ID = 5;
  private static final int __POSITIONCODE_ISSET_ID = 6;
  private static final int __TYPE_ISSET_ID = 7;
  private static final int __CITYCODE_ISSET_ID = 8;
  private static final int __UNDERLINGS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PROFILE_ID,_Fields.START_TIME,_Fields.END_TIME,_Fields.END_UNTIL_NOW,_Fields.SALARY_CODE,_Fields.INDUSTRY_CODE,_Fields.INDUSTRY_NAME,_Fields.COMPANY_ID,_Fields.DEPARTMENT_NAME,_Fields.POSITION_CODE,_Fields.POSITION_NAME,_Fields.DESCRIPTION,_Fields.TYPE,_Fields.CITY_CODE,_Fields.CITY_NAME,_Fields.REPORT_TO,_Fields.UNDERLINGS,_Fields.REFERENCE,_Fields.RESIGN_REASON,_Fields.ACHIEVEMENT,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.JOB};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_UNTIL_NOW, new org.apache.thrift.meta_data.FieldMetaData("endUntilNow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SALARY_CODE, new org.apache.thrift.meta_data.FieldMetaData("salaryCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.INDUSTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("industryCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDUSTRY_NAME, new org.apache.thrift.meta_data.FieldMetaData("industryName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("departmentName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_CODE, new org.apache.thrift.meta_data.FieldMetaData("positionCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("positionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT_TO, new org.apache.thrift.meta_data.FieldMetaData("reportTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNDERLINGS, new org.apache.thrift.meta_data.FieldMetaData("underlings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("reference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESIGN_REASON, new org.apache.thrift.meta_data.FieldMetaData("resignReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACHIEVEMENT, new org.apache.thrift.meta_data.FieldMetaData("achievement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileWorkexpDO.class, metaDataMap);
  }

  public ProfileWorkexpDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileWorkexpDO(ProfileWorkexpDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profileId = other.profileId;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.endUntilNow = other.endUntilNow;
    this.salaryCode = other.salaryCode;
    this.industryCode = other.industryCode;
    if (other.isSetIndustryName()) {
      this.industryName = other.industryName;
    }
    this.companyId = other.companyId;
    if (other.isSetDepartmentName()) {
      this.departmentName = other.departmentName;
    }
    this.positionCode = other.positionCode;
    if (other.isSetPositionName()) {
      this.positionName = other.positionName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.type = other.type;
    this.cityCode = other.cityCode;
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    if (other.isSetReportTo()) {
      this.reportTo = other.reportTo;
    }
    this.underlings = other.underlings;
    if (other.isSetReference()) {
      this.reference = other.reference;
    }
    if (other.isSetResignReason()) {
      this.resignReason = other.resignReason;
    }
    if (other.isSetAchievement()) {
      this.achievement = other.achievement;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetJob()) {
      this.job = other.job;
    }
  }

  public ProfileWorkexpDO deepCopy() {
    return new ProfileWorkexpDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfileIdIsSet(false);
    this.profileId = 0;
    this.startTime = null;
    this.endTime = null;
    setEndUntilNowIsSet(false);
    this.endUntilNow = 0;
    setSalaryCodeIsSet(false);
    this.salaryCode = 0;
    setIndustryCodeIsSet(false);
    this.industryCode = 0;
    this.industryName = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.departmentName = null;
    setPositionCodeIsSet(false);
    this.positionCode = 0;
    this.positionName = null;
    this.description = null;
    setTypeIsSet(false);
    this.type = 0;
    setCityCodeIsSet(false);
    this.cityCode = 0;
    this.cityName = null;
    this.reportTo = null;
    setUnderlingsIsSet(false);
    this.underlings = 0;
    this.reference = null;
    this.resignReason = null;
    this.achievement = null;
    this.createTime = null;
    this.updateTime = null;
    this.job = null;
  }

  public int getId() {
    return this.id;
  }

  public ProfileWorkexpDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfileId() {
    return this.profileId;
  }

  public ProfileWorkexpDO setProfileId(int profileId) {
    this.profileId = profileId;
    setProfileIdIsSet(true);
    return this;
  }

  public void unsetProfileId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  public void setProfileIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILEID_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public ProfileWorkexpDO setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public ProfileWorkexpDO setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public byte getEndUntilNow() {
    return this.endUntilNow;
  }

  public ProfileWorkexpDO setEndUntilNow(byte endUntilNow) {
    this.endUntilNow = endUntilNow;
    setEndUntilNowIsSet(true);
    return this;
  }

  public void unsetEndUntilNow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID);
  }

  /** Returns true if field endUntilNow is set (has been assigned a value) and false otherwise */
  public boolean isSetEndUntilNow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID);
  }

  public void setEndUntilNowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID, value);
  }

  public byte getSalaryCode() {
    return this.salaryCode;
  }

  public ProfileWorkexpDO setSalaryCode(byte salaryCode) {
    this.salaryCode = salaryCode;
    setSalaryCodeIsSet(true);
    return this;
  }

  public void unsetSalaryCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARYCODE_ISSET_ID);
  }

  /** Returns true if field salaryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARYCODE_ISSET_ID);
  }

  public void setSalaryCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARYCODE_ISSET_ID, value);
  }

  public int getIndustryCode() {
    return this.industryCode;
  }

  public ProfileWorkexpDO setIndustryCode(int industryCode) {
    this.industryCode = industryCode;
    setIndustryCodeIsSet(true);
    return this;
  }

  public void unsetIndustryCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDUSTRYCODE_ISSET_ID);
  }

  /** Returns true if field industryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustryCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDUSTRYCODE_ISSET_ID);
  }

  public void setIndustryCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDUSTRYCODE_ISSET_ID, value);
  }

  public String getIndustryName() {
    return this.industryName;
  }

  public ProfileWorkexpDO setIndustryName(String industryName) {
    this.industryName = industryName;
    return this;
  }

  public void unsetIndustryName() {
    this.industryName = null;
  }

  /** Returns true if field industryName is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustryName() {
    return this.industryName != null;
  }

  public void setIndustryNameIsSet(boolean value) {
    if (!value) {
      this.industryName = null;
    }
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public ProfileWorkexpDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public String getDepartmentName() {
    return this.departmentName;
  }

  public ProfileWorkexpDO setDepartmentName(String departmentName) {
    this.departmentName = departmentName;
    return this;
  }

  public void unsetDepartmentName() {
    this.departmentName = null;
  }

  /** Returns true if field departmentName is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentName() {
    return this.departmentName != null;
  }

  public void setDepartmentNameIsSet(boolean value) {
    if (!value) {
      this.departmentName = null;
    }
  }

  public int getPositionCode() {
    return this.positionCode;
  }

  public ProfileWorkexpDO setPositionCode(int positionCode) {
    this.positionCode = positionCode;
    setPositionCodeIsSet(true);
    return this;
  }

  public void unsetPositionCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONCODE_ISSET_ID);
  }

  /** Returns true if field positionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONCODE_ISSET_ID);
  }

  public void setPositionCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONCODE_ISSET_ID, value);
  }

  public String getPositionName() {
    return this.positionName;
  }

  public ProfileWorkexpDO setPositionName(String positionName) {
    this.positionName = positionName;
    return this;
  }

  public void unsetPositionName() {
    this.positionName = null;
  }

  /** Returns true if field positionName is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionName() {
    return this.positionName != null;
  }

  public void setPositionNameIsSet(boolean value) {
    if (!value) {
      this.positionName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ProfileWorkexpDO setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public byte getType() {
    return this.type;
  }

  public ProfileWorkexpDO setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getCityCode() {
    return this.cityCode;
  }

  public ProfileWorkexpDO setCityCode(int cityCode) {
    this.cityCode = cityCode;
    setCityCodeIsSet(true);
    return this;
  }

  public void unsetCityCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CITYCODE_ISSET_ID);
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CITYCODE_ISSET_ID);
  }

  public void setCityCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CITYCODE_ISSET_ID, value);
  }

  public String getCityName() {
    return this.cityName;
  }

  public ProfileWorkexpDO setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public String getReportTo() {
    return this.reportTo;
  }

  public ProfileWorkexpDO setReportTo(String reportTo) {
    this.reportTo = reportTo;
    return this;
  }

  public void unsetReportTo() {
    this.reportTo = null;
  }

  /** Returns true if field reportTo is set (has been assigned a value) and false otherwise */
  public boolean isSetReportTo() {
    return this.reportTo != null;
  }

  public void setReportToIsSet(boolean value) {
    if (!value) {
      this.reportTo = null;
    }
  }

  public int getUnderlings() {
    return this.underlings;
  }

  public ProfileWorkexpDO setUnderlings(int underlings) {
    this.underlings = underlings;
    setUnderlingsIsSet(true);
    return this;
  }

  public void unsetUnderlings() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNDERLINGS_ISSET_ID);
  }

  /** Returns true if field underlings is set (has been assigned a value) and false otherwise */
  public boolean isSetUnderlings() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNDERLINGS_ISSET_ID);
  }

  public void setUnderlingsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNDERLINGS_ISSET_ID, value);
  }

  public String getReference() {
    return this.reference;
  }

  public ProfileWorkexpDO setReference(String reference) {
    this.reference = reference;
    return this;
  }

  public void unsetReference() {
    this.reference = null;
  }

  /** Returns true if field reference is set (has been assigned a value) and false otherwise */
  public boolean isSetReference() {
    return this.reference != null;
  }

  public void setReferenceIsSet(boolean value) {
    if (!value) {
      this.reference = null;
    }
  }

  public String getResignReason() {
    return this.resignReason;
  }

  public ProfileWorkexpDO setResignReason(String resignReason) {
    this.resignReason = resignReason;
    return this;
  }

  public void unsetResignReason() {
    this.resignReason = null;
  }

  /** Returns true if field resignReason is set (has been assigned a value) and false otherwise */
  public boolean isSetResignReason() {
    return this.resignReason != null;
  }

  public void setResignReasonIsSet(boolean value) {
    if (!value) {
      this.resignReason = null;
    }
  }

  public String getAchievement() {
    return this.achievement;
  }

  public ProfileWorkexpDO setAchievement(String achievement) {
    this.achievement = achievement;
    return this;
  }

  public void unsetAchievement() {
    this.achievement = null;
  }

  /** Returns true if field achievement is set (has been assigned a value) and false otherwise */
  public boolean isSetAchievement() {
    return this.achievement != null;
  }

  public void setAchievementIsSet(boolean value) {
    if (!value) {
      this.achievement = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProfileWorkexpDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProfileWorkexpDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getJob() {
    return this.job;
  }

  public ProfileWorkexpDO setJob(String job) {
    this.job = job;
    return this;
  }

  public void unsetJob() {
    this.job = null;
  }

  /** Returns true if field job is set (has been assigned a value) and false otherwise */
  public boolean isSetJob() {
    return this.job != null;
  }

  public void setJobIsSet(boolean value) {
    if (!value) {
      this.job = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfileId();
      } else {
        setProfileId((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case END_UNTIL_NOW:
      if (value == null) {
        unsetEndUntilNow();
      } else {
        setEndUntilNow((Byte)value);
      }
      break;

    case SALARY_CODE:
      if (value == null) {
        unsetSalaryCode();
      } else {
        setSalaryCode((Byte)value);
      }
      break;

    case INDUSTRY_CODE:
      if (value == null) {
        unsetIndustryCode();
      } else {
        setIndustryCode((Integer)value);
      }
      break;

    case INDUSTRY_NAME:
      if (value == null) {
        unsetIndustryName();
      } else {
        setIndustryName((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case DEPARTMENT_NAME:
      if (value == null) {
        unsetDepartmentName();
      } else {
        setDepartmentName((String)value);
      }
      break;

    case POSITION_CODE:
      if (value == null) {
        unsetPositionCode();
      } else {
        setPositionCode((Integer)value);
      }
      break;

    case POSITION_NAME:
      if (value == null) {
        unsetPositionName();
      } else {
        setPositionName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Byte)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((Integer)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case REPORT_TO:
      if (value == null) {
        unsetReportTo();
      } else {
        setReportTo((String)value);
      }
      break;

    case UNDERLINGS:
      if (value == null) {
        unsetUnderlings();
      } else {
        setUnderlings((Integer)value);
      }
      break;

    case REFERENCE:
      if (value == null) {
        unsetReference();
      } else {
        setReference((String)value);
      }
      break;

    case RESIGN_REASON:
      if (value == null) {
        unsetResignReason();
      } else {
        setResignReason((String)value);
      }
      break;

    case ACHIEVEMENT:
      if (value == null) {
        unsetAchievement();
      } else {
        setAchievement((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case JOB:
      if (value == null) {
        unsetJob();
      } else {
        setJob((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PROFILE_ID:
      return getProfileId();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case END_UNTIL_NOW:
      return getEndUntilNow();

    case SALARY_CODE:
      return getSalaryCode();

    case INDUSTRY_CODE:
      return getIndustryCode();

    case INDUSTRY_NAME:
      return getIndustryName();

    case COMPANY_ID:
      return getCompanyId();

    case DEPARTMENT_NAME:
      return getDepartmentName();

    case POSITION_CODE:
      return getPositionCode();

    case POSITION_NAME:
      return getPositionName();

    case DESCRIPTION:
      return getDescription();

    case TYPE:
      return getType();

    case CITY_CODE:
      return getCityCode();

    case CITY_NAME:
      return getCityName();

    case REPORT_TO:
      return getReportTo();

    case UNDERLINGS:
      return getUnderlings();

    case REFERENCE:
      return getReference();

    case RESIGN_REASON:
      return getResignReason();

    case ACHIEVEMENT:
      return getAchievement();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case JOB:
      return getJob();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_ID:
      return isSetProfileId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case END_UNTIL_NOW:
      return isSetEndUntilNow();
    case SALARY_CODE:
      return isSetSalaryCode();
    case INDUSTRY_CODE:
      return isSetIndustryCode();
    case INDUSTRY_NAME:
      return isSetIndustryName();
    case COMPANY_ID:
      return isSetCompanyId();
    case DEPARTMENT_NAME:
      return isSetDepartmentName();
    case POSITION_CODE:
      return isSetPositionCode();
    case POSITION_NAME:
      return isSetPositionName();
    case DESCRIPTION:
      return isSetDescription();
    case TYPE:
      return isSetType();
    case CITY_CODE:
      return isSetCityCode();
    case CITY_NAME:
      return isSetCityName();
    case REPORT_TO:
      return isSetReportTo();
    case UNDERLINGS:
      return isSetUnderlings();
    case REFERENCE:
      return isSetReference();
    case RESIGN_REASON:
      return isSetResignReason();
    case ACHIEVEMENT:
      return isSetAchievement();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case JOB:
      return isSetJob();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileWorkexpDO)
      return this.equals((ProfileWorkexpDO)that);
    return false;
  }

  public boolean equals(ProfileWorkexpDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profileId = true && this.isSetProfileId();
    boolean that_present_profileId = true && that.isSetProfileId();
    if (this_present_profileId || that_present_profileId) {
      if (!(this_present_profileId && that_present_profileId))
        return false;
      if (this.profileId != that.profileId)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_endUntilNow = true && this.isSetEndUntilNow();
    boolean that_present_endUntilNow = true && that.isSetEndUntilNow();
    if (this_present_endUntilNow || that_present_endUntilNow) {
      if (!(this_present_endUntilNow && that_present_endUntilNow))
        return false;
      if (this.endUntilNow != that.endUntilNow)
        return false;
    }

    boolean this_present_salaryCode = true && this.isSetSalaryCode();
    boolean that_present_salaryCode = true && that.isSetSalaryCode();
    if (this_present_salaryCode || that_present_salaryCode) {
      if (!(this_present_salaryCode && that_present_salaryCode))
        return false;
      if (this.salaryCode != that.salaryCode)
        return false;
    }

    boolean this_present_industryCode = true && this.isSetIndustryCode();
    boolean that_present_industryCode = true && that.isSetIndustryCode();
    if (this_present_industryCode || that_present_industryCode) {
      if (!(this_present_industryCode && that_present_industryCode))
        return false;
      if (this.industryCode != that.industryCode)
        return false;
    }

    boolean this_present_industryName = true && this.isSetIndustryName();
    boolean that_present_industryName = true && that.isSetIndustryName();
    if (this_present_industryName || that_present_industryName) {
      if (!(this_present_industryName && that_present_industryName))
        return false;
      if (!this.industryName.equals(that.industryName))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_departmentName = true && this.isSetDepartmentName();
    boolean that_present_departmentName = true && that.isSetDepartmentName();
    if (this_present_departmentName || that_present_departmentName) {
      if (!(this_present_departmentName && that_present_departmentName))
        return false;
      if (!this.departmentName.equals(that.departmentName))
        return false;
    }

    boolean this_present_positionCode = true && this.isSetPositionCode();
    boolean that_present_positionCode = true && that.isSetPositionCode();
    if (this_present_positionCode || that_present_positionCode) {
      if (!(this_present_positionCode && that_present_positionCode))
        return false;
      if (this.positionCode != that.positionCode)
        return false;
    }

    boolean this_present_positionName = true && this.isSetPositionName();
    boolean that_present_positionName = true && that.isSetPositionName();
    if (this_present_positionName || that_present_positionName) {
      if (!(this_present_positionName && that_present_positionName))
        return false;
      if (!this.positionName.equals(that.positionName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (this.cityCode != that.cityCode)
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_reportTo = true && this.isSetReportTo();
    boolean that_present_reportTo = true && that.isSetReportTo();
    if (this_present_reportTo || that_present_reportTo) {
      if (!(this_present_reportTo && that_present_reportTo))
        return false;
      if (!this.reportTo.equals(that.reportTo))
        return false;
    }

    boolean this_present_underlings = true && this.isSetUnderlings();
    boolean that_present_underlings = true && that.isSetUnderlings();
    if (this_present_underlings || that_present_underlings) {
      if (!(this_present_underlings && that_present_underlings))
        return false;
      if (this.underlings != that.underlings)
        return false;
    }

    boolean this_present_reference = true && this.isSetReference();
    boolean that_present_reference = true && that.isSetReference();
    if (this_present_reference || that_present_reference) {
      if (!(this_present_reference && that_present_reference))
        return false;
      if (!this.reference.equals(that.reference))
        return false;
    }

    boolean this_present_resignReason = true && this.isSetResignReason();
    boolean that_present_resignReason = true && that.isSetResignReason();
    if (this_present_resignReason || that_present_resignReason) {
      if (!(this_present_resignReason && that_present_resignReason))
        return false;
      if (!this.resignReason.equals(that.resignReason))
        return false;
    }

    boolean this_present_achievement = true && this.isSetAchievement();
    boolean that_present_achievement = true && that.isSetAchievement();
    if (this_present_achievement || that_present_achievement) {
      if (!(this_present_achievement && that_present_achievement))
        return false;
      if (!this.achievement.equals(that.achievement))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_job = true && this.isSetJob();
    boolean that_present_job = true && that.isSetJob();
    if (this_present_job || that_present_job) {
      if (!(this_present_job && that_present_job))
        return false;
      if (!this.job.equals(that.job))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetProfileId()) ? 131071 : 524287);
    if (isSetProfileId())
      hashCode = hashCode * 8191 + profileId;

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndUntilNow()) ? 131071 : 524287);
    if (isSetEndUntilNow())
      hashCode = hashCode * 8191 + (int) (endUntilNow);

    hashCode = hashCode * 8191 + ((isSetSalaryCode()) ? 131071 : 524287);
    if (isSetSalaryCode())
      hashCode = hashCode * 8191 + (int) (salaryCode);

    hashCode = hashCode * 8191 + ((isSetIndustryCode()) ? 131071 : 524287);
    if (isSetIndustryCode())
      hashCode = hashCode * 8191 + industryCode;

    hashCode = hashCode * 8191 + ((isSetIndustryName()) ? 131071 : 524287);
    if (isSetIndustryName())
      hashCode = hashCode * 8191 + industryName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetDepartmentName()) ? 131071 : 524287);
    if (isSetDepartmentName())
      hashCode = hashCode * 8191 + departmentName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPositionCode()) ? 131071 : 524287);
    if (isSetPositionCode())
      hashCode = hashCode * 8191 + positionCode;

    hashCode = hashCode * 8191 + ((isSetPositionName()) ? 131071 : 524287);
    if (isSetPositionName())
      hashCode = hashCode * 8191 + positionName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + ((isSetCityCode()) ? 131071 : 524287);
    if (isSetCityCode())
      hashCode = hashCode * 8191 + cityCode;

    hashCode = hashCode * 8191 + ((isSetCityName()) ? 131071 : 524287);
    if (isSetCityName())
      hashCode = hashCode * 8191 + cityName.hashCode();

    hashCode = hashCode * 8191 + ((isSetReportTo()) ? 131071 : 524287);
    if (isSetReportTo())
      hashCode = hashCode * 8191 + reportTo.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnderlings()) ? 131071 : 524287);
    if (isSetUnderlings())
      hashCode = hashCode * 8191 + underlings;

    hashCode = hashCode * 8191 + ((isSetReference()) ? 131071 : 524287);
    if (isSetReference())
      hashCode = hashCode * 8191 + reference.hashCode();

    hashCode = hashCode * 8191 + ((isSetResignReason()) ? 131071 : 524287);
    if (isSetResignReason())
      hashCode = hashCode * 8191 + resignReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetAchievement()) ? 131071 : 524287);
    if (isSetAchievement())
      hashCode = hashCode * 8191 + achievement.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetJob()) ? 131071 : 524287);
    if (isSetJob())
      hashCode = hashCode * 8191 + job.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProfileWorkexpDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndUntilNow()).compareTo(other.isSetEndUntilNow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndUntilNow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endUntilNow, other.endUntilNow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryCode()).compareTo(other.isSetSalaryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryCode, other.salaryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustryCode()).compareTo(other.isSetIndustryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industryCode, other.industryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustryName()).compareTo(other.isSetIndustryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industryName, other.industryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentName()).compareTo(other.isSetDepartmentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentName, other.departmentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionCode()).compareTo(other.isSetPositionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionCode, other.positionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionName()).compareTo(other.isSetPositionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionName, other.positionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportTo()).compareTo(other.isSetReportTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportTo, other.reportTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnderlings()).compareTo(other.isSetUnderlings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnderlings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.underlings, other.underlings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReference()).compareTo(other.isSetReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference, other.reference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResignReason()).compareTo(other.isSetResignReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResignReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resignReason, other.resignReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAchievement()).compareTo(other.isSetAchievement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAchievement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.achievement, other.achievement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileWorkexpDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetProfileId()) {
      if (!first) sb.append(", ");
      sb.append("profileId:");
      sb.append(this.profileId);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetEndUntilNow()) {
      if (!first) sb.append(", ");
      sb.append("endUntilNow:");
      sb.append(this.endUntilNow);
      first = false;
    }
    if (isSetSalaryCode()) {
      if (!first) sb.append(", ");
      sb.append("salaryCode:");
      sb.append(this.salaryCode);
      first = false;
    }
    if (isSetIndustryCode()) {
      if (!first) sb.append(", ");
      sb.append("industryCode:");
      sb.append(this.industryCode);
      first = false;
    }
    if (isSetIndustryName()) {
      if (!first) sb.append(", ");
      sb.append("industryName:");
      if (this.industryName == null) {
        sb.append("null");
      } else {
        sb.append(this.industryName);
      }
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetDepartmentName()) {
      if (!first) sb.append(", ");
      sb.append("departmentName:");
      if (this.departmentName == null) {
        sb.append("null");
      } else {
        sb.append(this.departmentName);
      }
      first = false;
    }
    if (isSetPositionCode()) {
      if (!first) sb.append(", ");
      sb.append("positionCode:");
      sb.append(this.positionCode);
      first = false;
    }
    if (isSetPositionName()) {
      if (!first) sb.append(", ");
      sb.append("positionName:");
      if (this.positionName == null) {
        sb.append("null");
      } else {
        sb.append(this.positionName);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetCityCode()) {
      if (!first) sb.append(", ");
      sb.append("cityCode:");
      sb.append(this.cityCode);
      first = false;
    }
    if (isSetCityName()) {
      if (!first) sb.append(", ");
      sb.append("cityName:");
      if (this.cityName == null) {
        sb.append("null");
      } else {
        sb.append(this.cityName);
      }
      first = false;
    }
    if (isSetReportTo()) {
      if (!first) sb.append(", ");
      sb.append("reportTo:");
      if (this.reportTo == null) {
        sb.append("null");
      } else {
        sb.append(this.reportTo);
      }
      first = false;
    }
    if (isSetUnderlings()) {
      if (!first) sb.append(", ");
      sb.append("underlings:");
      sb.append(this.underlings);
      first = false;
    }
    if (isSetReference()) {
      if (!first) sb.append(", ");
      sb.append("reference:");
      if (this.reference == null) {
        sb.append("null");
      } else {
        sb.append(this.reference);
      }
      first = false;
    }
    if (isSetResignReason()) {
      if (!first) sb.append(", ");
      sb.append("resignReason:");
      if (this.resignReason == null) {
        sb.append("null");
      } else {
        sb.append(this.resignReason);
      }
      first = false;
    }
    if (isSetAchievement()) {
      if (!first) sb.append(", ");
      sb.append("achievement:");
      if (this.achievement == null) {
        sb.append("null");
      } else {
        sb.append(this.achievement);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetJob()) {
      if (!first) sb.append(", ");
      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileWorkexpDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileWorkexpDOStandardScheme getScheme() {
      return new ProfileWorkexpDOStandardScheme();
    }
  }

  private static class ProfileWorkexpDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProfileWorkexpDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileWorkexpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profileId = iprot.readI32();
              struct.setProfileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_UNTIL_NOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.endUntilNow = iprot.readByte();
              struct.setEndUntilNowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SALARY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.salaryCode = iprot.readByte();
              struct.setSalaryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INDUSTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.industryCode = iprot.readI32();
              struct.setIndustryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INDUSTRY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.industryName = iprot.readString();
              struct.setIndustryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEPARTMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.departmentName = iprot.readString();
              struct.setDepartmentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POSITION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionCode = iprot.readI32();
              struct.setPositionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POSITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionName = iprot.readString();
              struct.setPositionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cityCode = iprot.readI32();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REPORT_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportTo = iprot.readString();
              struct.setReportToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UNDERLINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.underlings = iprot.readI32();
              struct.setUnderlingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reference = iprot.readString();
              struct.setReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RESIGN_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resignReason = iprot.readString();
              struct.setResignReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ACHIEVEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.achievement = iprot.readString();
              struct.setAchievementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.job = iprot.readString();
              struct.setJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileWorkexpDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfileId()) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeI32(struct.profileId);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEndUntilNow()) {
        oprot.writeFieldBegin(END_UNTIL_NOW_FIELD_DESC);
        oprot.writeByte(struct.endUntilNow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalaryCode()) {
        oprot.writeFieldBegin(SALARY_CODE_FIELD_DESC);
        oprot.writeByte(struct.salaryCode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndustryCode()) {
        oprot.writeFieldBegin(INDUSTRY_CODE_FIELD_DESC);
        oprot.writeI32(struct.industryCode);
        oprot.writeFieldEnd();
      }
      if (struct.industryName != null) {
        if (struct.isSetIndustryName()) {
          oprot.writeFieldBegin(INDUSTRY_NAME_FIELD_DESC);
          oprot.writeString(struct.industryName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.departmentName != null) {
        if (struct.isSetDepartmentName()) {
          oprot.writeFieldBegin(DEPARTMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.departmentName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionCode()) {
        oprot.writeFieldBegin(POSITION_CODE_FIELD_DESC);
        oprot.writeI32(struct.positionCode);
        oprot.writeFieldEnd();
      }
      if (struct.positionName != null) {
        if (struct.isSetPositionName()) {
          oprot.writeFieldBegin(POSITION_NAME_FIELD_DESC);
          oprot.writeString(struct.positionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCityCode()) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeI32(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        if (struct.isSetCityName()) {
          oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.cityName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reportTo != null) {
        if (struct.isSetReportTo()) {
          oprot.writeFieldBegin(REPORT_TO_FIELD_DESC);
          oprot.writeString(struct.reportTo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUnderlings()) {
        oprot.writeFieldBegin(UNDERLINGS_FIELD_DESC);
        oprot.writeI32(struct.underlings);
        oprot.writeFieldEnd();
      }
      if (struct.reference != null) {
        if (struct.isSetReference()) {
          oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
          oprot.writeString(struct.reference);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resignReason != null) {
        if (struct.isSetResignReason()) {
          oprot.writeFieldBegin(RESIGN_REASON_FIELD_DESC);
          oprot.writeString(struct.resignReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.achievement != null) {
        if (struct.isSetAchievement()) {
          oprot.writeFieldBegin(ACHIEVEMENT_FIELD_DESC);
          oprot.writeString(struct.achievement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.job != null) {
        if (struct.isSetJob()) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          oprot.writeString(struct.job);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileWorkexpDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileWorkexpDOTupleScheme getScheme() {
      return new ProfileWorkexpDOTupleScheme();
    }
  }

  private static class ProfileWorkexpDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProfileWorkexpDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileWorkexpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfileId()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetEndUntilNow()) {
        optionals.set(4);
      }
      if (struct.isSetSalaryCode()) {
        optionals.set(5);
      }
      if (struct.isSetIndustryCode()) {
        optionals.set(6);
      }
      if (struct.isSetIndustryName()) {
        optionals.set(7);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(8);
      }
      if (struct.isSetDepartmentName()) {
        optionals.set(9);
      }
      if (struct.isSetPositionCode()) {
        optionals.set(10);
      }
      if (struct.isSetPositionName()) {
        optionals.set(11);
      }
      if (struct.isSetDescription()) {
        optionals.set(12);
      }
      if (struct.isSetType()) {
        optionals.set(13);
      }
      if (struct.isSetCityCode()) {
        optionals.set(14);
      }
      if (struct.isSetCityName()) {
        optionals.set(15);
      }
      if (struct.isSetReportTo()) {
        optionals.set(16);
      }
      if (struct.isSetUnderlings()) {
        optionals.set(17);
      }
      if (struct.isSetReference()) {
        optionals.set(18);
      }
      if (struct.isSetResignReason()) {
        optionals.set(19);
      }
      if (struct.isSetAchievement()) {
        optionals.set(20);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(21);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(22);
      }
      if (struct.isSetJob()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfileId()) {
        oprot.writeI32(struct.profileId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetEndUntilNow()) {
        oprot.writeByte(struct.endUntilNow);
      }
      if (struct.isSetSalaryCode()) {
        oprot.writeByte(struct.salaryCode);
      }
      if (struct.isSetIndustryCode()) {
        oprot.writeI32(struct.industryCode);
      }
      if (struct.isSetIndustryName()) {
        oprot.writeString(struct.industryName);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetDepartmentName()) {
        oprot.writeString(struct.departmentName);
      }
      if (struct.isSetPositionCode()) {
        oprot.writeI32(struct.positionCode);
      }
      if (struct.isSetPositionName()) {
        oprot.writeString(struct.positionName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetCityCode()) {
        oprot.writeI32(struct.cityCode);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetReportTo()) {
        oprot.writeString(struct.reportTo);
      }
      if (struct.isSetUnderlings()) {
        oprot.writeI32(struct.underlings);
      }
      if (struct.isSetReference()) {
        oprot.writeString(struct.reference);
      }
      if (struct.isSetResignReason()) {
        oprot.writeString(struct.resignReason);
      }
      if (struct.isSetAchievement()) {
        oprot.writeString(struct.achievement);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetJob()) {
        oprot.writeString(struct.job);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileWorkexpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profileId = iprot.readI32();
        struct.setProfileIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endUntilNow = iprot.readByte();
        struct.setEndUntilNowIsSet(true);
      }
      if (incoming.get(5)) {
        struct.salaryCode = iprot.readByte();
        struct.setSalaryCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.industryCode = iprot.readI32();
        struct.setIndustryCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.industryName = iprot.readString();
        struct.setIndustryNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.departmentName = iprot.readString();
        struct.setDepartmentNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.positionCode = iprot.readI32();
        struct.setPositionCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.positionName = iprot.readString();
        struct.setPositionNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cityCode = iprot.readI32();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.reportTo = iprot.readString();
        struct.setReportToIsSet(true);
      }
      if (incoming.get(17)) {
        struct.underlings = iprot.readI32();
        struct.setUnderlingsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.reference = iprot.readString();
        struct.setReferenceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.resignReason = iprot.readString();
        struct.setResignReasonIsSet(true);
      }
      if (incoming.get(20)) {
        struct.achievement = iprot.readString();
        struct.setAchievementIsSet(true);
      }
      if (incoming.get(21)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.job = iprot.readString();
        struct.setJobIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

