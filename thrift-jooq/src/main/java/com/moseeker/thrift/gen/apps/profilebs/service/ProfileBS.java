/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.apps.profilebs.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-27")
public class ProfileBS {

  /**
   * TODO:list what notation this dateTime represents. eg ISO-8601
   * or if its in the format like YYYY-mm-DD you mentioned.
   */
  public interface Iface {

    public com.moseeker.thrift.gen.common.struct.Response retrieveProfile(int positionId, int channel, String profile, String newchannel) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response profileProcess(int company_id, int progress_status, java.util.List<Integer> aids, int account_id) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response profileProcessAts(int progress_status, String aids) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void retrieveProfile(int positionId, int channel, String profile, String newchannel, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void profileProcess(int company_id, int progress_status, java.util.List<Integer> aids, int account_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void profileProcessAts(int progress_status, String aids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.moseeker.thrift.gen.common.struct.Response retrieveProfile(int positionId, int channel, String profile, String newchannel) throws org.apache.thrift.TException
    {
      send_retrieveProfile(positionId, channel, profile, newchannel);
      return recv_retrieveProfile();
    }

    public void send_retrieveProfile(int positionId, int channel, String profile, String newchannel) throws org.apache.thrift.TException
    {
      retrieveProfile_args args = new retrieveProfile_args();
      args.setPositionId(positionId);
      args.setChannel(channel);
      args.setProfile(profile);
      args.setNewchannel(newchannel);
      sendBase("retrieveProfile", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_retrieveProfile() throws org.apache.thrift.TException
    {
      retrieveProfile_result result = new retrieveProfile_result();
      receiveBase(result, "retrieveProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveProfile failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response profileProcess(int company_id, int progress_status, java.util.List<Integer> aids, int account_id) throws org.apache.thrift.TException
    {
      send_profileProcess(company_id, progress_status, aids, account_id);
      return recv_profileProcess();
    }

    public void send_profileProcess(int company_id, int progress_status, java.util.List<Integer> aids, int account_id) throws org.apache.thrift.TException
    {
      profileProcess_args args = new profileProcess_args();
      args.setCompany_id(company_id);
      args.setProgress_status(progress_status);
      args.setAids(aids);
      args.setAccount_id(account_id);
      sendBase("profileProcess", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_profileProcess() throws org.apache.thrift.TException
    {
      profileProcess_result result = new profileProcess_result();
      receiveBase(result, "profileProcess");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "profileProcess failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response profileProcessAts(int progress_status, String aids) throws org.apache.thrift.TException
    {
      send_profileProcessAts(progress_status, aids);
      return recv_profileProcessAts();
    }

    public void send_profileProcessAts(int progress_status, String aids) throws org.apache.thrift.TException
    {
      profileProcessAts_args args = new profileProcessAts_args();
      args.setProgress_status(progress_status);
      args.setAids(aids);
      sendBase("profileProcessAts", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_profileProcessAts() throws org.apache.thrift.TException
    {
      profileProcessAts_result result = new profileProcessAts_result();
      receiveBase(result, "profileProcessAts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "profileProcessAts failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void retrieveProfile(int positionId, int channel, String profile, String newchannel, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retrieveProfile_call method_call = new retrieveProfile_call(positionId, channel, profile, newchannel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int positionId;
      private int channel;
      private String profile;
      private String newchannel;
      public retrieveProfile_call(int positionId, int channel, String profile, String newchannel, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.positionId = positionId;
        this.channel = channel;
        this.profile = profile;
        this.newchannel = newchannel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveProfile_args args = new retrieveProfile_args();
        args.setPositionId(positionId);
        args.setChannel(channel);
        args.setProfile(profile);
        args.setNewchannel(newchannel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveProfile();
      }
    }

    public void profileProcess(int company_id, int progress_status, java.util.List<Integer> aids, int account_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      profileProcess_call method_call = new profileProcess_call(company_id, progress_status, aids, account_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class profileProcess_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int company_id;
      private int progress_status;
      private java.util.List<Integer> aids;
      private int account_id;
      public profileProcess_call(int company_id, int progress_status, java.util.List<Integer> aids, int account_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.company_id = company_id;
        this.progress_status = progress_status;
        this.aids = aids;
        this.account_id = account_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("profileProcess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        profileProcess_args args = new profileProcess_args();
        args.setCompany_id(company_id);
        args.setProgress_status(progress_status);
        args.setAids(aids);
        args.setAccount_id(account_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_profileProcess();
      }
    }

    public void profileProcessAts(int progress_status, String aids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      profileProcessAts_call method_call = new profileProcessAts_call(progress_status, aids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class profileProcessAts_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int progress_status;
      private String aids;
      public profileProcessAts_call(int progress_status, String aids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.progress_status = progress_status;
        this.aids = aids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("profileProcessAts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        profileProcessAts_args args = new profileProcessAts_args();
        args.setProgress_status(progress_status);
        args.setAids(aids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_profileProcessAts();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("retrieveProfile", new retrieveProfile());
      processMap.put("profileProcess", new profileProcess());
      processMap.put("profileProcessAts", new profileProcessAts());
      return processMap;
    }

    public static class retrieveProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveProfile_args> {
      public retrieveProfile() {
        super("retrieveProfile");
      }

      public retrieveProfile_args getEmptyArgsInstance() {
        return new retrieveProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveProfile_result getResult(I iface, retrieveProfile_args args) throws org.apache.thrift.TException {
        retrieveProfile_result result = new retrieveProfile_result();
        result.success = iface.retrieveProfile(args.positionId, args.channel, args.profile, args.newchannel);
        return result;
      }
    }

    public static class profileProcess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, profileProcess_args> {
      public profileProcess() {
        super("profileProcess");
      }

      public profileProcess_args getEmptyArgsInstance() {
        return new profileProcess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public profileProcess_result getResult(I iface, profileProcess_args args) throws org.apache.thrift.TException {
        profileProcess_result result = new profileProcess_result();
        result.success = iface.profileProcess(args.company_id, args.progress_status, args.aids, args.account_id);
        return result;
      }
    }

    public static class profileProcessAts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, profileProcessAts_args> {
      public profileProcessAts() {
        super("profileProcessAts");
      }

      public profileProcessAts_args getEmptyArgsInstance() {
        return new profileProcessAts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public profileProcessAts_result getResult(I iface, profileProcessAts_args args) throws org.apache.thrift.TException {
        profileProcessAts_result result = new profileProcessAts_result();
        result.success = iface.profileProcessAts(args.progress_status, args.aids);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("retrieveProfile", new retrieveProfile());
      processMap.put("profileProcess", new profileProcess());
      processMap.put("profileProcessAts", new profileProcessAts());
      return processMap;
    }

    public static class retrieveProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
      public retrieveProfile() {
        super("retrieveProfile");
      }

      public retrieveProfile_args getEmptyArgsInstance() {
        return new retrieveProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            retrieveProfile_result result = new retrieveProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            retrieveProfile_result result = new retrieveProfile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.retrieveProfile(args.positionId, args.channel, args.profile, args.newchannel,resultHandler);
      }
    }

    public static class profileProcess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, profileProcess_args, com.moseeker.thrift.gen.common.struct.Response> {
      public profileProcess() {
        super("profileProcess");
      }

      public profileProcess_args getEmptyArgsInstance() {
        return new profileProcess_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            profileProcess_result result = new profileProcess_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            profileProcess_result result = new profileProcess_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, profileProcess_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.profileProcess(args.company_id, args.progress_status, args.aids, args.account_id,resultHandler);
      }
    }

    public static class profileProcessAts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, profileProcessAts_args, com.moseeker.thrift.gen.common.struct.Response> {
      public profileProcessAts() {
        super("profileProcessAts");
      }

      public profileProcessAts_args getEmptyArgsInstance() {
        return new profileProcessAts_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            profileProcessAts_result result = new profileProcessAts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            profileProcessAts_result result = new profileProcessAts_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, profileProcessAts_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.profileProcessAts(args.progress_status, args.aids,resultHandler);
      }
    }

  }

  public static class retrieveProfile_args implements org.apache.thrift.TBase<retrieveProfile_args, retrieveProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveProfile_args");

    private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NEWCHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("newchannel", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveProfile_argsTupleSchemeFactory();

    public int positionId; // required
    public int channel; // required
    public String profile; // required
    public String newchannel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POSITION_ID((short)1, "positionId"),
      CHANNEL((short)2, "channel"),
      PROFILE((short)3, "profile"),
      NEWCHANNEL((short)4, "newchannel");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POSITION_ID
            return POSITION_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // PROFILE
            return PROFILE;
          case 4: // NEWCHANNEL
            return NEWCHANNEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITIONID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEWCHANNEL, new org.apache.thrift.meta_data.FieldMetaData("newchannel", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveProfile_args.class, metaDataMap);
    }

    public retrieveProfile_args() {
    }

    public retrieveProfile_args(
      int positionId,
      int channel,
      String profile,
      String newchannel)
    {
      this();
      this.positionId = positionId;
      setPositionIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.profile = profile;
      this.newchannel = newchannel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveProfile_args(retrieveProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.positionId = other.positionId;
      this.channel = other.channel;
      if (other.isSetProfile()) {
        this.profile = other.profile;
      }
      if (other.isSetNewchannel()) {
        this.newchannel = other.newchannel;
      }
    }

    public retrieveProfile_args deepCopy() {
      return new retrieveProfile_args(this);
    }

    @Override
    public void clear() {
      setPositionIdIsSet(false);
      this.positionId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.profile = null;
      this.newchannel = null;
    }

    public int getPositionId() {
      return this.positionId;
    }

    public retrieveProfile_args setPositionId(int positionId) {
      this.positionId = positionId;
      setPositionIdIsSet(true);
      return this;
    }

    public void unsetPositionId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    public void setPositionIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public retrieveProfile_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
    }

    public String getProfile() {
      return this.profile;
    }

    public retrieveProfile_args setProfile(String profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public String getNewchannel() {
      return this.newchannel;
    }

    public retrieveProfile_args setNewchannel(String newchannel) {
      this.newchannel = newchannel;
      return this;
    }

    public void unsetNewchannel() {
      this.newchannel = null;
    }

    /** Returns true if field newchannel is set (has been assigned a value) and false otherwise */
    public boolean isSetNewchannel() {
      return this.newchannel != null;
    }

    public void setNewchannelIsSet(boolean value) {
      if (!value) {
        this.newchannel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case POSITION_ID:
        if (value == null) {
          unsetPositionId();
        } else {
          setPositionId((Integer)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((String)value);
        }
        break;

      case NEWCHANNEL:
        if (value == null) {
          unsetNewchannel();
        } else {
          setNewchannel((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case POSITION_ID:
        return getPositionId();

      case CHANNEL:
        return getChannel();

      case PROFILE:
        return getProfile();

      case NEWCHANNEL:
        return getNewchannel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case POSITION_ID:
        return isSetPositionId();
      case CHANNEL:
        return isSetChannel();
      case PROFILE:
        return isSetProfile();
      case NEWCHANNEL:
        return isSetNewchannel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveProfile_args)
        return this.equals((retrieveProfile_args)that);
      return false;
    }

    public boolean equals(retrieveProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_positionId = true;
      boolean that_present_positionId = true;
      if (this_present_positionId || that_present_positionId) {
        if (!(this_present_positionId && that_present_positionId))
          return false;
        if (this.positionId != that.positionId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      boolean this_present_newchannel = true && this.isSetNewchannel();
      boolean that_present_newchannel = true && that.isSetNewchannel();
      if (this_present_newchannel || that_present_newchannel) {
        if (!(this_present_newchannel && that_present_newchannel))
          return false;
        if (!this.newchannel.equals(that.newchannel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + positionId;

      hashCode = hashCode * 8191 + channel;

      hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
      if (isSetProfile())
        hashCode = hashCode * 8191 + profile.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewchannel()) ? 131071 : 524287);
      if (isSetNewchannel())
        hashCode = hashCode * 8191 + newchannel.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(retrieveProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewchannel()).compareTo(other.isSetNewchannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewchannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newchannel, other.newchannel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveProfile_args(");
      boolean first = true;

      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newchannel:");
      if (this.newchannel == null) {
        sb.append("null");
      } else {
        sb.append(this.newchannel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveProfile_argsStandardScheme getScheme() {
        return new retrieveProfile_argsStandardScheme();
      }
    }

    private static class retrieveProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // POSITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.positionId = iprot.readI32();
                struct.setPositionIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profile = iprot.readString();
                struct.setProfileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEWCHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newchannel = iprot.readString();
                struct.setNewchannelIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          oprot.writeString(struct.profile);
          oprot.writeFieldEnd();
        }
        if (struct.newchannel != null) {
          oprot.writeFieldBegin(NEWCHANNEL_FIELD_DESC);
          oprot.writeString(struct.newchannel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveProfile_argsTupleScheme getScheme() {
        return new retrieveProfile_argsTupleScheme();
      }
    }

    private static class retrieveProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPositionId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetProfile()) {
          optionals.set(2);
        }
        if (struct.isSetNewchannel()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPositionId()) {
          oprot.writeI32(struct.positionId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetProfile()) {
          oprot.writeString(struct.profile);
        }
        if (struct.isSetNewchannel()) {
          oprot.writeString(struct.newchannel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.positionId = iprot.readI32();
          struct.setPositionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.profile = iprot.readString();
          struct.setProfileIsSet(true);
        }
        if (incoming.get(3)) {
          struct.newchannel = iprot.readString();
          struct.setNewchannelIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class retrieveProfile_result implements org.apache.thrift.TBase<retrieveProfile_result, retrieveProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveProfile_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveProfile_result.class, metaDataMap);
    }

    public retrieveProfile_result() {
    }

    public retrieveProfile_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveProfile_result(retrieveProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public retrieveProfile_result deepCopy() {
      return new retrieveProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public retrieveProfile_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveProfile_result)
        return this.equals((retrieveProfile_result)that);
      return false;
    }

    public boolean equals(retrieveProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(retrieveProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveProfile_resultStandardScheme getScheme() {
        return new retrieveProfile_resultStandardScheme();
      }
    }

    private static class retrieveProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveProfile_resultTupleScheme getScheme() {
        return new retrieveProfile_resultTupleScheme();
      }
    }

    private static class retrieveProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class profileProcess_args implements org.apache.thrift.TBase<profileProcess_args, profileProcess_args._Fields>, java.io.Serializable, Cloneable, Comparable<profileProcess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("profileProcess_args");

    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROGRESS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress_status", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField AIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("aids", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("account_id", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new profileProcess_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new profileProcess_argsTupleSchemeFactory();

    public int company_id; // required
    public int progress_status; // required
    public java.util.List<Integer> aids; // required
    public int account_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_ID((short)1, "company_id"),
      PROGRESS_STATUS((short)2, "progress_status"),
      AIDS((short)3, "aids"),
      ACCOUNT_ID((short)4, "account_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_ID
            return COMPANY_ID;
          case 2: // PROGRESS_STATUS
            return PROGRESS_STATUS;
          case 3: // AIDS
            return AIDS;
          case 4: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COMPANY_ID_ISSET_ID = 0;
    private static final int __PROGRESS_STATUS_ISSET_ID = 1;
    private static final int __ACCOUNT_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROGRESS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("progress_status", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AIDS, new org.apache.thrift.meta_data.FieldMetaData("aids", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("account_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(profileProcess_args.class, metaDataMap);
    }

    public profileProcess_args() {
    }

    public profileProcess_args(
      int company_id,
      int progress_status,
      java.util.List<Integer> aids,
      int account_id)
    {
      this();
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.progress_status = progress_status;
      setProgress_statusIsSet(true);
      this.aids = aids;
      this.account_id = account_id;
      setAccount_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public profileProcess_args(profileProcess_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.company_id = other.company_id;
      this.progress_status = other.progress_status;
      if (other.isSetAids()) {
        java.util.List<Integer> __this__aids = new java.util.ArrayList<Integer>(other.aids);
        this.aids = __this__aids;
      }
      this.account_id = other.account_id;
    }

    public profileProcess_args deepCopy() {
      return new profileProcess_args(this);
    }

    @Override
    public void clear() {
      setCompany_idIsSet(false);
      this.company_id = 0;
      setProgress_statusIsSet(false);
      this.progress_status = 0;
      this.aids = null;
      setAccount_idIsSet(false);
      this.account_id = 0;
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public profileProcess_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getProgress_status() {
      return this.progress_status;
    }

    public profileProcess_args setProgress_status(int progress_status) {
      this.progress_status = progress_status;
      setProgress_statusIsSet(true);
      return this;
    }

    public void unsetProgress_status() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_STATUS_ISSET_ID);
    }

    /** Returns true if field progress_status is set (has been assigned a value) and false otherwise */
    public boolean isSetProgress_status() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROGRESS_STATUS_ISSET_ID);
    }

    public void setProgress_statusIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROGRESS_STATUS_ISSET_ID, value);
    }

    public int getAidsSize() {
      return (this.aids == null) ? 0 : this.aids.size();
    }

    public java.util.Iterator<Integer> getAidsIterator() {
      return (this.aids == null) ? null : this.aids.iterator();
    }

    public void addToAids(int elem) {
      if (this.aids == null) {
        this.aids = new java.util.ArrayList<Integer>();
      }
      this.aids.add(elem);
    }

    public java.util.List<Integer> getAids() {
      return this.aids;
    }

    public profileProcess_args setAids(java.util.List<Integer> aids) {
      this.aids = aids;
      return this;
    }

    public void unsetAids() {
      this.aids = null;
    }

    /** Returns true if field aids is set (has been assigned a value) and false otherwise */
    public boolean isSetAids() {
      return this.aids != null;
    }

    public void setAidsIsSet(boolean value) {
      if (!value) {
        this.aids = null;
      }
    }

    public int getAccount_id() {
      return this.account_id;
    }

    public profileProcess_args setAccount_id(int account_id) {
      this.account_id = account_id;
      setAccount_idIsSet(true);
      return this;
    }

    public void unsetAccount_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID);
    }

    /** Returns true if field account_id is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID);
    }

    public void setAccount_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPANY_ID:
        if (value == null) {
          unsetCompany_id();
        } else {
          setCompany_id((Integer)value);
        }
        break;

      case PROGRESS_STATUS:
        if (value == null) {
          unsetProgress_status();
        } else {
          setProgress_status((Integer)value);
        }
        break;

      case AIDS:
        if (value == null) {
          unsetAids();
        } else {
          setAids((java.util.List<Integer>)value);
        }
        break;

      case ACCOUNT_ID:
        if (value == null) {
          unsetAccount_id();
        } else {
          setAccount_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_ID:
        return getCompany_id();

      case PROGRESS_STATUS:
        return getProgress_status();

      case AIDS:
        return getAids();

      case ACCOUNT_ID:
        return getAccount_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_ID:
        return isSetCompany_id();
      case PROGRESS_STATUS:
        return isSetProgress_status();
      case AIDS:
        return isSetAids();
      case ACCOUNT_ID:
        return isSetAccount_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof profileProcess_args)
        return this.equals((profileProcess_args)that);
      return false;
    }

    public boolean equals(profileProcess_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_progress_status = true;
      boolean that_present_progress_status = true;
      if (this_present_progress_status || that_present_progress_status) {
        if (!(this_present_progress_status && that_present_progress_status))
          return false;
        if (this.progress_status != that.progress_status)
          return false;
      }

      boolean this_present_aids = true && this.isSetAids();
      boolean that_present_aids = true && that.isSetAids();
      if (this_present_aids || that_present_aids) {
        if (!(this_present_aids && that_present_aids))
          return false;
        if (!this.aids.equals(that.aids))
          return false;
      }

      boolean this_present_account_id = true;
      boolean that_present_account_id = true;
      if (this_present_account_id || that_present_account_id) {
        if (!(this_present_account_id && that_present_account_id))
          return false;
        if (this.account_id != that.account_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + progress_status;

      hashCode = hashCode * 8191 + ((isSetAids()) ? 131071 : 524287);
      if (isSetAids())
        hashCode = hashCode * 8191 + aids.hashCode();

      hashCode = hashCode * 8191 + account_id;

      return hashCode;
    }

    @Override
    public int compareTo(profileProcess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProgress_status()).compareTo(other.isSetProgress_status());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgress_status()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress_status, other.progress_status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAids()).compareTo(other.isSetAids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aids, other.aids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount_id()).compareTo(other.isSetAccount_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account_id, other.account_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("profileProcess_args(");
      boolean first = true;

      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("progress_status:");
      sb.append(this.progress_status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aids:");
      if (this.aids == null) {
        sb.append("null");
      } else {
        sb.append(this.aids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("account_id:");
      sb.append(this.account_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class profileProcess_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public profileProcess_argsStandardScheme getScheme() {
        return new profileProcess_argsStandardScheme();
      }
    }

    private static class profileProcess_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<profileProcess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, profileProcess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROGRESS_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.progress_status = iprot.readI32();
                struct.setProgress_statusIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.aids = new java.util.ArrayList<Integer>(_list0.size);
                  int _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI32();
                    struct.aids.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setAidsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.account_id = iprot.readI32();
                struct.setAccount_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, profileProcess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROGRESS_STATUS_FIELD_DESC);
        oprot.writeI32(struct.progress_status);
        oprot.writeFieldEnd();
        if (struct.aids != null) {
          oprot.writeFieldBegin(AIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.aids.size()));
            for (int _iter3 : struct.aids)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.account_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class profileProcess_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public profileProcess_argsTupleScheme getScheme() {
        return new profileProcess_argsTupleScheme();
      }
    }

    private static class profileProcess_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<profileProcess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, profileProcess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompany_id()) {
          optionals.set(0);
        }
        if (struct.isSetProgress_status()) {
          optionals.set(1);
        }
        if (struct.isSetAids()) {
          optionals.set(2);
        }
        if (struct.isSetAccount_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetProgress_status()) {
          oprot.writeI32(struct.progress_status);
        }
        if (struct.isSetAids()) {
          {
            oprot.writeI32(struct.aids.size());
            for (int _iter4 : struct.aids)
            {
              oprot.writeI32(_iter4);
            }
          }
        }
        if (struct.isSetAccount_id()) {
          oprot.writeI32(struct.account_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, profileProcess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.progress_status = iprot.readI32();
          struct.setProgress_statusIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.aids = new java.util.ArrayList<Integer>(_list5.size);
            int _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI32();
              struct.aids.add(_elem6);
            }
          }
          struct.setAidsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.account_id = iprot.readI32();
          struct.setAccount_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class profileProcess_result implements org.apache.thrift.TBase<profileProcess_result, profileProcess_result._Fields>, java.io.Serializable, Cloneable, Comparable<profileProcess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("profileProcess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new profileProcess_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new profileProcess_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(profileProcess_result.class, metaDataMap);
    }

    public profileProcess_result() {
    }

    public profileProcess_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public profileProcess_result(profileProcess_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public profileProcess_result deepCopy() {
      return new profileProcess_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public profileProcess_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof profileProcess_result)
        return this.equals((profileProcess_result)that);
      return false;
    }

    public boolean equals(profileProcess_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(profileProcess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("profileProcess_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class profileProcess_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public profileProcess_resultStandardScheme getScheme() {
        return new profileProcess_resultStandardScheme();
      }
    }

    private static class profileProcess_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<profileProcess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, profileProcess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, profileProcess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class profileProcess_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public profileProcess_resultTupleScheme getScheme() {
        return new profileProcess_resultTupleScheme();
      }
    }

    private static class profileProcess_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<profileProcess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, profileProcess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, profileProcess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class profileProcessAts_args implements org.apache.thrift.TBase<profileProcessAts_args, profileProcessAts_args._Fields>, java.io.Serializable, Cloneable, Comparable<profileProcessAts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("profileProcessAts_args");

    private static final org.apache.thrift.protocol.TField PROGRESS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress_status", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("aids", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new profileProcessAts_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new profileProcessAts_argsTupleSchemeFactory();

    public int progress_status; // required
    public String aids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROGRESS_STATUS((short)1, "progress_status"),
      AIDS((short)2, "aids");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROGRESS_STATUS
            return PROGRESS_STATUS;
          case 2: // AIDS
            return AIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROGRESS_STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROGRESS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("progress_status", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AIDS, new org.apache.thrift.meta_data.FieldMetaData("aids", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(profileProcessAts_args.class, metaDataMap);
    }

    public profileProcessAts_args() {
    }

    public profileProcessAts_args(
      int progress_status,
      String aids)
    {
      this();
      this.progress_status = progress_status;
      setProgress_statusIsSet(true);
      this.aids = aids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public profileProcessAts_args(profileProcessAts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.progress_status = other.progress_status;
      if (other.isSetAids()) {
        this.aids = other.aids;
      }
    }

    public profileProcessAts_args deepCopy() {
      return new profileProcessAts_args(this);
    }

    @Override
    public void clear() {
      setProgress_statusIsSet(false);
      this.progress_status = 0;
      this.aids = null;
    }

    public int getProgress_status() {
      return this.progress_status;
    }

    public profileProcessAts_args setProgress_status(int progress_status) {
      this.progress_status = progress_status;
      setProgress_statusIsSet(true);
      return this;
    }

    public void unsetProgress_status() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_STATUS_ISSET_ID);
    }

    /** Returns true if field progress_status is set (has been assigned a value) and false otherwise */
    public boolean isSetProgress_status() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROGRESS_STATUS_ISSET_ID);
    }

    public void setProgress_statusIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROGRESS_STATUS_ISSET_ID, value);
    }

    public String getAids() {
      return this.aids;
    }

    public profileProcessAts_args setAids(String aids) {
      this.aids = aids;
      return this;
    }

    public void unsetAids() {
      this.aids = null;
    }

    /** Returns true if field aids is set (has been assigned a value) and false otherwise */
    public boolean isSetAids() {
      return this.aids != null;
    }

    public void setAidsIsSet(boolean value) {
      if (!value) {
        this.aids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROGRESS_STATUS:
        if (value == null) {
          unsetProgress_status();
        } else {
          setProgress_status((Integer)value);
        }
        break;

      case AIDS:
        if (value == null) {
          unsetAids();
        } else {
          setAids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROGRESS_STATUS:
        return getProgress_status();

      case AIDS:
        return getAids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROGRESS_STATUS:
        return isSetProgress_status();
      case AIDS:
        return isSetAids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof profileProcessAts_args)
        return this.equals((profileProcessAts_args)that);
      return false;
    }

    public boolean equals(profileProcessAts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_progress_status = true;
      boolean that_present_progress_status = true;
      if (this_present_progress_status || that_present_progress_status) {
        if (!(this_present_progress_status && that_present_progress_status))
          return false;
        if (this.progress_status != that.progress_status)
          return false;
      }

      boolean this_present_aids = true && this.isSetAids();
      boolean that_present_aids = true && that.isSetAids();
      if (this_present_aids || that_present_aids) {
        if (!(this_present_aids && that_present_aids))
          return false;
        if (!this.aids.equals(that.aids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + progress_status;

      hashCode = hashCode * 8191 + ((isSetAids()) ? 131071 : 524287);
      if (isSetAids())
        hashCode = hashCode * 8191 + aids.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(profileProcessAts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProgress_status()).compareTo(other.isSetProgress_status());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgress_status()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress_status, other.progress_status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAids()).compareTo(other.isSetAids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aids, other.aids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("profileProcessAts_args(");
      boolean first = true;

      sb.append("progress_status:");
      sb.append(this.progress_status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aids:");
      if (this.aids == null) {
        sb.append("null");
      } else {
        sb.append(this.aids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class profileProcessAts_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public profileProcessAts_argsStandardScheme getScheme() {
        return new profileProcessAts_argsStandardScheme();
      }
    }

    private static class profileProcessAts_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<profileProcessAts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, profileProcessAts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // PROGRESS_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.progress_status = iprot.readI32();
                struct.setProgress_statusIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aids = iprot.readString();
                struct.setAidsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, profileProcessAts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROGRESS_STATUS_FIELD_DESC);
        oprot.writeI32(struct.progress_status);
        oprot.writeFieldEnd();
        if (struct.aids != null) {
          oprot.writeFieldBegin(AIDS_FIELD_DESC);
          oprot.writeString(struct.aids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class profileProcessAts_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public profileProcessAts_argsTupleScheme getScheme() {
        return new profileProcessAts_argsTupleScheme();
      }
    }

    private static class profileProcessAts_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<profileProcessAts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, profileProcessAts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProgress_status()) {
          optionals.set(0);
        }
        if (struct.isSetAids()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProgress_status()) {
          oprot.writeI32(struct.progress_status);
        }
        if (struct.isSetAids()) {
          oprot.writeString(struct.aids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, profileProcessAts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.progress_status = iprot.readI32();
          struct.setProgress_statusIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aids = iprot.readString();
          struct.setAidsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class profileProcessAts_result implements org.apache.thrift.TBase<profileProcessAts_result, profileProcessAts_result._Fields>, java.io.Serializable, Cloneable, Comparable<profileProcessAts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("profileProcessAts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new profileProcessAts_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new profileProcessAts_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(profileProcessAts_result.class, metaDataMap);
    }

    public profileProcessAts_result() {
    }

    public profileProcessAts_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public profileProcessAts_result(profileProcessAts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public profileProcessAts_result deepCopy() {
      return new profileProcessAts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public profileProcessAts_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof profileProcessAts_result)
        return this.equals((profileProcessAts_result)that);
      return false;
    }

    public boolean equals(profileProcessAts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(profileProcessAts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("profileProcessAts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class profileProcessAts_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public profileProcessAts_resultStandardScheme getScheme() {
        return new profileProcessAts_resultStandardScheme();
      }
    }

    private static class profileProcessAts_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<profileProcessAts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, profileProcessAts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, profileProcessAts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class profileProcessAts_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public profileProcessAts_resultTupleScheme getScheme() {
        return new profileProcessAts_resultTupleScheme();
      }
    }

    private static class profileProcessAts_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<profileProcessAts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, profileProcessAts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, profileProcessAts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
