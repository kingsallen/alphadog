/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-3")
public class Intention implements org.apache.thrift.TBase<Intention, Intention._Fields>, java.io.Serializable, Cloneable, Comparable<Intention> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Intention");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profile_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("positions", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INDUSTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("industries", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WORK_CITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("work_cities", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WORKSTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("workstate", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField SALARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_type", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField SALARY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_code", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField WORKDAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("workdays", org.apache.thrift.protocol.TType.I16, (short)9);
  private static final org.apache.thrift.protocol.TField BUSINESS_TRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("business_trip", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField NIGHTJOB_FIELD_DESC = new org.apache.thrift.protocol.TField("nightjob", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField WORKTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("worktype", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField SHIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("shift", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField ICANSTART_FIELD_DESC = new org.apache.thrift.protocol.TField("icanstart", org.apache.thrift.protocol.TType.I16, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IntentionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IntentionTupleSchemeFactory());
  }

  public int id; // required
  public int profile_id; // required
  public String positions; // required
  public String industries; // required
  public String work_cities; // required
  public short workstate; // required
  public short salary_type; // required
  public short salary_code; // required
  public short workdays; // required
  public short business_trip; // required
  public short nightjob; // required
  public short worktype; // required
  public short shift; // required
  public short icanstart; // required
  public String create_time; // required
  public String update_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_ID((short)2, "profile_id"),
    POSITIONS((short)3, "positions"),
    INDUSTRIES((short)4, "industries"),
    WORK_CITIES((short)5, "work_cities"),
    WORKSTATE((short)6, "workstate"),
    SALARY_TYPE((short)7, "salary_type"),
    SALARY_CODE((short)8, "salary_code"),
    WORKDAYS((short)9, "workdays"),
    BUSINESS_TRIP((short)10, "business_trip"),
    NIGHTJOB((short)11, "nightjob"),
    WORKTYPE((short)12, "worktype"),
    SHIFT((short)13, "shift"),
    ICANSTART((short)14, "icanstart"),
    CREATE_TIME((short)15, "create_time"),
    UPDATE_TIME((short)16, "update_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // POSITIONS
          return POSITIONS;
        case 4: // INDUSTRIES
          return INDUSTRIES;
        case 5: // WORK_CITIES
          return WORK_CITIES;
        case 6: // WORKSTATE
          return WORKSTATE;
        case 7: // SALARY_TYPE
          return SALARY_TYPE;
        case 8: // SALARY_CODE
          return SALARY_CODE;
        case 9: // WORKDAYS
          return WORKDAYS;
        case 10: // BUSINESS_TRIP
          return BUSINESS_TRIP;
        case 11: // NIGHTJOB
          return NIGHTJOB;
        case 12: // WORKTYPE
          return WORKTYPE;
        case 13: // SHIFT
          return SHIFT;
        case 14: // ICANSTART
          return ICANSTART;
        case 15: // CREATE_TIME
          return CREATE_TIME;
        case 16: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILE_ID_ISSET_ID = 1;
  private static final int __WORKSTATE_ISSET_ID = 2;
  private static final int __SALARY_TYPE_ISSET_ID = 3;
  private static final int __SALARY_CODE_ISSET_ID = 4;
  private static final int __WORKDAYS_ISSET_ID = 5;
  private static final int __BUSINESS_TRIP_ISSET_ID = 6;
  private static final int __NIGHTJOB_ISSET_ID = 7;
  private static final int __WORKTYPE_ISSET_ID = 8;
  private static final int __SHIFT_ISSET_ID = 9;
  private static final int __ICANSTART_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profile_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("positions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDUSTRIES, new org.apache.thrift.meta_data.FieldMetaData("industries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_CITIES, new org.apache.thrift.meta_data.FieldMetaData("work_cities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKSTATE, new org.apache.thrift.meta_data.FieldMetaData("workstate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SALARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("salary_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SALARY_CODE, new org.apache.thrift.meta_data.FieldMetaData("salary_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.WORKDAYS, new org.apache.thrift.meta_data.FieldMetaData("workdays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BUSINESS_TRIP, new org.apache.thrift.meta_data.FieldMetaData("business_trip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NIGHTJOB, new org.apache.thrift.meta_data.FieldMetaData("nightjob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.WORKTYPE, new org.apache.thrift.meta_data.FieldMetaData("worktype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SHIFT, new org.apache.thrift.meta_data.FieldMetaData("shift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ICANSTART, new org.apache.thrift.meta_data.FieldMetaData("icanstart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Intention.class, metaDataMap);
  }

  public Intention() {
  }

  public Intention(
    int id,
    int profile_id,
    String positions,
    String industries,
    String work_cities,
    short workstate,
    short salary_type,
    short salary_code,
    short workdays,
    short business_trip,
    short nightjob,
    short worktype,
    short shift,
    short icanstart,
    String create_time,
    String update_time)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.profile_id = profile_id;
    setProfile_idIsSet(true);
    this.positions = positions;
    this.industries = industries;
    this.work_cities = work_cities;
    this.workstate = workstate;
    setWorkstateIsSet(true);
    this.salary_type = salary_type;
    setSalary_typeIsSet(true);
    this.salary_code = salary_code;
    setSalary_codeIsSet(true);
    this.workdays = workdays;
    setWorkdaysIsSet(true);
    this.business_trip = business_trip;
    setBusiness_tripIsSet(true);
    this.nightjob = nightjob;
    setNightjobIsSet(true);
    this.worktype = worktype;
    setWorktypeIsSet(true);
    this.shift = shift;
    setShiftIsSet(true);
    this.icanstart = icanstart;
    setIcanstartIsSet(true);
    this.create_time = create_time;
    this.update_time = update_time;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Intention(Intention other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profile_id = other.profile_id;
    if (other.isSetPositions()) {
      this.positions = other.positions;
    }
    if (other.isSetIndustries()) {
      this.industries = other.industries;
    }
    if (other.isSetWork_cities()) {
      this.work_cities = other.work_cities;
    }
    this.workstate = other.workstate;
    this.salary_type = other.salary_type;
    this.salary_code = other.salary_code;
    this.workdays = other.workdays;
    this.business_trip = other.business_trip;
    this.nightjob = other.nightjob;
    this.worktype = other.worktype;
    this.shift = other.shift;
    this.icanstart = other.icanstart;
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
  }

  public Intention deepCopy() {
    return new Intention(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfile_idIsSet(false);
    this.profile_id = 0;
    this.positions = null;
    this.industries = null;
    this.work_cities = null;
    setWorkstateIsSet(false);
    this.workstate = 0;
    setSalary_typeIsSet(false);
    this.salary_type = 0;
    setSalary_codeIsSet(false);
    this.salary_code = 0;
    setWorkdaysIsSet(false);
    this.workdays = 0;
    setBusiness_tripIsSet(false);
    this.business_trip = 0;
    setNightjobIsSet(false);
    this.nightjob = 0;
    setWorktypeIsSet(false);
    this.worktype = 0;
    setShiftIsSet(false);
    this.shift = 0;
    setIcanstartIsSet(false);
    this.icanstart = 0;
    this.create_time = null;
    this.update_time = null;
  }

  public int getId() {
    return this.id;
  }

  public Intention setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfile_id() {
    return this.profile_id;
  }

  public Intention setProfile_id(int profile_id) {
    this.profile_id = profile_id;
    setProfile_idIsSet(true);
    return this;
  }

  public void unsetProfile_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
  }

  /** Returns true if field profile_id is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
  }

  public void setProfile_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFILE_ID_ISSET_ID, value);
  }

  public String getPositions() {
    return this.positions;
  }

  public Intention setPositions(String positions) {
    this.positions = positions;
    return this;
  }

  public void unsetPositions() {
    this.positions = null;
  }

  /** Returns true if field positions is set (has been assigned a value) and false otherwise */
  public boolean isSetPositions() {
    return this.positions != null;
  }

  public void setPositionsIsSet(boolean value) {
    if (!value) {
      this.positions = null;
    }
  }

  public String getIndustries() {
    return this.industries;
  }

  public Intention setIndustries(String industries) {
    this.industries = industries;
    return this;
  }

  public void unsetIndustries() {
    this.industries = null;
  }

  /** Returns true if field industries is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustries() {
    return this.industries != null;
  }

  public void setIndustriesIsSet(boolean value) {
    if (!value) {
      this.industries = null;
    }
  }

  public String getWork_cities() {
    return this.work_cities;
  }

  public Intention setWork_cities(String work_cities) {
    this.work_cities = work_cities;
    return this;
  }

  public void unsetWork_cities() {
    this.work_cities = null;
  }

  /** Returns true if field work_cities is set (has been assigned a value) and false otherwise */
  public boolean isSetWork_cities() {
    return this.work_cities != null;
  }

  public void setWork_citiesIsSet(boolean value) {
    if (!value) {
      this.work_cities = null;
    }
  }

  public short getWorkstate() {
    return this.workstate;
  }

  public Intention setWorkstate(short workstate) {
    this.workstate = workstate;
    setWorkstateIsSet(true);
    return this;
  }

  public void unsetWorkstate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKSTATE_ISSET_ID);
  }

  /** Returns true if field workstate is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkstate() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKSTATE_ISSET_ID);
  }

  public void setWorkstateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKSTATE_ISSET_ID, value);
  }

  public short getSalary_type() {
    return this.salary_type;
  }

  public Intention setSalary_type(short salary_type) {
    this.salary_type = salary_type;
    setSalary_typeIsSet(true);
    return this;
  }

  public void unsetSalary_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID);
  }

  /** Returns true if field salary_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_type() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID);
  }

  public void setSalary_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_TYPE_ISSET_ID, value);
  }

  public short getSalary_code() {
    return this.salary_code;
  }

  public Intention setSalary_code(short salary_code) {
    this.salary_code = salary_code;
    setSalary_codeIsSet(true);
    return this;
  }

  public void unsetSalary_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_CODE_ISSET_ID);
  }

  /** Returns true if field salary_code is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_code() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_CODE_ISSET_ID);
  }

  public void setSalary_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_CODE_ISSET_ID, value);
  }

  public short getWorkdays() {
    return this.workdays;
  }

  public Intention setWorkdays(short workdays) {
    this.workdays = workdays;
    setWorkdaysIsSet(true);
    return this;
  }

  public void unsetWorkdays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKDAYS_ISSET_ID);
  }

  /** Returns true if field workdays is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkdays() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKDAYS_ISSET_ID);
  }

  public void setWorkdaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKDAYS_ISSET_ID, value);
  }

  public short getBusiness_trip() {
    return this.business_trip;
  }

  public Intention setBusiness_trip(short business_trip) {
    this.business_trip = business_trip;
    setBusiness_tripIsSet(true);
    return this;
  }

  public void unsetBusiness_trip() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESS_TRIP_ISSET_ID);
  }

  /** Returns true if field business_trip is set (has been assigned a value) and false otherwise */
  public boolean isSetBusiness_trip() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESS_TRIP_ISSET_ID);
  }

  public void setBusiness_tripIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESS_TRIP_ISSET_ID, value);
  }

  public short getNightjob() {
    return this.nightjob;
  }

  public Intention setNightjob(short nightjob) {
    this.nightjob = nightjob;
    setNightjobIsSet(true);
    return this;
  }

  public void unsetNightjob() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NIGHTJOB_ISSET_ID);
  }

  /** Returns true if field nightjob is set (has been assigned a value) and false otherwise */
  public boolean isSetNightjob() {
    return EncodingUtils.testBit(__isset_bitfield, __NIGHTJOB_ISSET_ID);
  }

  public void setNightjobIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NIGHTJOB_ISSET_ID, value);
  }

  public short getWorktype() {
    return this.worktype;
  }

  public Intention setWorktype(short worktype) {
    this.worktype = worktype;
    setWorktypeIsSet(true);
    return this;
  }

  public void unsetWorktype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKTYPE_ISSET_ID);
  }

  /** Returns true if field worktype is set (has been assigned a value) and false otherwise */
  public boolean isSetWorktype() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKTYPE_ISSET_ID);
  }

  public void setWorktypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKTYPE_ISSET_ID, value);
  }

  public short getShift() {
    return this.shift;
  }

  public Intention setShift(short shift) {
    this.shift = shift;
    setShiftIsSet(true);
    return this;
  }

  public void unsetShift() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHIFT_ISSET_ID);
  }

  /** Returns true if field shift is set (has been assigned a value) and false otherwise */
  public boolean isSetShift() {
    return EncodingUtils.testBit(__isset_bitfield, __SHIFT_ISSET_ID);
  }

  public void setShiftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHIFT_ISSET_ID, value);
  }

  public short getIcanstart() {
    return this.icanstart;
  }

  public Intention setIcanstart(short icanstart) {
    this.icanstart = icanstart;
    setIcanstartIsSet(true);
    return this;
  }

  public void unsetIcanstart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ICANSTART_ISSET_ID);
  }

  /** Returns true if field icanstart is set (has been assigned a value) and false otherwise */
  public boolean isSetIcanstart() {
    return EncodingUtils.testBit(__isset_bitfield, __ICANSTART_ISSET_ID);
  }

  public void setIcanstartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ICANSTART_ISSET_ID, value);
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public Intention setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public String getUpdate_time() {
    return this.update_time;
  }

  public Intention setUpdate_time(String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfile_id();
      } else {
        setProfile_id((Integer)value);
      }
      break;

    case POSITIONS:
      if (value == null) {
        unsetPositions();
      } else {
        setPositions((String)value);
      }
      break;

    case INDUSTRIES:
      if (value == null) {
        unsetIndustries();
      } else {
        setIndustries((String)value);
      }
      break;

    case WORK_CITIES:
      if (value == null) {
        unsetWork_cities();
      } else {
        setWork_cities((String)value);
      }
      break;

    case WORKSTATE:
      if (value == null) {
        unsetWorkstate();
      } else {
        setWorkstate((Short)value);
      }
      break;

    case SALARY_TYPE:
      if (value == null) {
        unsetSalary_type();
      } else {
        setSalary_type((Short)value);
      }
      break;

    case SALARY_CODE:
      if (value == null) {
        unsetSalary_code();
      } else {
        setSalary_code((Short)value);
      }
      break;

    case WORKDAYS:
      if (value == null) {
        unsetWorkdays();
      } else {
        setWorkdays((Short)value);
      }
      break;

    case BUSINESS_TRIP:
      if (value == null) {
        unsetBusiness_trip();
      } else {
        setBusiness_trip((Short)value);
      }
      break;

    case NIGHTJOB:
      if (value == null) {
        unsetNightjob();
      } else {
        setNightjob((Short)value);
      }
      break;

    case WORKTYPE:
      if (value == null) {
        unsetWorktype();
      } else {
        setWorktype((Short)value);
      }
      break;

    case SHIFT:
      if (value == null) {
        unsetShift();
      } else {
        setShift((Short)value);
      }
      break;

    case ICANSTART:
      if (value == null) {
        unsetIcanstart();
      } else {
        setIcanstart((Short)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PROFILE_ID:
      return Integer.valueOf(getProfile_id());

    case POSITIONS:
      return getPositions();

    case INDUSTRIES:
      return getIndustries();

    case WORK_CITIES:
      return getWork_cities();

    case WORKSTATE:
      return Short.valueOf(getWorkstate());

    case SALARY_TYPE:
      return Short.valueOf(getSalary_type());

    case SALARY_CODE:
      return Short.valueOf(getSalary_code());

    case WORKDAYS:
      return Short.valueOf(getWorkdays());

    case BUSINESS_TRIP:
      return Short.valueOf(getBusiness_trip());

    case NIGHTJOB:
      return Short.valueOf(getNightjob());

    case WORKTYPE:
      return Short.valueOf(getWorktype());

    case SHIFT:
      return Short.valueOf(getShift());

    case ICANSTART:
      return Short.valueOf(getIcanstart());

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_ID:
      return isSetProfile_id();
    case POSITIONS:
      return isSetPositions();
    case INDUSTRIES:
      return isSetIndustries();
    case WORK_CITIES:
      return isSetWork_cities();
    case WORKSTATE:
      return isSetWorkstate();
    case SALARY_TYPE:
      return isSetSalary_type();
    case SALARY_CODE:
      return isSetSalary_code();
    case WORKDAYS:
      return isSetWorkdays();
    case BUSINESS_TRIP:
      return isSetBusiness_trip();
    case NIGHTJOB:
      return isSetNightjob();
    case WORKTYPE:
      return isSetWorktype();
    case SHIFT:
      return isSetShift();
    case ICANSTART:
      return isSetIcanstart();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Intention)
      return this.equals((Intention)that);
    return false;
  }

  public boolean equals(Intention that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profile_id = true;
    boolean that_present_profile_id = true;
    if (this_present_profile_id || that_present_profile_id) {
      if (!(this_present_profile_id && that_present_profile_id))
        return false;
      if (this.profile_id != that.profile_id)
        return false;
    }

    boolean this_present_positions = true && this.isSetPositions();
    boolean that_present_positions = true && that.isSetPositions();
    if (this_present_positions || that_present_positions) {
      if (!(this_present_positions && that_present_positions))
        return false;
      if (!this.positions.equals(that.positions))
        return false;
    }

    boolean this_present_industries = true && this.isSetIndustries();
    boolean that_present_industries = true && that.isSetIndustries();
    if (this_present_industries || that_present_industries) {
      if (!(this_present_industries && that_present_industries))
        return false;
      if (!this.industries.equals(that.industries))
        return false;
    }

    boolean this_present_work_cities = true && this.isSetWork_cities();
    boolean that_present_work_cities = true && that.isSetWork_cities();
    if (this_present_work_cities || that_present_work_cities) {
      if (!(this_present_work_cities && that_present_work_cities))
        return false;
      if (!this.work_cities.equals(that.work_cities))
        return false;
    }

    boolean this_present_workstate = true;
    boolean that_present_workstate = true;
    if (this_present_workstate || that_present_workstate) {
      if (!(this_present_workstate && that_present_workstate))
        return false;
      if (this.workstate != that.workstate)
        return false;
    }

    boolean this_present_salary_type = true;
    boolean that_present_salary_type = true;
    if (this_present_salary_type || that_present_salary_type) {
      if (!(this_present_salary_type && that_present_salary_type))
        return false;
      if (this.salary_type != that.salary_type)
        return false;
    }

    boolean this_present_salary_code = true;
    boolean that_present_salary_code = true;
    if (this_present_salary_code || that_present_salary_code) {
      if (!(this_present_salary_code && that_present_salary_code))
        return false;
      if (this.salary_code != that.salary_code)
        return false;
    }

    boolean this_present_workdays = true;
    boolean that_present_workdays = true;
    if (this_present_workdays || that_present_workdays) {
      if (!(this_present_workdays && that_present_workdays))
        return false;
      if (this.workdays != that.workdays)
        return false;
    }

    boolean this_present_business_trip = true;
    boolean that_present_business_trip = true;
    if (this_present_business_trip || that_present_business_trip) {
      if (!(this_present_business_trip && that_present_business_trip))
        return false;
      if (this.business_trip != that.business_trip)
        return false;
    }

    boolean this_present_nightjob = true;
    boolean that_present_nightjob = true;
    if (this_present_nightjob || that_present_nightjob) {
      if (!(this_present_nightjob && that_present_nightjob))
        return false;
      if (this.nightjob != that.nightjob)
        return false;
    }

    boolean this_present_worktype = true;
    boolean that_present_worktype = true;
    if (this_present_worktype || that_present_worktype) {
      if (!(this_present_worktype && that_present_worktype))
        return false;
      if (this.worktype != that.worktype)
        return false;
    }

    boolean this_present_shift = true;
    boolean that_present_shift = true;
    if (this_present_shift || that_present_shift) {
      if (!(this_present_shift && that_present_shift))
        return false;
      if (this.shift != that.shift)
        return false;
    }

    boolean this_present_icanstart = true;
    boolean that_present_icanstart = true;
    if (this_present_icanstart || that_present_icanstart) {
      if (!(this_present_icanstart && that_present_icanstart))
        return false;
      if (this.icanstart != that.icanstart)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_profile_id = true;
    list.add(present_profile_id);
    if (present_profile_id)
      list.add(profile_id);

    boolean present_positions = true && (isSetPositions());
    list.add(present_positions);
    if (present_positions)
      list.add(positions);

    boolean present_industries = true && (isSetIndustries());
    list.add(present_industries);
    if (present_industries)
      list.add(industries);

    boolean present_work_cities = true && (isSetWork_cities());
    list.add(present_work_cities);
    if (present_work_cities)
      list.add(work_cities);

    boolean present_workstate = true;
    list.add(present_workstate);
    if (present_workstate)
      list.add(workstate);

    boolean present_salary_type = true;
    list.add(present_salary_type);
    if (present_salary_type)
      list.add(salary_type);

    boolean present_salary_code = true;
    list.add(present_salary_code);
    if (present_salary_code)
      list.add(salary_code);

    boolean present_workdays = true;
    list.add(present_workdays);
    if (present_workdays)
      list.add(workdays);

    boolean present_business_trip = true;
    list.add(present_business_trip);
    if (present_business_trip)
      list.add(business_trip);

    boolean present_nightjob = true;
    list.add(present_nightjob);
    if (present_nightjob)
      list.add(nightjob);

    boolean present_worktype = true;
    list.add(present_worktype);
    if (present_worktype)
      list.add(worktype);

    boolean present_shift = true;
    list.add(present_shift);
    if (present_shift)
      list.add(shift);

    boolean present_icanstart = true;
    list.add(present_icanstart);
    if (present_icanstart)
      list.add(icanstart);

    boolean present_create_time = true && (isSetCreate_time());
    list.add(present_create_time);
    if (present_create_time)
      list.add(create_time);

    boolean present_update_time = true && (isSetUpdate_time());
    list.add(present_update_time);
    if (present_update_time)
      list.add(update_time);

    return list.hashCode();
  }

  @Override
  public int compareTo(Intention other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile_id()).compareTo(other.isSetProfile_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile_id, other.profile_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positions, other.positions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustries()).compareTo(other.isSetIndustries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industries, other.industries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWork_cities()).compareTo(other.isSetWork_cities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWork_cities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.work_cities, other.work_cities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkstate()).compareTo(other.isSetWorkstate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkstate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workstate, other.workstate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_type()).compareTo(other.isSetSalary_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_type, other.salary_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_code()).compareTo(other.isSetSalary_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_code, other.salary_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkdays()).compareTo(other.isSetWorkdays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkdays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workdays, other.workdays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusiness_trip()).compareTo(other.isSetBusiness_trip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusiness_trip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.business_trip, other.business_trip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNightjob()).compareTo(other.isSetNightjob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNightjob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nightjob, other.nightjob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorktype()).compareTo(other.isSetWorktype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorktype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worktype, other.worktype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShift()).compareTo(other.isSetShift());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShift()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shift, other.shift);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcanstart()).compareTo(other.isSetIcanstart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcanstart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icanstart, other.icanstart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Intention(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profile_id:");
    sb.append(this.profile_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positions:");
    if (this.positions == null) {
      sb.append("null");
    } else {
      sb.append(this.positions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("industries:");
    if (this.industries == null) {
      sb.append("null");
    } else {
      sb.append(this.industries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("work_cities:");
    if (this.work_cities == null) {
      sb.append("null");
    } else {
      sb.append(this.work_cities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workstate:");
    sb.append(this.workstate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("salary_type:");
    sb.append(this.salary_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("salary_code:");
    sb.append(this.salary_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workdays:");
    sb.append(this.workdays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("business_trip:");
    sb.append(this.business_trip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nightjob:");
    sb.append(this.nightjob);
    first = false;
    if (!first) sb.append(", ");
    sb.append("worktype:");
    sb.append(this.worktype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shift:");
    sb.append(this.shift);
    first = false;
    if (!first) sb.append(", ");
    sb.append("icanstart:");
    sb.append(this.icanstart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time:");
    if (this.create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("update_time:");
    if (this.update_time == null) {
      sb.append("null");
    } else {
      sb.append(this.update_time);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntentionStandardSchemeFactory implements SchemeFactory {
    public IntentionStandardScheme getScheme() {
      return new IntentionStandardScheme();
    }
  }

  private static class IntentionStandardScheme extends StandardScheme<Intention> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Intention struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profile_id = iprot.readI32();
              struct.setProfile_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positions = iprot.readString();
              struct.setPositionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INDUSTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.industries = iprot.readString();
              struct.setIndustriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WORK_CITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.work_cities = iprot.readString();
              struct.setWork_citiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WORKSTATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.workstate = iprot.readI16();
              struct.setWorkstateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SALARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.salary_type = iprot.readI16();
              struct.setSalary_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SALARY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.salary_code = iprot.readI16();
              struct.setSalary_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WORKDAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.workdays = iprot.readI16();
              struct.setWorkdaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BUSINESS_TRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.business_trip = iprot.readI16();
              struct.setBusiness_tripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NIGHTJOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.nightjob = iprot.readI16();
              struct.setNightjobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WORKTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.worktype = iprot.readI16();
              struct.setWorktypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHIFT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.shift = iprot.readI16();
              struct.setShiftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ICANSTART
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.icanstart = iprot.readI16();
              struct.setIcanstartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Intention struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
      oprot.writeI32(struct.profile_id);
      oprot.writeFieldEnd();
      if (struct.positions != null) {
        oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
        oprot.writeString(struct.positions);
        oprot.writeFieldEnd();
      }
      if (struct.industries != null) {
        oprot.writeFieldBegin(INDUSTRIES_FIELD_DESC);
        oprot.writeString(struct.industries);
        oprot.writeFieldEnd();
      }
      if (struct.work_cities != null) {
        oprot.writeFieldBegin(WORK_CITIES_FIELD_DESC);
        oprot.writeString(struct.work_cities);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WORKSTATE_FIELD_DESC);
      oprot.writeI16(struct.workstate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALARY_TYPE_FIELD_DESC);
      oprot.writeI16(struct.salary_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALARY_CODE_FIELD_DESC);
      oprot.writeI16(struct.salary_code);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORKDAYS_FIELD_DESC);
      oprot.writeI16(struct.workdays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_TRIP_FIELD_DESC);
      oprot.writeI16(struct.business_trip);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NIGHTJOB_FIELD_DESC);
      oprot.writeI16(struct.nightjob);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORKTYPE_FIELD_DESC);
      oprot.writeI16(struct.worktype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHIFT_FIELD_DESC);
      oprot.writeI16(struct.shift);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ICANSTART_FIELD_DESC);
      oprot.writeI16(struct.icanstart);
      oprot.writeFieldEnd();
      if (struct.create_time != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.update_time != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.update_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntentionTupleSchemeFactory implements SchemeFactory {
    public IntentionTupleScheme getScheme() {
      return new IntentionTupleScheme();
    }
  }

  private static class IntentionTupleScheme extends TupleScheme<Intention> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Intention struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfile_id()) {
        optionals.set(1);
      }
      if (struct.isSetPositions()) {
        optionals.set(2);
      }
      if (struct.isSetIndustries()) {
        optionals.set(3);
      }
      if (struct.isSetWork_cities()) {
        optionals.set(4);
      }
      if (struct.isSetWorkstate()) {
        optionals.set(5);
      }
      if (struct.isSetSalary_type()) {
        optionals.set(6);
      }
      if (struct.isSetSalary_code()) {
        optionals.set(7);
      }
      if (struct.isSetWorkdays()) {
        optionals.set(8);
      }
      if (struct.isSetBusiness_trip()) {
        optionals.set(9);
      }
      if (struct.isSetNightjob()) {
        optionals.set(10);
      }
      if (struct.isSetWorktype()) {
        optionals.set(11);
      }
      if (struct.isSetShift()) {
        optionals.set(12);
      }
      if (struct.isSetIcanstart()) {
        optionals.set(13);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(14);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfile_id()) {
        oprot.writeI32(struct.profile_id);
      }
      if (struct.isSetPositions()) {
        oprot.writeString(struct.positions);
      }
      if (struct.isSetIndustries()) {
        oprot.writeString(struct.industries);
      }
      if (struct.isSetWork_cities()) {
        oprot.writeString(struct.work_cities);
      }
      if (struct.isSetWorkstate()) {
        oprot.writeI16(struct.workstate);
      }
      if (struct.isSetSalary_type()) {
        oprot.writeI16(struct.salary_type);
      }
      if (struct.isSetSalary_code()) {
        oprot.writeI16(struct.salary_code);
      }
      if (struct.isSetWorkdays()) {
        oprot.writeI16(struct.workdays);
      }
      if (struct.isSetBusiness_trip()) {
        oprot.writeI16(struct.business_trip);
      }
      if (struct.isSetNightjob()) {
        oprot.writeI16(struct.nightjob);
      }
      if (struct.isSetWorktype()) {
        oprot.writeI16(struct.worktype);
      }
      if (struct.isSetShift()) {
        oprot.writeI16(struct.shift);
      }
      if (struct.isSetIcanstart()) {
        oprot.writeI16(struct.icanstart);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Intention struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profile_id = iprot.readI32();
        struct.setProfile_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.positions = iprot.readString();
        struct.setPositionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.industries = iprot.readString();
        struct.setIndustriesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.work_cities = iprot.readString();
        struct.setWork_citiesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.workstate = iprot.readI16();
        struct.setWorkstateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.salary_type = iprot.readI16();
        struct.setSalary_typeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.salary_code = iprot.readI16();
        struct.setSalary_codeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.workdays = iprot.readI16();
        struct.setWorkdaysIsSet(true);
      }
      if (incoming.get(9)) {
        struct.business_trip = iprot.readI16();
        struct.setBusiness_tripIsSet(true);
      }
      if (incoming.get(10)) {
        struct.nightjob = iprot.readI16();
        struct.setNightjobIsSet(true);
      }
      if (incoming.get(11)) {
        struct.worktype = iprot.readI16();
        struct.setWorktypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shift = iprot.readI16();
        struct.setShiftIsSet(true);
      }
      if (incoming.get(13)) {
        struct.icanstart = iprot.readI16();
        struct.setIcanstartIsSet(true);
      }
      if (incoming.get(14)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
    }
  }

}

