/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-3")
public class ProjectExpServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> getProjectExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProjectExpPagination getProjectExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException;

    public int postProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException;

    public int putProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException;

    public int delProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException;

    public int postProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException;

    public int putProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException;

    public int delProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getProjectExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProjectExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> getProjectExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      send_getProjectExps(query, projectExp);
      return recv_getProjectExps();
    }

    public void send_getProjectExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      getProjectExps_args args = new getProjectExps_args();
      args.setQuery(query);
      args.setProjectExp(projectExp);
      sendBase("getProjectExps", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> recv_getProjectExps() throws org.apache.thrift.TException
    {
      getProjectExps_result result = new getProjectExps_result();
      receiveBase(result, "getProjectExps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectExps failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExpPagination getProjectExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      send_getProjectExpPagination(query, projectExp);
      return recv_getProjectExpPagination();
    }

    public void send_getProjectExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      getProjectExpPagination_args args = new getProjectExpPagination_args();
      args.setQuery(query);
      args.setProjectExp(projectExp);
      sendBase("getProjectExpPagination", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExpPagination recv_getProjectExpPagination() throws org.apache.thrift.TException
    {
      getProjectExpPagination_result result = new getProjectExpPagination_result();
      receiveBase(result, "getProjectExpPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectExpPagination failed: unknown result");
    }

    public int postProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException
    {
      send_postProjectExps(projectExps);
      return recv_postProjectExps();
    }

    public void send_postProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException
    {
      postProjectExps_args args = new postProjectExps_args();
      args.setProjectExps(projectExps);
      sendBase("postProjectExps", args);
    }

    public int recv_postProjectExps() throws org.apache.thrift.TException
    {
      postProjectExps_result result = new postProjectExps_result();
      receiveBase(result, "postProjectExps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postProjectExps failed: unknown result");
    }

    public int putProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException
    {
      send_putProjectExps(projectExps);
      return recv_putProjectExps();
    }

    public void send_putProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException
    {
      putProjectExps_args args = new putProjectExps_args();
      args.setProjectExps(projectExps);
      sendBase("putProjectExps", args);
    }

    public int recv_putProjectExps() throws org.apache.thrift.TException
    {
      putProjectExps_result result = new putProjectExps_result();
      receiveBase(result, "putProjectExps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putProjectExps failed: unknown result");
    }

    public int delProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException
    {
      send_delProjectExps(projectExps);
      return recv_delProjectExps();
    }

    public void send_delProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) throws org.apache.thrift.TException
    {
      delProjectExps_args args = new delProjectExps_args();
      args.setProjectExps(projectExps);
      sendBase("delProjectExps", args);
    }

    public int recv_delProjectExps() throws org.apache.thrift.TException
    {
      delProjectExps_result result = new delProjectExps_result();
      receiveBase(result, "delProjectExps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delProjectExps failed: unknown result");
    }

    public int postProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      send_postProjectExp(projectExp);
      return recv_postProjectExp();
    }

    public void send_postProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      postProjectExp_args args = new postProjectExp_args();
      args.setProjectExp(projectExp);
      sendBase("postProjectExp", args);
    }

    public int recv_postProjectExp() throws org.apache.thrift.TException
    {
      postProjectExp_result result = new postProjectExp_result();
      receiveBase(result, "postProjectExp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postProjectExp failed: unknown result");
    }

    public int putProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      send_putProjectExp(projectExp);
      return recv_putProjectExp();
    }

    public void send_putProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      putProjectExp_args args = new putProjectExp_args();
      args.setProjectExp(projectExp);
      sendBase("putProjectExp", args);
    }

    public int recv_putProjectExp() throws org.apache.thrift.TException
    {
      putProjectExp_result result = new putProjectExp_result();
      receiveBase(result, "putProjectExp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putProjectExp failed: unknown result");
    }

    public int delProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      send_delProjectExp(projectExp);
      return recv_delProjectExp();
    }

    public void send_delProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) throws org.apache.thrift.TException
    {
      delProjectExp_args args = new delProjectExp_args();
      args.setProjectExp(projectExp);
      sendBase("delProjectExp", args);
    }

    public int recv_delProjectExp() throws org.apache.thrift.TException
    {
      delProjectExp_result result = new delProjectExp_result();
      receiveBase(result, "delProjectExp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delProjectExp failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getProjectExps(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectExps_call method_call = new getProjectExps_call(query, projectExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp;
      public getProjectExps_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.projectExp = projectExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectExps_args args = new getProjectExps_args();
        args.setQuery(query);
        args.setProjectExp(projectExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectExps();
      }
    }

    public void getProjectExpPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectExpPagination_call method_call = new getProjectExpPagination_call(query, projectExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectExpPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp;
      public getProjectExpPagination_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.projectExp = projectExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectExpPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectExpPagination_args args = new getProjectExpPagination_args();
        args.setQuery(query);
        args.setProjectExp(projectExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProjectExpPagination getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectExpPagination();
      }
    }

    public void postProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postProjectExps_call method_call = new postProjectExps_call(projectExps, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postProjectExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps;
      public postProjectExps_call(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectExps = projectExps;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postProjectExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postProjectExps_args args = new postProjectExps_args();
        args.setProjectExps(projectExps);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postProjectExps();
      }
    }

    public void putProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putProjectExps_call method_call = new putProjectExps_call(projectExps, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putProjectExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps;
      public putProjectExps_call(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectExps = projectExps;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putProjectExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putProjectExps_args args = new putProjectExps_args();
        args.setProjectExps(projectExps);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putProjectExps();
      }
    }

    public void delProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delProjectExps_call method_call = new delProjectExps_call(projectExps, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delProjectExps_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps;
      public delProjectExps_call(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectExps = projectExps;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delProjectExps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delProjectExps_args args = new delProjectExps_args();
        args.setProjectExps(projectExps);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delProjectExps();
      }
    }

    public void postProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postProjectExp_call method_call = new postProjectExp_call(projectExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postProjectExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp;
      public postProjectExp_call(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectExp = projectExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postProjectExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postProjectExp_args args = new postProjectExp_args();
        args.setProjectExp(projectExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postProjectExp();
      }
    }

    public void putProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putProjectExp_call method_call = new putProjectExp_call(projectExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putProjectExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp;
      public putProjectExp_call(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectExp = projectExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putProjectExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putProjectExp_args args = new putProjectExp_args();
        args.setProjectExp(projectExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putProjectExp();
      }
    }

    public void delProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delProjectExp_call method_call = new delProjectExp_call(projectExp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delProjectExp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp;
      public delProjectExp_call(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectExp = projectExp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delProjectExp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delProjectExp_args args = new delProjectExp_args();
        args.setProjectExp(projectExp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delProjectExp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getProjectExps", new getProjectExps());
      processMap.put("getProjectExpPagination", new getProjectExpPagination());
      processMap.put("postProjectExps", new postProjectExps());
      processMap.put("putProjectExps", new putProjectExps());
      processMap.put("delProjectExps", new delProjectExps());
      processMap.put("postProjectExp", new postProjectExp());
      processMap.put("putProjectExp", new putProjectExp());
      processMap.put("delProjectExp", new delProjectExp());
      return processMap;
    }

    public static class getProjectExps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectExps_args> {
      public getProjectExps() {
        super("getProjectExps");
      }

      public getProjectExps_args getEmptyArgsInstance() {
        return new getProjectExps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProjectExps_result getResult(I iface, getProjectExps_args args) throws org.apache.thrift.TException {
        getProjectExps_result result = new getProjectExps_result();
        result.success = iface.getProjectExps(args.query, args.projectExp);
        return result;
      }
    }

    public static class getProjectExpPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectExpPagination_args> {
      public getProjectExpPagination() {
        super("getProjectExpPagination");
      }

      public getProjectExpPagination_args getEmptyArgsInstance() {
        return new getProjectExpPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProjectExpPagination_result getResult(I iface, getProjectExpPagination_args args) throws org.apache.thrift.TException {
        getProjectExpPagination_result result = new getProjectExpPagination_result();
        result.success = iface.getProjectExpPagination(args.query, args.projectExp);
        return result;
      }
    }

    public static class postProjectExps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postProjectExps_args> {
      public postProjectExps() {
        super("postProjectExps");
      }

      public postProjectExps_args getEmptyArgsInstance() {
        return new postProjectExps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postProjectExps_result getResult(I iface, postProjectExps_args args) throws org.apache.thrift.TException {
        postProjectExps_result result = new postProjectExps_result();
        result.success = iface.postProjectExps(args.projectExps);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putProjectExps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putProjectExps_args> {
      public putProjectExps() {
        super("putProjectExps");
      }

      public putProjectExps_args getEmptyArgsInstance() {
        return new putProjectExps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putProjectExps_result getResult(I iface, putProjectExps_args args) throws org.apache.thrift.TException {
        putProjectExps_result result = new putProjectExps_result();
        result.success = iface.putProjectExps(args.projectExps);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delProjectExps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delProjectExps_args> {
      public delProjectExps() {
        super("delProjectExps");
      }

      public delProjectExps_args getEmptyArgsInstance() {
        return new delProjectExps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delProjectExps_result getResult(I iface, delProjectExps_args args) throws org.apache.thrift.TException {
        delProjectExps_result result = new delProjectExps_result();
        result.success = iface.delProjectExps(args.projectExps);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postProjectExp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postProjectExp_args> {
      public postProjectExp() {
        super("postProjectExp");
      }

      public postProjectExp_args getEmptyArgsInstance() {
        return new postProjectExp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postProjectExp_result getResult(I iface, postProjectExp_args args) throws org.apache.thrift.TException {
        postProjectExp_result result = new postProjectExp_result();
        result.success = iface.postProjectExp(args.projectExp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putProjectExp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putProjectExp_args> {
      public putProjectExp() {
        super("putProjectExp");
      }

      public putProjectExp_args getEmptyArgsInstance() {
        return new putProjectExp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putProjectExp_result getResult(I iface, putProjectExp_args args) throws org.apache.thrift.TException {
        putProjectExp_result result = new putProjectExp_result();
        result.success = iface.putProjectExp(args.projectExp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delProjectExp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delProjectExp_args> {
      public delProjectExp() {
        super("delProjectExp");
      }

      public delProjectExp_args getEmptyArgsInstance() {
        return new delProjectExp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delProjectExp_result getResult(I iface, delProjectExp_args args) throws org.apache.thrift.TException {
        delProjectExp_result result = new delProjectExp_result();
        result.success = iface.delProjectExp(args.projectExp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getProjectExps", new getProjectExps());
      processMap.put("getProjectExpPagination", new getProjectExpPagination());
      processMap.put("postProjectExps", new postProjectExps());
      processMap.put("putProjectExps", new putProjectExps());
      processMap.put("delProjectExps", new delProjectExps());
      processMap.put("postProjectExp", new postProjectExp());
      processMap.put("putProjectExp", new putProjectExp());
      processMap.put("delProjectExp", new delProjectExp());
      return processMap;
    }

    public static class getProjectExps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProjectExps_args, List<com.moseeker.thrift.gen.profile.struct.ProjectExp>> {
      public getProjectExps() {
        super("getProjectExps");
      }

      public getProjectExps_args getEmptyArgsInstance() {
        return new getProjectExps_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProjectExp>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProjectExp>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> o) {
            getProjectExps_result result = new getProjectExps_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProjectExps_result result = new getProjectExps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProjectExps_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProjectExp>> resultHandler) throws TException {
        iface.getProjectExps(args.query, args.projectExp,resultHandler);
      }
    }

    public static class getProjectExpPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProjectExpPagination_args, com.moseeker.thrift.gen.profile.struct.ProjectExpPagination> {
      public getProjectExpPagination() {
        super("getProjectExpPagination");
      }

      public getProjectExpPagination_args getEmptyArgsInstance() {
        return new getProjectExpPagination_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProjectExpPagination> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProjectExpPagination>() { 
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProjectExpPagination o) {
            getProjectExpPagination_result result = new getProjectExpPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProjectExpPagination_result result = new getProjectExpPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProjectExpPagination_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProjectExpPagination> resultHandler) throws TException {
        iface.getProjectExpPagination(args.query, args.projectExp,resultHandler);
      }
    }

    public static class postProjectExps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postProjectExps_args, Integer> {
      public postProjectExps() {
        super("postProjectExps");
      }

      public postProjectExps_args getEmptyArgsInstance() {
        return new postProjectExps_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postProjectExps_result result = new postProjectExps_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postProjectExps_result result = new postProjectExps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postProjectExps_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postProjectExps(args.projectExps,resultHandler);
      }
    }

    public static class putProjectExps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putProjectExps_args, Integer> {
      public putProjectExps() {
        super("putProjectExps");
      }

      public putProjectExps_args getEmptyArgsInstance() {
        return new putProjectExps_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putProjectExps_result result = new putProjectExps_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putProjectExps_result result = new putProjectExps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putProjectExps_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putProjectExps(args.projectExps,resultHandler);
      }
    }

    public static class delProjectExps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delProjectExps_args, Integer> {
      public delProjectExps() {
        super("delProjectExps");
      }

      public delProjectExps_args getEmptyArgsInstance() {
        return new delProjectExps_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delProjectExps_result result = new delProjectExps_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delProjectExps_result result = new delProjectExps_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delProjectExps_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delProjectExps(args.projectExps,resultHandler);
      }
    }

    public static class postProjectExp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postProjectExp_args, Integer> {
      public postProjectExp() {
        super("postProjectExp");
      }

      public postProjectExp_args getEmptyArgsInstance() {
        return new postProjectExp_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postProjectExp_result result = new postProjectExp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postProjectExp_result result = new postProjectExp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postProjectExp_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postProjectExp(args.projectExp,resultHandler);
      }
    }

    public static class putProjectExp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putProjectExp_args, Integer> {
      public putProjectExp() {
        super("putProjectExp");
      }

      public putProjectExp_args getEmptyArgsInstance() {
        return new putProjectExp_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putProjectExp_result result = new putProjectExp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putProjectExp_result result = new putProjectExp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putProjectExp_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putProjectExp(args.projectExp,resultHandler);
      }
    }

    public static class delProjectExp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delProjectExp_args, Integer> {
      public delProjectExp() {
        super("delProjectExp");
      }

      public delProjectExp_args getEmptyArgsInstance() {
        return new delProjectExp_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delProjectExp_result result = new delProjectExp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delProjectExp_result result = new delProjectExp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delProjectExp_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delProjectExp(args.projectExp,resultHandler);
      }
    }

  }

  public static class getProjectExps_args implements org.apache.thrift.TBase<getProjectExps_args, getProjectExps_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectExps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectExps_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("projectExp", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectExps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectExps_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      PROJECT_EXP((short)2, "projectExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // PROJECT_EXP
            return PROJECT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.PROJECT_EXP, new org.apache.thrift.meta_data.FieldMetaData("projectExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectExps_args.class, metaDataMap);
    }

    public getProjectExps_args() {
    }

    public getProjectExps_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp)
    {
      this();
      this.query = query;
      this.projectExp = projectExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectExps_args(getProjectExps_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetProjectExp()) {
        this.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp(other.projectExp);
      }
    }

    public getProjectExps_args deepCopy() {
      return new getProjectExps_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.projectExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getProjectExps_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExp getProjectExp() {
      return this.projectExp;
    }

    public getProjectExps_args setProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) {
      this.projectExp = projectExp;
      return this;
    }

    public void unsetProjectExp() {
      this.projectExp = null;
    }

    /** Returns true if field projectExp is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectExp() {
      return this.projectExp != null;
    }

    public void setProjectExpIsSet(boolean value) {
      if (!value) {
        this.projectExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case PROJECT_EXP:
        if (value == null) {
          unsetProjectExp();
        } else {
          setProjectExp((com.moseeker.thrift.gen.profile.struct.ProjectExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case PROJECT_EXP:
        return getProjectExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case PROJECT_EXP:
        return isSetProjectExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectExps_args)
        return this.equals((getProjectExps_args)that);
      return false;
    }

    public boolean equals(getProjectExps_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_projectExp = true && this.isSetProjectExp();
      boolean that_present_projectExp = true && that.isSetProjectExp();
      if (this_present_projectExp || that_present_projectExp) {
        if (!(this_present_projectExp && that_present_projectExp))
          return false;
        if (!this.projectExp.equals(that.projectExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_projectExp = true && (isSetProjectExp());
      list.add(present_projectExp);
      if (present_projectExp)
        list.add(projectExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectExp()).compareTo(other.isSetProjectExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectExp, other.projectExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectExps_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectExp:");
      if (this.projectExp == null) {
        sb.append("null");
      } else {
        sb.append(this.projectExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (projectExp != null) {
        projectExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectExps_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectExps_argsStandardScheme getScheme() {
        return new getProjectExps_argsStandardScheme();
      }
    }

    private static class getProjectExps_argsStandardScheme extends StandardScheme<getProjectExps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectExps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                struct.projectExp.read(iprot);
                struct.setProjectExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectExps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.projectExp != null) {
          oprot.writeFieldBegin(PROJECT_EXP_FIELD_DESC);
          struct.projectExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectExps_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectExps_argsTupleScheme getScheme() {
        return new getProjectExps_argsTupleScheme();
      }
    }

    private static class getProjectExps_argsTupleScheme extends TupleScheme<getProjectExps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetProjectExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetProjectExp()) {
          struct.projectExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
          struct.projectExp.read(iprot);
          struct.setProjectExpIsSet(true);
        }
      }
    }

  }

  public static class getProjectExps_result implements org.apache.thrift.TBase<getProjectExps_result, getProjectExps_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectExps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectExps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectExps_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectExps_result.class, metaDataMap);
    }

    public getProjectExps_result() {
    }

    public getProjectExps_result(
      List<com.moseeker.thrift.gen.profile.struct.ProjectExp> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectExps_result(getProjectExps_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.ProjectExp> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.ProjectExp other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.ProjectExp(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProjectExps_result deepCopy() {
      return new getProjectExps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProjectExp> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.ProjectExp elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> getSuccess() {
      return this.success;
    }

    public getProjectExps_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.ProjectExp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectExps_result)
        return this.equals((getProjectExps_result)that);
      return false;
    }

    public boolean equals(getProjectExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectExps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectExps_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectExps_resultStandardScheme getScheme() {
        return new getProjectExps_resultStandardScheme();
      }
    }

    private static class getProjectExps_resultStandardScheme extends StandardScheme<getProjectExps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectExps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(_list320.size);
                  com.moseeker.thrift.gen.profile.struct.ProjectExp _elem321;
                  for (int _i322 = 0; _i322 < _list320.size; ++_i322)
                  {
                    _elem321 = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                    _elem321.read(iprot);
                    struct.success.add(_elem321);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectExps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProjectExp _iter323 : struct.success)
            {
              _iter323.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectExps_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectExps_resultTupleScheme getScheme() {
        return new getProjectExps_resultTupleScheme();
      }
    }

    private static class getProjectExps_resultTupleScheme extends TupleScheme<getProjectExps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.ProjectExp _iter324 : struct.success)
            {
              _iter324.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(_list325.size);
            com.moseeker.thrift.gen.profile.struct.ProjectExp _elem326;
            for (int _i327 = 0; _i327 < _list325.size; ++_i327)
            {
              _elem326 = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
              _elem326.read(iprot);
              struct.success.add(_elem326);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProjectExpPagination_args implements org.apache.thrift.TBase<getProjectExpPagination_args, getProjectExpPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectExpPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectExpPagination_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("projectExp", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectExpPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectExpPagination_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      PROJECT_EXP((short)2, "projectExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // PROJECT_EXP
            return PROJECT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.PROJECT_EXP, new org.apache.thrift.meta_data.FieldMetaData("projectExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectExpPagination_args.class, metaDataMap);
    }

    public getProjectExpPagination_args() {
    }

    public getProjectExpPagination_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp)
    {
      this();
      this.query = query;
      this.projectExp = projectExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectExpPagination_args(getProjectExpPagination_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetProjectExp()) {
        this.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp(other.projectExp);
      }
    }

    public getProjectExpPagination_args deepCopy() {
      return new getProjectExpPagination_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.projectExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getProjectExpPagination_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExp getProjectExp() {
      return this.projectExp;
    }

    public getProjectExpPagination_args setProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) {
      this.projectExp = projectExp;
      return this;
    }

    public void unsetProjectExp() {
      this.projectExp = null;
    }

    /** Returns true if field projectExp is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectExp() {
      return this.projectExp != null;
    }

    public void setProjectExpIsSet(boolean value) {
      if (!value) {
        this.projectExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case PROJECT_EXP:
        if (value == null) {
          unsetProjectExp();
        } else {
          setProjectExp((com.moseeker.thrift.gen.profile.struct.ProjectExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case PROJECT_EXP:
        return getProjectExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case PROJECT_EXP:
        return isSetProjectExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectExpPagination_args)
        return this.equals((getProjectExpPagination_args)that);
      return false;
    }

    public boolean equals(getProjectExpPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_projectExp = true && this.isSetProjectExp();
      boolean that_present_projectExp = true && that.isSetProjectExp();
      if (this_present_projectExp || that_present_projectExp) {
        if (!(this_present_projectExp && that_present_projectExp))
          return false;
        if (!this.projectExp.equals(that.projectExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_projectExp = true && (isSetProjectExp());
      list.add(present_projectExp);
      if (present_projectExp)
        list.add(projectExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectExpPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectExp()).compareTo(other.isSetProjectExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectExp, other.projectExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectExpPagination_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectExp:");
      if (this.projectExp == null) {
        sb.append("null");
      } else {
        sb.append(this.projectExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (projectExp != null) {
        projectExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectExpPagination_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectExpPagination_argsStandardScheme getScheme() {
        return new getProjectExpPagination_argsStandardScheme();
      }
    }

    private static class getProjectExpPagination_argsStandardScheme extends StandardScheme<getProjectExpPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectExpPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                struct.projectExp.read(iprot);
                struct.setProjectExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectExpPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.projectExp != null) {
          oprot.writeFieldBegin(PROJECT_EXP_FIELD_DESC);
          struct.projectExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectExpPagination_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectExpPagination_argsTupleScheme getScheme() {
        return new getProjectExpPagination_argsTupleScheme();
      }
    }

    private static class getProjectExpPagination_argsTupleScheme extends TupleScheme<getProjectExpPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectExpPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetProjectExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetProjectExp()) {
          struct.projectExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectExpPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
          struct.projectExp.read(iprot);
          struct.setProjectExpIsSet(true);
        }
      }
    }

  }

  public static class getProjectExpPagination_result implements org.apache.thrift.TBase<getProjectExpPagination_result, getProjectExpPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectExpPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectExpPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectExpPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectExpPagination_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExpPagination success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExpPagination.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectExpPagination_result.class, metaDataMap);
    }

    public getProjectExpPagination_result() {
    }

    public getProjectExpPagination_result(
      com.moseeker.thrift.gen.profile.struct.ProjectExpPagination success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectExpPagination_result(getProjectExpPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProjectExpPagination(other.success);
      }
    }

    public getProjectExpPagination_result deepCopy() {
      return new getProjectExpPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExpPagination getSuccess() {
      return this.success;
    }

    public getProjectExpPagination_result setSuccess(com.moseeker.thrift.gen.profile.struct.ProjectExpPagination success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProjectExpPagination)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectExpPagination_result)
        return this.equals((getProjectExpPagination_result)that);
      return false;
    }

    public boolean equals(getProjectExpPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectExpPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectExpPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectExpPagination_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectExpPagination_resultStandardScheme getScheme() {
        return new getProjectExpPagination_resultStandardScheme();
      }
    }

    private static class getProjectExpPagination_resultStandardScheme extends StandardScheme<getProjectExpPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectExpPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProjectExpPagination();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectExpPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectExpPagination_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectExpPagination_resultTupleScheme getScheme() {
        return new getProjectExpPagination_resultTupleScheme();
      }
    }

    private static class getProjectExpPagination_resultTupleScheme extends TupleScheme<getProjectExpPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectExpPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectExpPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProjectExpPagination();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postProjectExps_args implements org.apache.thrift.TBase<postProjectExps_args, postProjectExps_args._Fields>, java.io.Serializable, Cloneable, Comparable<postProjectExps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProjectExps_args");

    private static final org.apache.thrift.protocol.TField PROJECT_EXPS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectExps", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProjectExps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProjectExps_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_EXPS((short)1, "projectExps");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_EXPS
            return PROJECT_EXPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_EXPS, new org.apache.thrift.meta_data.FieldMetaData("projectExps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProjectExps_args.class, metaDataMap);
    }

    public postProjectExps_args() {
    }

    public postProjectExps_args(
      List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps)
    {
      this();
      this.projectExps = projectExps;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProjectExps_args(postProjectExps_args other) {
      if (other.isSetProjectExps()) {
        List<com.moseeker.thrift.gen.profile.struct.ProjectExp> __this__projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(other.projectExps.size());
        for (com.moseeker.thrift.gen.profile.struct.ProjectExp other_element : other.projectExps) {
          __this__projectExps.add(new com.moseeker.thrift.gen.profile.struct.ProjectExp(other_element));
        }
        this.projectExps = __this__projectExps;
      }
    }

    public postProjectExps_args deepCopy() {
      return new postProjectExps_args(this);
    }

    @Override
    public void clear() {
      this.projectExps = null;
    }

    public int getProjectExpsSize() {
      return (this.projectExps == null) ? 0 : this.projectExps.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProjectExp> getProjectExpsIterator() {
      return (this.projectExps == null) ? null : this.projectExps.iterator();
    }

    public void addToProjectExps(com.moseeker.thrift.gen.profile.struct.ProjectExp elem) {
      if (this.projectExps == null) {
        this.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>();
      }
      this.projectExps.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> getProjectExps() {
      return this.projectExps;
    }

    public postProjectExps_args setProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) {
      this.projectExps = projectExps;
      return this;
    }

    public void unsetProjectExps() {
      this.projectExps = null;
    }

    /** Returns true if field projectExps is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectExps() {
      return this.projectExps != null;
    }

    public void setProjectExpsIsSet(boolean value) {
      if (!value) {
        this.projectExps = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_EXPS:
        if (value == null) {
          unsetProjectExps();
        } else {
          setProjectExps((List<com.moseeker.thrift.gen.profile.struct.ProjectExp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_EXPS:
        return getProjectExps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_EXPS:
        return isSetProjectExps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProjectExps_args)
        return this.equals((postProjectExps_args)that);
      return false;
    }

    public boolean equals(postProjectExps_args that) {
      if (that == null)
        return false;

      boolean this_present_projectExps = true && this.isSetProjectExps();
      boolean that_present_projectExps = true && that.isSetProjectExps();
      if (this_present_projectExps || that_present_projectExps) {
        if (!(this_present_projectExps && that_present_projectExps))
          return false;
        if (!this.projectExps.equals(that.projectExps))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectExps = true && (isSetProjectExps());
      list.add(present_projectExps);
      if (present_projectExps)
        list.add(projectExps);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProjectExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectExps()).compareTo(other.isSetProjectExps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectExps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectExps, other.projectExps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProjectExps_args(");
      boolean first = true;

      sb.append("projectExps:");
      if (this.projectExps == null) {
        sb.append("null");
      } else {
        sb.append(this.projectExps);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProjectExps_argsStandardSchemeFactory implements SchemeFactory {
      public postProjectExps_argsStandardScheme getScheme() {
        return new postProjectExps_argsStandardScheme();
      }
    }

    private static class postProjectExps_argsStandardScheme extends StandardScheme<postProjectExps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProjectExps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_EXPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                  struct.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(_list328.size);
                  com.moseeker.thrift.gen.profile.struct.ProjectExp _elem329;
                  for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                  {
                    _elem329 = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                    _elem329.read(iprot);
                    struct.projectExps.add(_elem329);
                  }
                  iprot.readListEnd();
                }
                struct.setProjectExpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProjectExps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectExps != null) {
          oprot.writeFieldBegin(PROJECT_EXPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.projectExps.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProjectExp _iter331 : struct.projectExps)
            {
              _iter331.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProjectExps_argsTupleSchemeFactory implements SchemeFactory {
      public postProjectExps_argsTupleScheme getScheme() {
        return new postProjectExps_argsTupleScheme();
      }
    }

    private static class postProjectExps_argsTupleScheme extends TupleScheme<postProjectExps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProjectExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectExps()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectExps()) {
          {
            oprot.writeI32(struct.projectExps.size());
            for (com.moseeker.thrift.gen.profile.struct.ProjectExp _iter332 : struct.projectExps)
            {
              _iter332.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProjectExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list333 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(_list333.size);
            com.moseeker.thrift.gen.profile.struct.ProjectExp _elem334;
            for (int _i335 = 0; _i335 < _list333.size; ++_i335)
            {
              _elem334 = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
              _elem334.read(iprot);
              struct.projectExps.add(_elem334);
            }
          }
          struct.setProjectExpsIsSet(true);
        }
      }
    }

  }

  public static class postProjectExps_result implements org.apache.thrift.TBase<postProjectExps_result, postProjectExps_result._Fields>, java.io.Serializable, Cloneable, Comparable<postProjectExps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProjectExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProjectExps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProjectExps_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProjectExps_result.class, metaDataMap);
    }

    public postProjectExps_result() {
    }

    public postProjectExps_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProjectExps_result(postProjectExps_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postProjectExps_result deepCopy() {
      return new postProjectExps_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postProjectExps_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProjectExps_result)
        return this.equals((postProjectExps_result)that);
      return false;
    }

    public boolean equals(postProjectExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProjectExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProjectExps_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProjectExps_resultStandardSchemeFactory implements SchemeFactory {
      public postProjectExps_resultStandardScheme getScheme() {
        return new postProjectExps_resultStandardScheme();
      }
    }

    private static class postProjectExps_resultStandardScheme extends StandardScheme<postProjectExps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProjectExps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProjectExps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProjectExps_resultTupleSchemeFactory implements SchemeFactory {
      public postProjectExps_resultTupleScheme getScheme() {
        return new postProjectExps_resultTupleScheme();
      }
    }

    private static class postProjectExps_resultTupleScheme extends TupleScheme<postProjectExps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProjectExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProjectExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putProjectExps_args implements org.apache.thrift.TBase<putProjectExps_args, putProjectExps_args._Fields>, java.io.Serializable, Cloneable, Comparable<putProjectExps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProjectExps_args");

    private static final org.apache.thrift.protocol.TField PROJECT_EXPS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectExps", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProjectExps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProjectExps_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_EXPS((short)1, "projectExps");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_EXPS
            return PROJECT_EXPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_EXPS, new org.apache.thrift.meta_data.FieldMetaData("projectExps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProjectExps_args.class, metaDataMap);
    }

    public putProjectExps_args() {
    }

    public putProjectExps_args(
      List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps)
    {
      this();
      this.projectExps = projectExps;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProjectExps_args(putProjectExps_args other) {
      if (other.isSetProjectExps()) {
        List<com.moseeker.thrift.gen.profile.struct.ProjectExp> __this__projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(other.projectExps.size());
        for (com.moseeker.thrift.gen.profile.struct.ProjectExp other_element : other.projectExps) {
          __this__projectExps.add(new com.moseeker.thrift.gen.profile.struct.ProjectExp(other_element));
        }
        this.projectExps = __this__projectExps;
      }
    }

    public putProjectExps_args deepCopy() {
      return new putProjectExps_args(this);
    }

    @Override
    public void clear() {
      this.projectExps = null;
    }

    public int getProjectExpsSize() {
      return (this.projectExps == null) ? 0 : this.projectExps.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProjectExp> getProjectExpsIterator() {
      return (this.projectExps == null) ? null : this.projectExps.iterator();
    }

    public void addToProjectExps(com.moseeker.thrift.gen.profile.struct.ProjectExp elem) {
      if (this.projectExps == null) {
        this.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>();
      }
      this.projectExps.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> getProjectExps() {
      return this.projectExps;
    }

    public putProjectExps_args setProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) {
      this.projectExps = projectExps;
      return this;
    }

    public void unsetProjectExps() {
      this.projectExps = null;
    }

    /** Returns true if field projectExps is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectExps() {
      return this.projectExps != null;
    }

    public void setProjectExpsIsSet(boolean value) {
      if (!value) {
        this.projectExps = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_EXPS:
        if (value == null) {
          unsetProjectExps();
        } else {
          setProjectExps((List<com.moseeker.thrift.gen.profile.struct.ProjectExp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_EXPS:
        return getProjectExps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_EXPS:
        return isSetProjectExps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProjectExps_args)
        return this.equals((putProjectExps_args)that);
      return false;
    }

    public boolean equals(putProjectExps_args that) {
      if (that == null)
        return false;

      boolean this_present_projectExps = true && this.isSetProjectExps();
      boolean that_present_projectExps = true && that.isSetProjectExps();
      if (this_present_projectExps || that_present_projectExps) {
        if (!(this_present_projectExps && that_present_projectExps))
          return false;
        if (!this.projectExps.equals(that.projectExps))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectExps = true && (isSetProjectExps());
      list.add(present_projectExps);
      if (present_projectExps)
        list.add(projectExps);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProjectExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectExps()).compareTo(other.isSetProjectExps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectExps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectExps, other.projectExps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProjectExps_args(");
      boolean first = true;

      sb.append("projectExps:");
      if (this.projectExps == null) {
        sb.append("null");
      } else {
        sb.append(this.projectExps);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProjectExps_argsStandardSchemeFactory implements SchemeFactory {
      public putProjectExps_argsStandardScheme getScheme() {
        return new putProjectExps_argsStandardScheme();
      }
    }

    private static class putProjectExps_argsStandardScheme extends StandardScheme<putProjectExps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProjectExps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_EXPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list336 = iprot.readListBegin();
                  struct.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(_list336.size);
                  com.moseeker.thrift.gen.profile.struct.ProjectExp _elem337;
                  for (int _i338 = 0; _i338 < _list336.size; ++_i338)
                  {
                    _elem337 = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                    _elem337.read(iprot);
                    struct.projectExps.add(_elem337);
                  }
                  iprot.readListEnd();
                }
                struct.setProjectExpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProjectExps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectExps != null) {
          oprot.writeFieldBegin(PROJECT_EXPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.projectExps.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProjectExp _iter339 : struct.projectExps)
            {
              _iter339.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProjectExps_argsTupleSchemeFactory implements SchemeFactory {
      public putProjectExps_argsTupleScheme getScheme() {
        return new putProjectExps_argsTupleScheme();
      }
    }

    private static class putProjectExps_argsTupleScheme extends TupleScheme<putProjectExps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProjectExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectExps()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectExps()) {
          {
            oprot.writeI32(struct.projectExps.size());
            for (com.moseeker.thrift.gen.profile.struct.ProjectExp _iter340 : struct.projectExps)
            {
              _iter340.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProjectExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list341 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(_list341.size);
            com.moseeker.thrift.gen.profile.struct.ProjectExp _elem342;
            for (int _i343 = 0; _i343 < _list341.size; ++_i343)
            {
              _elem342 = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
              _elem342.read(iprot);
              struct.projectExps.add(_elem342);
            }
          }
          struct.setProjectExpsIsSet(true);
        }
      }
    }

  }

  public static class putProjectExps_result implements org.apache.thrift.TBase<putProjectExps_result, putProjectExps_result._Fields>, java.io.Serializable, Cloneable, Comparable<putProjectExps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProjectExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProjectExps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProjectExps_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProjectExps_result.class, metaDataMap);
    }

    public putProjectExps_result() {
    }

    public putProjectExps_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProjectExps_result(putProjectExps_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putProjectExps_result deepCopy() {
      return new putProjectExps_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putProjectExps_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProjectExps_result)
        return this.equals((putProjectExps_result)that);
      return false;
    }

    public boolean equals(putProjectExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProjectExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProjectExps_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProjectExps_resultStandardSchemeFactory implements SchemeFactory {
      public putProjectExps_resultStandardScheme getScheme() {
        return new putProjectExps_resultStandardScheme();
      }
    }

    private static class putProjectExps_resultStandardScheme extends StandardScheme<putProjectExps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProjectExps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProjectExps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProjectExps_resultTupleSchemeFactory implements SchemeFactory {
      public putProjectExps_resultTupleScheme getScheme() {
        return new putProjectExps_resultTupleScheme();
      }
    }

    private static class putProjectExps_resultTupleScheme extends TupleScheme<putProjectExps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProjectExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProjectExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delProjectExps_args implements org.apache.thrift.TBase<delProjectExps_args, delProjectExps_args._Fields>, java.io.Serializable, Cloneable, Comparable<delProjectExps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProjectExps_args");

    private static final org.apache.thrift.protocol.TField PROJECT_EXPS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectExps", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProjectExps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProjectExps_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_EXPS((short)1, "projectExps");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_EXPS
            return PROJECT_EXPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_EXPS, new org.apache.thrift.meta_data.FieldMetaData("projectExps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProjectExps_args.class, metaDataMap);
    }

    public delProjectExps_args() {
    }

    public delProjectExps_args(
      List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps)
    {
      this();
      this.projectExps = projectExps;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProjectExps_args(delProjectExps_args other) {
      if (other.isSetProjectExps()) {
        List<com.moseeker.thrift.gen.profile.struct.ProjectExp> __this__projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(other.projectExps.size());
        for (com.moseeker.thrift.gen.profile.struct.ProjectExp other_element : other.projectExps) {
          __this__projectExps.add(new com.moseeker.thrift.gen.profile.struct.ProjectExp(other_element));
        }
        this.projectExps = __this__projectExps;
      }
    }

    public delProjectExps_args deepCopy() {
      return new delProjectExps_args(this);
    }

    @Override
    public void clear() {
      this.projectExps = null;
    }

    public int getProjectExpsSize() {
      return (this.projectExps == null) ? 0 : this.projectExps.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProjectExp> getProjectExpsIterator() {
      return (this.projectExps == null) ? null : this.projectExps.iterator();
    }

    public void addToProjectExps(com.moseeker.thrift.gen.profile.struct.ProjectExp elem) {
      if (this.projectExps == null) {
        this.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>();
      }
      this.projectExps.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProjectExp> getProjectExps() {
      return this.projectExps;
    }

    public delProjectExps_args setProjectExps(List<com.moseeker.thrift.gen.profile.struct.ProjectExp> projectExps) {
      this.projectExps = projectExps;
      return this;
    }

    public void unsetProjectExps() {
      this.projectExps = null;
    }

    /** Returns true if field projectExps is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectExps() {
      return this.projectExps != null;
    }

    public void setProjectExpsIsSet(boolean value) {
      if (!value) {
        this.projectExps = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_EXPS:
        if (value == null) {
          unsetProjectExps();
        } else {
          setProjectExps((List<com.moseeker.thrift.gen.profile.struct.ProjectExp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_EXPS:
        return getProjectExps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_EXPS:
        return isSetProjectExps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProjectExps_args)
        return this.equals((delProjectExps_args)that);
      return false;
    }

    public boolean equals(delProjectExps_args that) {
      if (that == null)
        return false;

      boolean this_present_projectExps = true && this.isSetProjectExps();
      boolean that_present_projectExps = true && that.isSetProjectExps();
      if (this_present_projectExps || that_present_projectExps) {
        if (!(this_present_projectExps && that_present_projectExps))
          return false;
        if (!this.projectExps.equals(that.projectExps))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectExps = true && (isSetProjectExps());
      list.add(present_projectExps);
      if (present_projectExps)
        list.add(projectExps);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProjectExps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectExps()).compareTo(other.isSetProjectExps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectExps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectExps, other.projectExps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProjectExps_args(");
      boolean first = true;

      sb.append("projectExps:");
      if (this.projectExps == null) {
        sb.append("null");
      } else {
        sb.append(this.projectExps);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProjectExps_argsStandardSchemeFactory implements SchemeFactory {
      public delProjectExps_argsStandardScheme getScheme() {
        return new delProjectExps_argsStandardScheme();
      }
    }

    private static class delProjectExps_argsStandardScheme extends StandardScheme<delProjectExps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProjectExps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_EXPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list344 = iprot.readListBegin();
                  struct.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(_list344.size);
                  com.moseeker.thrift.gen.profile.struct.ProjectExp _elem345;
                  for (int _i346 = 0; _i346 < _list344.size; ++_i346)
                  {
                    _elem345 = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                    _elem345.read(iprot);
                    struct.projectExps.add(_elem345);
                  }
                  iprot.readListEnd();
                }
                struct.setProjectExpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProjectExps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectExps != null) {
          oprot.writeFieldBegin(PROJECT_EXPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.projectExps.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProjectExp _iter347 : struct.projectExps)
            {
              _iter347.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProjectExps_argsTupleSchemeFactory implements SchemeFactory {
      public delProjectExps_argsTupleScheme getScheme() {
        return new delProjectExps_argsTupleScheme();
      }
    }

    private static class delProjectExps_argsTupleScheme extends TupleScheme<delProjectExps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProjectExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectExps()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectExps()) {
          {
            oprot.writeI32(struct.projectExps.size());
            for (com.moseeker.thrift.gen.profile.struct.ProjectExp _iter348 : struct.projectExps)
            {
              _iter348.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProjectExps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list349 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.projectExps = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProjectExp>(_list349.size);
            com.moseeker.thrift.gen.profile.struct.ProjectExp _elem350;
            for (int _i351 = 0; _i351 < _list349.size; ++_i351)
            {
              _elem350 = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
              _elem350.read(iprot);
              struct.projectExps.add(_elem350);
            }
          }
          struct.setProjectExpsIsSet(true);
        }
      }
    }

  }

  public static class delProjectExps_result implements org.apache.thrift.TBase<delProjectExps_result, delProjectExps_result._Fields>, java.io.Serializable, Cloneable, Comparable<delProjectExps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProjectExps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProjectExps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProjectExps_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProjectExps_result.class, metaDataMap);
    }

    public delProjectExps_result() {
    }

    public delProjectExps_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProjectExps_result(delProjectExps_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delProjectExps_result deepCopy() {
      return new delProjectExps_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delProjectExps_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProjectExps_result)
        return this.equals((delProjectExps_result)that);
      return false;
    }

    public boolean equals(delProjectExps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProjectExps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProjectExps_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProjectExps_resultStandardSchemeFactory implements SchemeFactory {
      public delProjectExps_resultStandardScheme getScheme() {
        return new delProjectExps_resultStandardScheme();
      }
    }

    private static class delProjectExps_resultStandardScheme extends StandardScheme<delProjectExps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProjectExps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProjectExps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProjectExps_resultTupleSchemeFactory implements SchemeFactory {
      public delProjectExps_resultTupleScheme getScheme() {
        return new delProjectExps_resultTupleScheme();
      }
    }

    private static class delProjectExps_resultTupleScheme extends TupleScheme<delProjectExps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProjectExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProjectExps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postProjectExp_args implements org.apache.thrift.TBase<postProjectExp_args, postProjectExp_args._Fields>, java.io.Serializable, Cloneable, Comparable<postProjectExp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProjectExp_args");

    private static final org.apache.thrift.protocol.TField PROJECT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("projectExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProjectExp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProjectExp_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_EXP((short)1, "projectExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_EXP
            return PROJECT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_EXP, new org.apache.thrift.meta_data.FieldMetaData("projectExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProjectExp_args.class, metaDataMap);
    }

    public postProjectExp_args() {
    }

    public postProjectExp_args(
      com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp)
    {
      this();
      this.projectExp = projectExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProjectExp_args(postProjectExp_args other) {
      if (other.isSetProjectExp()) {
        this.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp(other.projectExp);
      }
    }

    public postProjectExp_args deepCopy() {
      return new postProjectExp_args(this);
    }

    @Override
    public void clear() {
      this.projectExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExp getProjectExp() {
      return this.projectExp;
    }

    public postProjectExp_args setProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) {
      this.projectExp = projectExp;
      return this;
    }

    public void unsetProjectExp() {
      this.projectExp = null;
    }

    /** Returns true if field projectExp is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectExp() {
      return this.projectExp != null;
    }

    public void setProjectExpIsSet(boolean value) {
      if (!value) {
        this.projectExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_EXP:
        if (value == null) {
          unsetProjectExp();
        } else {
          setProjectExp((com.moseeker.thrift.gen.profile.struct.ProjectExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_EXP:
        return getProjectExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_EXP:
        return isSetProjectExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProjectExp_args)
        return this.equals((postProjectExp_args)that);
      return false;
    }

    public boolean equals(postProjectExp_args that) {
      if (that == null)
        return false;

      boolean this_present_projectExp = true && this.isSetProjectExp();
      boolean that_present_projectExp = true && that.isSetProjectExp();
      if (this_present_projectExp || that_present_projectExp) {
        if (!(this_present_projectExp && that_present_projectExp))
          return false;
        if (!this.projectExp.equals(that.projectExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectExp = true && (isSetProjectExp());
      list.add(present_projectExp);
      if (present_projectExp)
        list.add(projectExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProjectExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectExp()).compareTo(other.isSetProjectExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectExp, other.projectExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProjectExp_args(");
      boolean first = true;

      sb.append("projectExp:");
      if (this.projectExp == null) {
        sb.append("null");
      } else {
        sb.append(this.projectExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectExp != null) {
        projectExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProjectExp_argsStandardSchemeFactory implements SchemeFactory {
      public postProjectExp_argsStandardScheme getScheme() {
        return new postProjectExp_argsStandardScheme();
      }
    }

    private static class postProjectExp_argsStandardScheme extends StandardScheme<postProjectExp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProjectExp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                struct.projectExp.read(iprot);
                struct.setProjectExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProjectExp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectExp != null) {
          oprot.writeFieldBegin(PROJECT_EXP_FIELD_DESC);
          struct.projectExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProjectExp_argsTupleSchemeFactory implements SchemeFactory {
      public postProjectExp_argsTupleScheme getScheme() {
        return new postProjectExp_argsTupleScheme();
      }
    }

    private static class postProjectExp_argsTupleScheme extends TupleScheme<postProjectExp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProjectExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectExp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectExp()) {
          struct.projectExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProjectExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
          struct.projectExp.read(iprot);
          struct.setProjectExpIsSet(true);
        }
      }
    }

  }

  public static class postProjectExp_result implements org.apache.thrift.TBase<postProjectExp_result, postProjectExp_result._Fields>, java.io.Serializable, Cloneable, Comparable<postProjectExp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProjectExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProjectExp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProjectExp_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProjectExp_result.class, metaDataMap);
    }

    public postProjectExp_result() {
    }

    public postProjectExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProjectExp_result(postProjectExp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postProjectExp_result deepCopy() {
      return new postProjectExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postProjectExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProjectExp_result)
        return this.equals((postProjectExp_result)that);
      return false;
    }

    public boolean equals(postProjectExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProjectExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProjectExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProjectExp_resultStandardSchemeFactory implements SchemeFactory {
      public postProjectExp_resultStandardScheme getScheme() {
        return new postProjectExp_resultStandardScheme();
      }
    }

    private static class postProjectExp_resultStandardScheme extends StandardScheme<postProjectExp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProjectExp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProjectExp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProjectExp_resultTupleSchemeFactory implements SchemeFactory {
      public postProjectExp_resultTupleScheme getScheme() {
        return new postProjectExp_resultTupleScheme();
      }
    }

    private static class postProjectExp_resultTupleScheme extends TupleScheme<postProjectExp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProjectExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProjectExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putProjectExp_args implements org.apache.thrift.TBase<putProjectExp_args, putProjectExp_args._Fields>, java.io.Serializable, Cloneable, Comparable<putProjectExp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProjectExp_args");

    private static final org.apache.thrift.protocol.TField PROJECT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("projectExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProjectExp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProjectExp_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_EXP((short)1, "projectExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_EXP
            return PROJECT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_EXP, new org.apache.thrift.meta_data.FieldMetaData("projectExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProjectExp_args.class, metaDataMap);
    }

    public putProjectExp_args() {
    }

    public putProjectExp_args(
      com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp)
    {
      this();
      this.projectExp = projectExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProjectExp_args(putProjectExp_args other) {
      if (other.isSetProjectExp()) {
        this.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp(other.projectExp);
      }
    }

    public putProjectExp_args deepCopy() {
      return new putProjectExp_args(this);
    }

    @Override
    public void clear() {
      this.projectExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExp getProjectExp() {
      return this.projectExp;
    }

    public putProjectExp_args setProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) {
      this.projectExp = projectExp;
      return this;
    }

    public void unsetProjectExp() {
      this.projectExp = null;
    }

    /** Returns true if field projectExp is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectExp() {
      return this.projectExp != null;
    }

    public void setProjectExpIsSet(boolean value) {
      if (!value) {
        this.projectExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_EXP:
        if (value == null) {
          unsetProjectExp();
        } else {
          setProjectExp((com.moseeker.thrift.gen.profile.struct.ProjectExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_EXP:
        return getProjectExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_EXP:
        return isSetProjectExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProjectExp_args)
        return this.equals((putProjectExp_args)that);
      return false;
    }

    public boolean equals(putProjectExp_args that) {
      if (that == null)
        return false;

      boolean this_present_projectExp = true && this.isSetProjectExp();
      boolean that_present_projectExp = true && that.isSetProjectExp();
      if (this_present_projectExp || that_present_projectExp) {
        if (!(this_present_projectExp && that_present_projectExp))
          return false;
        if (!this.projectExp.equals(that.projectExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectExp = true && (isSetProjectExp());
      list.add(present_projectExp);
      if (present_projectExp)
        list.add(projectExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProjectExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectExp()).compareTo(other.isSetProjectExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectExp, other.projectExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProjectExp_args(");
      boolean first = true;

      sb.append("projectExp:");
      if (this.projectExp == null) {
        sb.append("null");
      } else {
        sb.append(this.projectExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectExp != null) {
        projectExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProjectExp_argsStandardSchemeFactory implements SchemeFactory {
      public putProjectExp_argsStandardScheme getScheme() {
        return new putProjectExp_argsStandardScheme();
      }
    }

    private static class putProjectExp_argsStandardScheme extends StandardScheme<putProjectExp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProjectExp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                struct.projectExp.read(iprot);
                struct.setProjectExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProjectExp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectExp != null) {
          oprot.writeFieldBegin(PROJECT_EXP_FIELD_DESC);
          struct.projectExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProjectExp_argsTupleSchemeFactory implements SchemeFactory {
      public putProjectExp_argsTupleScheme getScheme() {
        return new putProjectExp_argsTupleScheme();
      }
    }

    private static class putProjectExp_argsTupleScheme extends TupleScheme<putProjectExp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProjectExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectExp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectExp()) {
          struct.projectExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProjectExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
          struct.projectExp.read(iprot);
          struct.setProjectExpIsSet(true);
        }
      }
    }

  }

  public static class putProjectExp_result implements org.apache.thrift.TBase<putProjectExp_result, putProjectExp_result._Fields>, java.io.Serializable, Cloneable, Comparable<putProjectExp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProjectExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProjectExp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProjectExp_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProjectExp_result.class, metaDataMap);
    }

    public putProjectExp_result() {
    }

    public putProjectExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProjectExp_result(putProjectExp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putProjectExp_result deepCopy() {
      return new putProjectExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putProjectExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProjectExp_result)
        return this.equals((putProjectExp_result)that);
      return false;
    }

    public boolean equals(putProjectExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProjectExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProjectExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProjectExp_resultStandardSchemeFactory implements SchemeFactory {
      public putProjectExp_resultStandardScheme getScheme() {
        return new putProjectExp_resultStandardScheme();
      }
    }

    private static class putProjectExp_resultStandardScheme extends StandardScheme<putProjectExp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProjectExp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProjectExp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProjectExp_resultTupleSchemeFactory implements SchemeFactory {
      public putProjectExp_resultTupleScheme getScheme() {
        return new putProjectExp_resultTupleScheme();
      }
    }

    private static class putProjectExp_resultTupleScheme extends TupleScheme<putProjectExp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProjectExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProjectExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delProjectExp_args implements org.apache.thrift.TBase<delProjectExp_args, delProjectExp_args._Fields>, java.io.Serializable, Cloneable, Comparable<delProjectExp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProjectExp_args");

    private static final org.apache.thrift.protocol.TField PROJECT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("projectExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProjectExp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProjectExp_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_EXP((short)1, "projectExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_EXP
            return PROJECT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_EXP, new org.apache.thrift.meta_data.FieldMetaData("projectExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProjectExp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProjectExp_args.class, metaDataMap);
    }

    public delProjectExp_args() {
    }

    public delProjectExp_args(
      com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp)
    {
      this();
      this.projectExp = projectExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProjectExp_args(delProjectExp_args other) {
      if (other.isSetProjectExp()) {
        this.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp(other.projectExp);
      }
    }

    public delProjectExp_args deepCopy() {
      return new delProjectExp_args(this);
    }

    @Override
    public void clear() {
      this.projectExp = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProjectExp getProjectExp() {
      return this.projectExp;
    }

    public delProjectExp_args setProjectExp(com.moseeker.thrift.gen.profile.struct.ProjectExp projectExp) {
      this.projectExp = projectExp;
      return this;
    }

    public void unsetProjectExp() {
      this.projectExp = null;
    }

    /** Returns true if field projectExp is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectExp() {
      return this.projectExp != null;
    }

    public void setProjectExpIsSet(boolean value) {
      if (!value) {
        this.projectExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_EXP:
        if (value == null) {
          unsetProjectExp();
        } else {
          setProjectExp((com.moseeker.thrift.gen.profile.struct.ProjectExp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_EXP:
        return getProjectExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_EXP:
        return isSetProjectExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProjectExp_args)
        return this.equals((delProjectExp_args)that);
      return false;
    }

    public boolean equals(delProjectExp_args that) {
      if (that == null)
        return false;

      boolean this_present_projectExp = true && this.isSetProjectExp();
      boolean that_present_projectExp = true && that.isSetProjectExp();
      if (this_present_projectExp || that_present_projectExp) {
        if (!(this_present_projectExp && that_present_projectExp))
          return false;
        if (!this.projectExp.equals(that.projectExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectExp = true && (isSetProjectExp());
      list.add(present_projectExp);
      if (present_projectExp)
        list.add(projectExp);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProjectExp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectExp()).compareTo(other.isSetProjectExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectExp, other.projectExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProjectExp_args(");
      boolean first = true;

      sb.append("projectExp:");
      if (this.projectExp == null) {
        sb.append("null");
      } else {
        sb.append(this.projectExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectExp != null) {
        projectExp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProjectExp_argsStandardSchemeFactory implements SchemeFactory {
      public delProjectExp_argsStandardScheme getScheme() {
        return new delProjectExp_argsStandardScheme();
      }
    }

    private static class delProjectExp_argsStandardScheme extends StandardScheme<delProjectExp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProjectExp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
                struct.projectExp.read(iprot);
                struct.setProjectExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProjectExp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectExp != null) {
          oprot.writeFieldBegin(PROJECT_EXP_FIELD_DESC);
          struct.projectExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProjectExp_argsTupleSchemeFactory implements SchemeFactory {
      public delProjectExp_argsTupleScheme getScheme() {
        return new delProjectExp_argsTupleScheme();
      }
    }

    private static class delProjectExp_argsTupleScheme extends TupleScheme<delProjectExp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProjectExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectExp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectExp()) {
          struct.projectExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProjectExp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectExp = new com.moseeker.thrift.gen.profile.struct.ProjectExp();
          struct.projectExp.read(iprot);
          struct.setProjectExpIsSet(true);
        }
      }
    }

  }

  public static class delProjectExp_result implements org.apache.thrift.TBase<delProjectExp_result, delProjectExp_result._Fields>, java.io.Serializable, Cloneable, Comparable<delProjectExp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProjectExp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProjectExp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProjectExp_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProjectExp_result.class, metaDataMap);
    }

    public delProjectExp_result() {
    }

    public delProjectExp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProjectExp_result(delProjectExp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delProjectExp_result deepCopy() {
      return new delProjectExp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delProjectExp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProjectExp_result)
        return this.equals((delProjectExp_result)that);
      return false;
    }

    public boolean equals(delProjectExp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProjectExp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProjectExp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProjectExp_resultStandardSchemeFactory implements SchemeFactory {
      public delProjectExp_resultStandardScheme getScheme() {
        return new delProjectExp_resultStandardScheme();
      }
    }

    private static class delProjectExp_resultStandardScheme extends StandardScheme<delProjectExp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProjectExp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProjectExp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProjectExp_resultTupleSchemeFactory implements SchemeFactory {
      public delProjectExp_resultTupleScheme getScheme() {
        return new delProjectExp_resultTupleScheme();
      }
    }

    private static class delProjectExp_resultTupleScheme extends TupleScheme<delProjectExp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProjectExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProjectExp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
