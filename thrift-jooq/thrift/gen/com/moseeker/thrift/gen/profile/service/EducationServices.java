/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-3")
public class EducationServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.Education> getEducations(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.EducationPagination getEducationPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Basic basic) throws org.apache.thrift.TException;

    public int postEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException;

    public int putEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException;

    public int delEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException;

    public int postEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException;

    public int putEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException;

    public int delEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getEducations(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEducationPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Basic basic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postEducation(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putEducation(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delEducation(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> getEducations(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException
    {
      send_getEducations(query, education);
      return recv_getEducations();
    }

    public void send_getEducations(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException
    {
      getEducations_args args = new getEducations_args();
      args.setQuery(query);
      args.setEducation(education);
      sendBase("getEducations", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> recv_getEducations() throws org.apache.thrift.TException
    {
      getEducations_result result = new getEducations_result();
      receiveBase(result, "getEducations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEducations failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.EducationPagination getEducationPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Basic basic) throws org.apache.thrift.TException
    {
      send_getEducationPagination(query, basic);
      return recv_getEducationPagination();
    }

    public void send_getEducationPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Basic basic) throws org.apache.thrift.TException
    {
      getEducationPagination_args args = new getEducationPagination_args();
      args.setQuery(query);
      args.setBasic(basic);
      sendBase("getEducationPagination", args);
    }

    public com.moseeker.thrift.gen.profile.struct.EducationPagination recv_getEducationPagination() throws org.apache.thrift.TException
    {
      getEducationPagination_result result = new getEducationPagination_result();
      receiveBase(result, "getEducationPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEducationPagination failed: unknown result");
    }

    public int postEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException
    {
      send_postEducations(educations);
      return recv_postEducations();
    }

    public void send_postEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException
    {
      postEducations_args args = new postEducations_args();
      args.setEducations(educations);
      sendBase("postEducations", args);
    }

    public int recv_postEducations() throws org.apache.thrift.TException
    {
      postEducations_result result = new postEducations_result();
      receiveBase(result, "postEducations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postEducations failed: unknown result");
    }

    public int putEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException
    {
      send_putEducations(educations);
      return recv_putEducations();
    }

    public void send_putEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException
    {
      putEducations_args args = new putEducations_args();
      args.setEducations(educations);
      sendBase("putEducations", args);
    }

    public int recv_putEducations() throws org.apache.thrift.TException
    {
      putEducations_result result = new putEducations_result();
      receiveBase(result, "putEducations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putEducations failed: unknown result");
    }

    public int delEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException
    {
      send_delEducations(educations);
      return recv_delEducations();
    }

    public void send_delEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) throws org.apache.thrift.TException
    {
      delEducations_args args = new delEducations_args();
      args.setEducations(educations);
      sendBase("delEducations", args);
    }

    public int recv_delEducations() throws org.apache.thrift.TException
    {
      delEducations_result result = new delEducations_result();
      receiveBase(result, "delEducations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delEducations failed: unknown result");
    }

    public int postEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException
    {
      send_postEducation(education);
      return recv_postEducation();
    }

    public void send_postEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException
    {
      postEducation_args args = new postEducation_args();
      args.setEducation(education);
      sendBase("postEducation", args);
    }

    public int recv_postEducation() throws org.apache.thrift.TException
    {
      postEducation_result result = new postEducation_result();
      receiveBase(result, "postEducation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postEducation failed: unknown result");
    }

    public int putEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException
    {
      send_putEducation(education);
      return recv_putEducation();
    }

    public void send_putEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException
    {
      putEducation_args args = new putEducation_args();
      args.setEducation(education);
      sendBase("putEducation", args);
    }

    public int recv_putEducation() throws org.apache.thrift.TException
    {
      putEducation_result result = new putEducation_result();
      receiveBase(result, "putEducation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putEducation failed: unknown result");
    }

    public int delEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException
    {
      send_delEducation(education);
      return recv_delEducation();
    }

    public void send_delEducation(com.moseeker.thrift.gen.profile.struct.Education education) throws org.apache.thrift.TException
    {
      delEducation_args args = new delEducation_args();
      args.setEducation(education);
      sendBase("delEducation", args);
    }

    public int recv_delEducation() throws org.apache.thrift.TException
    {
      delEducation_result result = new delEducation_result();
      receiveBase(result, "delEducation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delEducation failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getEducations(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEducations_call method_call = new getEducations_call(query, education, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEducations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.Education education;
      public getEducations_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.education = education;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEducations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEducations_args args = new getEducations_args();
        args.setQuery(query);
        args.setEducation(education);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.Education> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEducations();
      }
    }

    public void getEducationPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Basic basic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEducationPagination_call method_call = new getEducationPagination_call(query, basic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEducationPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.Basic basic;
      public getEducationPagination_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Basic basic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.basic = basic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEducationPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEducationPagination_args args = new getEducationPagination_args();
        args.setQuery(query);
        args.setBasic(basic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.EducationPagination getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEducationPagination();
      }
    }

    public void postEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postEducations_call method_call = new postEducations_call(educations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postEducations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Education> educations;
      public postEducations_call(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.educations = educations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postEducations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postEducations_args args = new postEducations_args();
        args.setEducations(educations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postEducations();
      }
    }

    public void putEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putEducations_call method_call = new putEducations_call(educations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putEducations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Education> educations;
      public putEducations_call(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.educations = educations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putEducations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putEducations_args args = new putEducations_args();
        args.setEducations(educations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putEducations();
      }
    }

    public void delEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delEducations_call method_call = new delEducations_call(educations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delEducations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Education> educations;
      public delEducations_call(List<com.moseeker.thrift.gen.profile.struct.Education> educations, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.educations = educations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delEducations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delEducations_args args = new delEducations_args();
        args.setEducations(educations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delEducations();
      }
    }

    public void postEducation(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postEducation_call method_call = new postEducation_call(education, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postEducation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Education education;
      public postEducation_call(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.education = education;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postEducation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postEducation_args args = new postEducation_args();
        args.setEducation(education);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postEducation();
      }
    }

    public void putEducation(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putEducation_call method_call = new putEducation_call(education, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putEducation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Education education;
      public putEducation_call(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.education = education;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putEducation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putEducation_args args = new putEducation_args();
        args.setEducation(education);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putEducation();
      }
    }

    public void delEducation(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delEducation_call method_call = new delEducation_call(education, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delEducation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Education education;
      public delEducation_call(com.moseeker.thrift.gen.profile.struct.Education education, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.education = education;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delEducation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delEducation_args args = new delEducation_args();
        args.setEducation(education);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delEducation();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getEducations", new getEducations());
      processMap.put("getEducationPagination", new getEducationPagination());
      processMap.put("postEducations", new postEducations());
      processMap.put("putEducations", new putEducations());
      processMap.put("delEducations", new delEducations());
      processMap.put("postEducation", new postEducation());
      processMap.put("putEducation", new putEducation());
      processMap.put("delEducation", new delEducation());
      return processMap;
    }

    public static class getEducations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEducations_args> {
      public getEducations() {
        super("getEducations");
      }

      public getEducations_args getEmptyArgsInstance() {
        return new getEducations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEducations_result getResult(I iface, getEducations_args args) throws org.apache.thrift.TException {
        getEducations_result result = new getEducations_result();
        result.success = iface.getEducations(args.query, args.education);
        return result;
      }
    }

    public static class getEducationPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEducationPagination_args> {
      public getEducationPagination() {
        super("getEducationPagination");
      }

      public getEducationPagination_args getEmptyArgsInstance() {
        return new getEducationPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEducationPagination_result getResult(I iface, getEducationPagination_args args) throws org.apache.thrift.TException {
        getEducationPagination_result result = new getEducationPagination_result();
        result.success = iface.getEducationPagination(args.query, args.basic);
        return result;
      }
    }

    public static class postEducations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postEducations_args> {
      public postEducations() {
        super("postEducations");
      }

      public postEducations_args getEmptyArgsInstance() {
        return new postEducations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postEducations_result getResult(I iface, postEducations_args args) throws org.apache.thrift.TException {
        postEducations_result result = new postEducations_result();
        result.success = iface.postEducations(args.educations);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putEducations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putEducations_args> {
      public putEducations() {
        super("putEducations");
      }

      public putEducations_args getEmptyArgsInstance() {
        return new putEducations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putEducations_result getResult(I iface, putEducations_args args) throws org.apache.thrift.TException {
        putEducations_result result = new putEducations_result();
        result.success = iface.putEducations(args.educations);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delEducations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delEducations_args> {
      public delEducations() {
        super("delEducations");
      }

      public delEducations_args getEmptyArgsInstance() {
        return new delEducations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delEducations_result getResult(I iface, delEducations_args args) throws org.apache.thrift.TException {
        delEducations_result result = new delEducations_result();
        result.success = iface.delEducations(args.educations);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postEducation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postEducation_args> {
      public postEducation() {
        super("postEducation");
      }

      public postEducation_args getEmptyArgsInstance() {
        return new postEducation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postEducation_result getResult(I iface, postEducation_args args) throws org.apache.thrift.TException {
        postEducation_result result = new postEducation_result();
        result.success = iface.postEducation(args.education);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putEducation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putEducation_args> {
      public putEducation() {
        super("putEducation");
      }

      public putEducation_args getEmptyArgsInstance() {
        return new putEducation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putEducation_result getResult(I iface, putEducation_args args) throws org.apache.thrift.TException {
        putEducation_result result = new putEducation_result();
        result.success = iface.putEducation(args.education);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delEducation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delEducation_args> {
      public delEducation() {
        super("delEducation");
      }

      public delEducation_args getEmptyArgsInstance() {
        return new delEducation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delEducation_result getResult(I iface, delEducation_args args) throws org.apache.thrift.TException {
        delEducation_result result = new delEducation_result();
        result.success = iface.delEducation(args.education);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getEducations", new getEducations());
      processMap.put("getEducationPagination", new getEducationPagination());
      processMap.put("postEducations", new postEducations());
      processMap.put("putEducations", new putEducations());
      processMap.put("delEducations", new delEducations());
      processMap.put("postEducation", new postEducation());
      processMap.put("putEducation", new putEducation());
      processMap.put("delEducation", new delEducation());
      return processMap;
    }

    public static class getEducations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEducations_args, List<com.moseeker.thrift.gen.profile.struct.Education>> {
      public getEducations() {
        super("getEducations");
      }

      public getEducations_args getEmptyArgsInstance() {
        return new getEducations_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Education>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Education>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.Education> o) {
            getEducations_result result = new getEducations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEducations_result result = new getEducations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEducations_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Education>> resultHandler) throws TException {
        iface.getEducations(args.query, args.education,resultHandler);
      }
    }

    public static class getEducationPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEducationPagination_args, com.moseeker.thrift.gen.profile.struct.EducationPagination> {
      public getEducationPagination() {
        super("getEducationPagination");
      }

      public getEducationPagination_args getEmptyArgsInstance() {
        return new getEducationPagination_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.EducationPagination> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.EducationPagination>() { 
          public void onComplete(com.moseeker.thrift.gen.profile.struct.EducationPagination o) {
            getEducationPagination_result result = new getEducationPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEducationPagination_result result = new getEducationPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEducationPagination_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.EducationPagination> resultHandler) throws TException {
        iface.getEducationPagination(args.query, args.basic,resultHandler);
      }
    }

    public static class postEducations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postEducations_args, Integer> {
      public postEducations() {
        super("postEducations");
      }

      public postEducations_args getEmptyArgsInstance() {
        return new postEducations_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postEducations_result result = new postEducations_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postEducations_result result = new postEducations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postEducations_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postEducations(args.educations,resultHandler);
      }
    }

    public static class putEducations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putEducations_args, Integer> {
      public putEducations() {
        super("putEducations");
      }

      public putEducations_args getEmptyArgsInstance() {
        return new putEducations_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putEducations_result result = new putEducations_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putEducations_result result = new putEducations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putEducations_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putEducations(args.educations,resultHandler);
      }
    }

    public static class delEducations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delEducations_args, Integer> {
      public delEducations() {
        super("delEducations");
      }

      public delEducations_args getEmptyArgsInstance() {
        return new delEducations_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delEducations_result result = new delEducations_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delEducations_result result = new delEducations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delEducations_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delEducations(args.educations,resultHandler);
      }
    }

    public static class postEducation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postEducation_args, Integer> {
      public postEducation() {
        super("postEducation");
      }

      public postEducation_args getEmptyArgsInstance() {
        return new postEducation_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postEducation_result result = new postEducation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postEducation_result result = new postEducation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postEducation_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postEducation(args.education,resultHandler);
      }
    }

    public static class putEducation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putEducation_args, Integer> {
      public putEducation() {
        super("putEducation");
      }

      public putEducation_args getEmptyArgsInstance() {
        return new putEducation_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putEducation_result result = new putEducation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putEducation_result result = new putEducation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putEducation_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putEducation(args.education,resultHandler);
      }
    }

    public static class delEducation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delEducation_args, Integer> {
      public delEducation() {
        super("delEducation");
      }

      public delEducation_args getEmptyArgsInstance() {
        return new delEducation_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delEducation_result result = new delEducation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delEducation_result result = new delEducation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delEducation_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delEducation(args.education,resultHandler);
      }
    }

  }

  public static class getEducations_args implements org.apache.thrift.TBase<getEducations_args, getEducations_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEducations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEducations_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EDUCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("education", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEducations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEducations_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.Education education; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      EDUCATION((short)2, "education");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // EDUCATION
            return EDUCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.EDUCATION, new org.apache.thrift.meta_data.FieldMetaData("education", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Education.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEducations_args.class, metaDataMap);
    }

    public getEducations_args() {
    }

    public getEducations_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.Education education)
    {
      this();
      this.query = query;
      this.education = education;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEducations_args(getEducations_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetEducation()) {
        this.education = new com.moseeker.thrift.gen.profile.struct.Education(other.education);
      }
    }

    public getEducations_args deepCopy() {
      return new getEducations_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.education = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getEducations_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.Education getEducation() {
      return this.education;
    }

    public getEducations_args setEducation(com.moseeker.thrift.gen.profile.struct.Education education) {
      this.education = education;
      return this;
    }

    public void unsetEducation() {
      this.education = null;
    }

    /** Returns true if field education is set (has been assigned a value) and false otherwise */
    public boolean isSetEducation() {
      return this.education != null;
    }

    public void setEducationIsSet(boolean value) {
      if (!value) {
        this.education = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case EDUCATION:
        if (value == null) {
          unsetEducation();
        } else {
          setEducation((com.moseeker.thrift.gen.profile.struct.Education)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case EDUCATION:
        return getEducation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case EDUCATION:
        return isSetEducation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEducations_args)
        return this.equals((getEducations_args)that);
      return false;
    }

    public boolean equals(getEducations_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_education = true && this.isSetEducation();
      boolean that_present_education = true && that.isSetEducation();
      if (this_present_education || that_present_education) {
        if (!(this_present_education && that_present_education))
          return false;
        if (!this.education.equals(that.education))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_education = true && (isSetEducation());
      list.add(present_education);
      if (present_education)
        list.add(education);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEducations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEducation()).compareTo(other.isSetEducation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEducation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.education, other.education);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEducations_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("education:");
      if (this.education == null) {
        sb.append("null");
      } else {
        sb.append(this.education);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (education != null) {
        education.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEducations_argsStandardSchemeFactory implements SchemeFactory {
      public getEducations_argsStandardScheme getScheme() {
        return new getEducations_argsStandardScheme();
      }
    }

    private static class getEducations_argsStandardScheme extends StandardScheme<getEducations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEducations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EDUCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.education = new com.moseeker.thrift.gen.profile.struct.Education();
                struct.education.read(iprot);
                struct.setEducationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEducations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.education != null) {
          oprot.writeFieldBegin(EDUCATION_FIELD_DESC);
          struct.education.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEducations_argsTupleSchemeFactory implements SchemeFactory {
      public getEducations_argsTupleScheme getScheme() {
        return new getEducations_argsTupleScheme();
      }
    }

    private static class getEducations_argsTupleScheme extends TupleScheme<getEducations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEducations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetEducation()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetEducation()) {
          struct.education.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEducations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.education = new com.moseeker.thrift.gen.profile.struct.Education();
          struct.education.read(iprot);
          struct.setEducationIsSet(true);
        }
      }
    }

  }

  public static class getEducations_result implements org.apache.thrift.TBase<getEducations_result, getEducations_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEducations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEducations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEducations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEducations_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Education.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEducations_result.class, metaDataMap);
    }

    public getEducations_result() {
    }

    public getEducations_result(
      List<com.moseeker.thrift.gen.profile.struct.Education> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEducations_result(getEducations_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.Education> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.Education other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.Education(other_element));
        }
        this.success = __this__success;
      }
    }

    public getEducations_result deepCopy() {
      return new getEducations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Education> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.Education elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> getSuccess() {
      return this.success;
    }

    public getEducations_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.Education> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.Education>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEducations_result)
        return this.equals((getEducations_result)that);
      return false;
    }

    public boolean equals(getEducations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEducations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEducations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEducations_resultStandardSchemeFactory implements SchemeFactory {
      public getEducations_resultStandardScheme getScheme() {
        return new getEducations_resultStandardScheme();
      }
    }

    private static class getEducations_resultStandardScheme extends StandardScheme<getEducations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEducations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(_list96.size);
                  com.moseeker.thrift.gen.profile.struct.Education _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new com.moseeker.thrift.gen.profile.struct.Education();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEducations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.Education _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEducations_resultTupleSchemeFactory implements SchemeFactory {
      public getEducations_resultTupleScheme getScheme() {
        return new getEducations_resultTupleScheme();
      }
    }

    private static class getEducations_resultTupleScheme extends TupleScheme<getEducations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEducations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.Education _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEducations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(_list101.size);
            com.moseeker.thrift.gen.profile.struct.Education _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new com.moseeker.thrift.gen.profile.struct.Education();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEducationPagination_args implements org.apache.thrift.TBase<getEducationPagination_args, getEducationPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEducationPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEducationPagination_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BASIC_FIELD_DESC = new org.apache.thrift.protocol.TField("basic", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEducationPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEducationPagination_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.Basic basic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      BASIC((short)2, "basic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // BASIC
            return BASIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.BASIC, new org.apache.thrift.meta_data.FieldMetaData("basic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Basic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEducationPagination_args.class, metaDataMap);
    }

    public getEducationPagination_args() {
    }

    public getEducationPagination_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.Basic basic)
    {
      this();
      this.query = query;
      this.basic = basic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEducationPagination_args(getEducationPagination_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetBasic()) {
        this.basic = new com.moseeker.thrift.gen.profile.struct.Basic(other.basic);
      }
    }

    public getEducationPagination_args deepCopy() {
      return new getEducationPagination_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.basic = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getEducationPagination_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.Basic getBasic() {
      return this.basic;
    }

    public getEducationPagination_args setBasic(com.moseeker.thrift.gen.profile.struct.Basic basic) {
      this.basic = basic;
      return this;
    }

    public void unsetBasic() {
      this.basic = null;
    }

    /** Returns true if field basic is set (has been assigned a value) and false otherwise */
    public boolean isSetBasic() {
      return this.basic != null;
    }

    public void setBasicIsSet(boolean value) {
      if (!value) {
        this.basic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case BASIC:
        if (value == null) {
          unsetBasic();
        } else {
          setBasic((com.moseeker.thrift.gen.profile.struct.Basic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case BASIC:
        return getBasic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case BASIC:
        return isSetBasic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEducationPagination_args)
        return this.equals((getEducationPagination_args)that);
      return false;
    }

    public boolean equals(getEducationPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_basic = true && this.isSetBasic();
      boolean that_present_basic = true && that.isSetBasic();
      if (this_present_basic || that_present_basic) {
        if (!(this_present_basic && that_present_basic))
          return false;
        if (!this.basic.equals(that.basic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_basic = true && (isSetBasic());
      list.add(present_basic);
      if (present_basic)
        list.add(basic);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEducationPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBasic()).compareTo(other.isSetBasic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBasic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basic, other.basic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEducationPagination_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("basic:");
      if (this.basic == null) {
        sb.append("null");
      } else {
        sb.append(this.basic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (basic != null) {
        basic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEducationPagination_argsStandardSchemeFactory implements SchemeFactory {
      public getEducationPagination_argsStandardScheme getScheme() {
        return new getEducationPagination_argsStandardScheme();
      }
    }

    private static class getEducationPagination_argsStandardScheme extends StandardScheme<getEducationPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEducationPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BASIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.basic = new com.moseeker.thrift.gen.profile.struct.Basic();
                struct.basic.read(iprot);
                struct.setBasicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEducationPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.basic != null) {
          oprot.writeFieldBegin(BASIC_FIELD_DESC);
          struct.basic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEducationPagination_argsTupleSchemeFactory implements SchemeFactory {
      public getEducationPagination_argsTupleScheme getScheme() {
        return new getEducationPagination_argsTupleScheme();
      }
    }

    private static class getEducationPagination_argsTupleScheme extends TupleScheme<getEducationPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEducationPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetBasic()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetBasic()) {
          struct.basic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEducationPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.basic = new com.moseeker.thrift.gen.profile.struct.Basic();
          struct.basic.read(iprot);
          struct.setBasicIsSet(true);
        }
      }
    }

  }

  public static class getEducationPagination_result implements org.apache.thrift.TBase<getEducationPagination_result, getEducationPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEducationPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEducationPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEducationPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEducationPagination_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.EducationPagination success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.EducationPagination.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEducationPagination_result.class, metaDataMap);
    }

    public getEducationPagination_result() {
    }

    public getEducationPagination_result(
      com.moseeker.thrift.gen.profile.struct.EducationPagination success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEducationPagination_result(getEducationPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.EducationPagination(other.success);
      }
    }

    public getEducationPagination_result deepCopy() {
      return new getEducationPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.profile.struct.EducationPagination getSuccess() {
      return this.success;
    }

    public getEducationPagination_result setSuccess(com.moseeker.thrift.gen.profile.struct.EducationPagination success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.EducationPagination)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEducationPagination_result)
        return this.equals((getEducationPagination_result)that);
      return false;
    }

    public boolean equals(getEducationPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEducationPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEducationPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEducationPagination_resultStandardSchemeFactory implements SchemeFactory {
      public getEducationPagination_resultStandardScheme getScheme() {
        return new getEducationPagination_resultStandardScheme();
      }
    }

    private static class getEducationPagination_resultStandardScheme extends StandardScheme<getEducationPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEducationPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.EducationPagination();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEducationPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEducationPagination_resultTupleSchemeFactory implements SchemeFactory {
      public getEducationPagination_resultTupleScheme getScheme() {
        return new getEducationPagination_resultTupleScheme();
      }
    }

    private static class getEducationPagination_resultTupleScheme extends TupleScheme<getEducationPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEducationPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEducationPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.EducationPagination();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postEducations_args implements org.apache.thrift.TBase<postEducations_args, postEducations_args._Fields>, java.io.Serializable, Cloneable, Comparable<postEducations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postEducations_args");

    private static final org.apache.thrift.protocol.TField EDUCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("educations", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postEducations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postEducations_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> educations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDUCATIONS((short)1, "educations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDUCATIONS
            return EDUCATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDUCATIONS, new org.apache.thrift.meta_data.FieldMetaData("educations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Education.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postEducations_args.class, metaDataMap);
    }

    public postEducations_args() {
    }

    public postEducations_args(
      List<com.moseeker.thrift.gen.profile.struct.Education> educations)
    {
      this();
      this.educations = educations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postEducations_args(postEducations_args other) {
      if (other.isSetEducations()) {
        List<com.moseeker.thrift.gen.profile.struct.Education> __this__educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(other.educations.size());
        for (com.moseeker.thrift.gen.profile.struct.Education other_element : other.educations) {
          __this__educations.add(new com.moseeker.thrift.gen.profile.struct.Education(other_element));
        }
        this.educations = __this__educations;
      }
    }

    public postEducations_args deepCopy() {
      return new postEducations_args(this);
    }

    @Override
    public void clear() {
      this.educations = null;
    }

    public int getEducationsSize() {
      return (this.educations == null) ? 0 : this.educations.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Education> getEducationsIterator() {
      return (this.educations == null) ? null : this.educations.iterator();
    }

    public void addToEducations(com.moseeker.thrift.gen.profile.struct.Education elem) {
      if (this.educations == null) {
        this.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>();
      }
      this.educations.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> getEducations() {
      return this.educations;
    }

    public postEducations_args setEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) {
      this.educations = educations;
      return this;
    }

    public void unsetEducations() {
      this.educations = null;
    }

    /** Returns true if field educations is set (has been assigned a value) and false otherwise */
    public boolean isSetEducations() {
      return this.educations != null;
    }

    public void setEducationsIsSet(boolean value) {
      if (!value) {
        this.educations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDUCATIONS:
        if (value == null) {
          unsetEducations();
        } else {
          setEducations((List<com.moseeker.thrift.gen.profile.struct.Education>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EDUCATIONS:
        return getEducations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDUCATIONS:
        return isSetEducations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postEducations_args)
        return this.equals((postEducations_args)that);
      return false;
    }

    public boolean equals(postEducations_args that) {
      if (that == null)
        return false;

      boolean this_present_educations = true && this.isSetEducations();
      boolean that_present_educations = true && that.isSetEducations();
      if (this_present_educations || that_present_educations) {
        if (!(this_present_educations && that_present_educations))
          return false;
        if (!this.educations.equals(that.educations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_educations = true && (isSetEducations());
      list.add(present_educations);
      if (present_educations)
        list.add(educations);

      return list.hashCode();
    }

    @Override
    public int compareTo(postEducations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEducations()).compareTo(other.isSetEducations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEducations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.educations, other.educations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postEducations_args(");
      boolean first = true;

      sb.append("educations:");
      if (this.educations == null) {
        sb.append("null");
      } else {
        sb.append(this.educations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postEducations_argsStandardSchemeFactory implements SchemeFactory {
      public postEducations_argsStandardScheme getScheme() {
        return new postEducations_argsStandardScheme();
      }
    }

    private static class postEducations_argsStandardScheme extends StandardScheme<postEducations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postEducations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDUCATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(_list104.size);
                  com.moseeker.thrift.gen.profile.struct.Education _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new com.moseeker.thrift.gen.profile.struct.Education();
                    _elem105.read(iprot);
                    struct.educations.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setEducationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postEducations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.educations != null) {
          oprot.writeFieldBegin(EDUCATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.educations.size()));
            for (com.moseeker.thrift.gen.profile.struct.Education _iter107 : struct.educations)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postEducations_argsTupleSchemeFactory implements SchemeFactory {
      public postEducations_argsTupleScheme getScheme() {
        return new postEducations_argsTupleScheme();
      }
    }

    private static class postEducations_argsTupleScheme extends TupleScheme<postEducations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postEducations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEducations()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEducations()) {
          {
            oprot.writeI32(struct.educations.size());
            for (com.moseeker.thrift.gen.profile.struct.Education _iter108 : struct.educations)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postEducations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(_list109.size);
            com.moseeker.thrift.gen.profile.struct.Education _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new com.moseeker.thrift.gen.profile.struct.Education();
              _elem110.read(iprot);
              struct.educations.add(_elem110);
            }
          }
          struct.setEducationsIsSet(true);
        }
      }
    }

  }

  public static class postEducations_result implements org.apache.thrift.TBase<postEducations_result, postEducations_result._Fields>, java.io.Serializable, Cloneable, Comparable<postEducations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postEducations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postEducations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postEducations_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postEducations_result.class, metaDataMap);
    }

    public postEducations_result() {
    }

    public postEducations_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postEducations_result(postEducations_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postEducations_result deepCopy() {
      return new postEducations_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postEducations_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postEducations_result)
        return this.equals((postEducations_result)that);
      return false;
    }

    public boolean equals(postEducations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postEducations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postEducations_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postEducations_resultStandardSchemeFactory implements SchemeFactory {
      public postEducations_resultStandardScheme getScheme() {
        return new postEducations_resultStandardScheme();
      }
    }

    private static class postEducations_resultStandardScheme extends StandardScheme<postEducations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postEducations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postEducations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postEducations_resultTupleSchemeFactory implements SchemeFactory {
      public postEducations_resultTupleScheme getScheme() {
        return new postEducations_resultTupleScheme();
      }
    }

    private static class postEducations_resultTupleScheme extends TupleScheme<postEducations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postEducations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postEducations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putEducations_args implements org.apache.thrift.TBase<putEducations_args, putEducations_args._Fields>, java.io.Serializable, Cloneable, Comparable<putEducations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putEducations_args");

    private static final org.apache.thrift.protocol.TField EDUCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("educations", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putEducations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putEducations_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> educations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDUCATIONS((short)1, "educations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDUCATIONS
            return EDUCATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDUCATIONS, new org.apache.thrift.meta_data.FieldMetaData("educations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Education.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putEducations_args.class, metaDataMap);
    }

    public putEducations_args() {
    }

    public putEducations_args(
      List<com.moseeker.thrift.gen.profile.struct.Education> educations)
    {
      this();
      this.educations = educations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putEducations_args(putEducations_args other) {
      if (other.isSetEducations()) {
        List<com.moseeker.thrift.gen.profile.struct.Education> __this__educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(other.educations.size());
        for (com.moseeker.thrift.gen.profile.struct.Education other_element : other.educations) {
          __this__educations.add(new com.moseeker.thrift.gen.profile.struct.Education(other_element));
        }
        this.educations = __this__educations;
      }
    }

    public putEducations_args deepCopy() {
      return new putEducations_args(this);
    }

    @Override
    public void clear() {
      this.educations = null;
    }

    public int getEducationsSize() {
      return (this.educations == null) ? 0 : this.educations.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Education> getEducationsIterator() {
      return (this.educations == null) ? null : this.educations.iterator();
    }

    public void addToEducations(com.moseeker.thrift.gen.profile.struct.Education elem) {
      if (this.educations == null) {
        this.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>();
      }
      this.educations.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> getEducations() {
      return this.educations;
    }

    public putEducations_args setEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) {
      this.educations = educations;
      return this;
    }

    public void unsetEducations() {
      this.educations = null;
    }

    /** Returns true if field educations is set (has been assigned a value) and false otherwise */
    public boolean isSetEducations() {
      return this.educations != null;
    }

    public void setEducationsIsSet(boolean value) {
      if (!value) {
        this.educations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDUCATIONS:
        if (value == null) {
          unsetEducations();
        } else {
          setEducations((List<com.moseeker.thrift.gen.profile.struct.Education>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EDUCATIONS:
        return getEducations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDUCATIONS:
        return isSetEducations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putEducations_args)
        return this.equals((putEducations_args)that);
      return false;
    }

    public boolean equals(putEducations_args that) {
      if (that == null)
        return false;

      boolean this_present_educations = true && this.isSetEducations();
      boolean that_present_educations = true && that.isSetEducations();
      if (this_present_educations || that_present_educations) {
        if (!(this_present_educations && that_present_educations))
          return false;
        if (!this.educations.equals(that.educations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_educations = true && (isSetEducations());
      list.add(present_educations);
      if (present_educations)
        list.add(educations);

      return list.hashCode();
    }

    @Override
    public int compareTo(putEducations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEducations()).compareTo(other.isSetEducations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEducations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.educations, other.educations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putEducations_args(");
      boolean first = true;

      sb.append("educations:");
      if (this.educations == null) {
        sb.append("null");
      } else {
        sb.append(this.educations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putEducations_argsStandardSchemeFactory implements SchemeFactory {
      public putEducations_argsStandardScheme getScheme() {
        return new putEducations_argsStandardScheme();
      }
    }

    private static class putEducations_argsStandardScheme extends StandardScheme<putEducations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putEducations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDUCATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(_list112.size);
                  com.moseeker.thrift.gen.profile.struct.Education _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new com.moseeker.thrift.gen.profile.struct.Education();
                    _elem113.read(iprot);
                    struct.educations.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setEducationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putEducations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.educations != null) {
          oprot.writeFieldBegin(EDUCATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.educations.size()));
            for (com.moseeker.thrift.gen.profile.struct.Education _iter115 : struct.educations)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putEducations_argsTupleSchemeFactory implements SchemeFactory {
      public putEducations_argsTupleScheme getScheme() {
        return new putEducations_argsTupleScheme();
      }
    }

    private static class putEducations_argsTupleScheme extends TupleScheme<putEducations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putEducations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEducations()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEducations()) {
          {
            oprot.writeI32(struct.educations.size());
            for (com.moseeker.thrift.gen.profile.struct.Education _iter116 : struct.educations)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putEducations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(_list117.size);
            com.moseeker.thrift.gen.profile.struct.Education _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new com.moseeker.thrift.gen.profile.struct.Education();
              _elem118.read(iprot);
              struct.educations.add(_elem118);
            }
          }
          struct.setEducationsIsSet(true);
        }
      }
    }

  }

  public static class putEducations_result implements org.apache.thrift.TBase<putEducations_result, putEducations_result._Fields>, java.io.Serializable, Cloneable, Comparable<putEducations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putEducations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putEducations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putEducations_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putEducations_result.class, metaDataMap);
    }

    public putEducations_result() {
    }

    public putEducations_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putEducations_result(putEducations_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putEducations_result deepCopy() {
      return new putEducations_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putEducations_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putEducations_result)
        return this.equals((putEducations_result)that);
      return false;
    }

    public boolean equals(putEducations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putEducations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putEducations_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putEducations_resultStandardSchemeFactory implements SchemeFactory {
      public putEducations_resultStandardScheme getScheme() {
        return new putEducations_resultStandardScheme();
      }
    }

    private static class putEducations_resultStandardScheme extends StandardScheme<putEducations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putEducations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putEducations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putEducations_resultTupleSchemeFactory implements SchemeFactory {
      public putEducations_resultTupleScheme getScheme() {
        return new putEducations_resultTupleScheme();
      }
    }

    private static class putEducations_resultTupleScheme extends TupleScheme<putEducations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putEducations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putEducations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delEducations_args implements org.apache.thrift.TBase<delEducations_args, delEducations_args._Fields>, java.io.Serializable, Cloneable, Comparable<delEducations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delEducations_args");

    private static final org.apache.thrift.protocol.TField EDUCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("educations", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delEducations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delEducations_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> educations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDUCATIONS((short)1, "educations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDUCATIONS
            return EDUCATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDUCATIONS, new org.apache.thrift.meta_data.FieldMetaData("educations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Education.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delEducations_args.class, metaDataMap);
    }

    public delEducations_args() {
    }

    public delEducations_args(
      List<com.moseeker.thrift.gen.profile.struct.Education> educations)
    {
      this();
      this.educations = educations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delEducations_args(delEducations_args other) {
      if (other.isSetEducations()) {
        List<com.moseeker.thrift.gen.profile.struct.Education> __this__educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(other.educations.size());
        for (com.moseeker.thrift.gen.profile.struct.Education other_element : other.educations) {
          __this__educations.add(new com.moseeker.thrift.gen.profile.struct.Education(other_element));
        }
        this.educations = __this__educations;
      }
    }

    public delEducations_args deepCopy() {
      return new delEducations_args(this);
    }

    @Override
    public void clear() {
      this.educations = null;
    }

    public int getEducationsSize() {
      return (this.educations == null) ? 0 : this.educations.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Education> getEducationsIterator() {
      return (this.educations == null) ? null : this.educations.iterator();
    }

    public void addToEducations(com.moseeker.thrift.gen.profile.struct.Education elem) {
      if (this.educations == null) {
        this.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>();
      }
      this.educations.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Education> getEducations() {
      return this.educations;
    }

    public delEducations_args setEducations(List<com.moseeker.thrift.gen.profile.struct.Education> educations) {
      this.educations = educations;
      return this;
    }

    public void unsetEducations() {
      this.educations = null;
    }

    /** Returns true if field educations is set (has been assigned a value) and false otherwise */
    public boolean isSetEducations() {
      return this.educations != null;
    }

    public void setEducationsIsSet(boolean value) {
      if (!value) {
        this.educations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDUCATIONS:
        if (value == null) {
          unsetEducations();
        } else {
          setEducations((List<com.moseeker.thrift.gen.profile.struct.Education>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EDUCATIONS:
        return getEducations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDUCATIONS:
        return isSetEducations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delEducations_args)
        return this.equals((delEducations_args)that);
      return false;
    }

    public boolean equals(delEducations_args that) {
      if (that == null)
        return false;

      boolean this_present_educations = true && this.isSetEducations();
      boolean that_present_educations = true && that.isSetEducations();
      if (this_present_educations || that_present_educations) {
        if (!(this_present_educations && that_present_educations))
          return false;
        if (!this.educations.equals(that.educations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_educations = true && (isSetEducations());
      list.add(present_educations);
      if (present_educations)
        list.add(educations);

      return list.hashCode();
    }

    @Override
    public int compareTo(delEducations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEducations()).compareTo(other.isSetEducations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEducations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.educations, other.educations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delEducations_args(");
      boolean first = true;

      sb.append("educations:");
      if (this.educations == null) {
        sb.append("null");
      } else {
        sb.append(this.educations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delEducations_argsStandardSchemeFactory implements SchemeFactory {
      public delEducations_argsStandardScheme getScheme() {
        return new delEducations_argsStandardScheme();
      }
    }

    private static class delEducations_argsStandardScheme extends StandardScheme<delEducations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delEducations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDUCATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(_list120.size);
                  com.moseeker.thrift.gen.profile.struct.Education _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new com.moseeker.thrift.gen.profile.struct.Education();
                    _elem121.read(iprot);
                    struct.educations.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setEducationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delEducations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.educations != null) {
          oprot.writeFieldBegin(EDUCATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.educations.size()));
            for (com.moseeker.thrift.gen.profile.struct.Education _iter123 : struct.educations)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delEducations_argsTupleSchemeFactory implements SchemeFactory {
      public delEducations_argsTupleScheme getScheme() {
        return new delEducations_argsTupleScheme();
      }
    }

    private static class delEducations_argsTupleScheme extends TupleScheme<delEducations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delEducations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEducations()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEducations()) {
          {
            oprot.writeI32(struct.educations.size());
            for (com.moseeker.thrift.gen.profile.struct.Education _iter124 : struct.educations)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delEducations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.educations = new ArrayList<com.moseeker.thrift.gen.profile.struct.Education>(_list125.size);
            com.moseeker.thrift.gen.profile.struct.Education _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new com.moseeker.thrift.gen.profile.struct.Education();
              _elem126.read(iprot);
              struct.educations.add(_elem126);
            }
          }
          struct.setEducationsIsSet(true);
        }
      }
    }

  }

  public static class delEducations_result implements org.apache.thrift.TBase<delEducations_result, delEducations_result._Fields>, java.io.Serializable, Cloneable, Comparable<delEducations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delEducations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delEducations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delEducations_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delEducations_result.class, metaDataMap);
    }

    public delEducations_result() {
    }

    public delEducations_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delEducations_result(delEducations_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delEducations_result deepCopy() {
      return new delEducations_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delEducations_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delEducations_result)
        return this.equals((delEducations_result)that);
      return false;
    }

    public boolean equals(delEducations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delEducations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delEducations_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delEducations_resultStandardSchemeFactory implements SchemeFactory {
      public delEducations_resultStandardScheme getScheme() {
        return new delEducations_resultStandardScheme();
      }
    }

    private static class delEducations_resultStandardScheme extends StandardScheme<delEducations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delEducations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delEducations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delEducations_resultTupleSchemeFactory implements SchemeFactory {
      public delEducations_resultTupleScheme getScheme() {
        return new delEducations_resultTupleScheme();
      }
    }

    private static class delEducations_resultTupleScheme extends TupleScheme<delEducations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delEducations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delEducations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postEducation_args implements org.apache.thrift.TBase<postEducation_args, postEducation_args._Fields>, java.io.Serializable, Cloneable, Comparable<postEducation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postEducation_args");

    private static final org.apache.thrift.protocol.TField EDUCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("education", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postEducation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postEducation_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Education education; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDUCATION((short)1, "education");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDUCATION
            return EDUCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDUCATION, new org.apache.thrift.meta_data.FieldMetaData("education", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Education.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postEducation_args.class, metaDataMap);
    }

    public postEducation_args() {
    }

    public postEducation_args(
      com.moseeker.thrift.gen.profile.struct.Education education)
    {
      this();
      this.education = education;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postEducation_args(postEducation_args other) {
      if (other.isSetEducation()) {
        this.education = new com.moseeker.thrift.gen.profile.struct.Education(other.education);
      }
    }

    public postEducation_args deepCopy() {
      return new postEducation_args(this);
    }

    @Override
    public void clear() {
      this.education = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Education getEducation() {
      return this.education;
    }

    public postEducation_args setEducation(com.moseeker.thrift.gen.profile.struct.Education education) {
      this.education = education;
      return this;
    }

    public void unsetEducation() {
      this.education = null;
    }

    /** Returns true if field education is set (has been assigned a value) and false otherwise */
    public boolean isSetEducation() {
      return this.education != null;
    }

    public void setEducationIsSet(boolean value) {
      if (!value) {
        this.education = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDUCATION:
        if (value == null) {
          unsetEducation();
        } else {
          setEducation((com.moseeker.thrift.gen.profile.struct.Education)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EDUCATION:
        return getEducation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDUCATION:
        return isSetEducation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postEducation_args)
        return this.equals((postEducation_args)that);
      return false;
    }

    public boolean equals(postEducation_args that) {
      if (that == null)
        return false;

      boolean this_present_education = true && this.isSetEducation();
      boolean that_present_education = true && that.isSetEducation();
      if (this_present_education || that_present_education) {
        if (!(this_present_education && that_present_education))
          return false;
        if (!this.education.equals(that.education))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_education = true && (isSetEducation());
      list.add(present_education);
      if (present_education)
        list.add(education);

      return list.hashCode();
    }

    @Override
    public int compareTo(postEducation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEducation()).compareTo(other.isSetEducation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEducation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.education, other.education);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postEducation_args(");
      boolean first = true;

      sb.append("education:");
      if (this.education == null) {
        sb.append("null");
      } else {
        sb.append(this.education);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (education != null) {
        education.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postEducation_argsStandardSchemeFactory implements SchemeFactory {
      public postEducation_argsStandardScheme getScheme() {
        return new postEducation_argsStandardScheme();
      }
    }

    private static class postEducation_argsStandardScheme extends StandardScheme<postEducation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postEducation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDUCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.education = new com.moseeker.thrift.gen.profile.struct.Education();
                struct.education.read(iprot);
                struct.setEducationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postEducation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.education != null) {
          oprot.writeFieldBegin(EDUCATION_FIELD_DESC);
          struct.education.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postEducation_argsTupleSchemeFactory implements SchemeFactory {
      public postEducation_argsTupleScheme getScheme() {
        return new postEducation_argsTupleScheme();
      }
    }

    private static class postEducation_argsTupleScheme extends TupleScheme<postEducation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postEducation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEducation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEducation()) {
          struct.education.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postEducation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.education = new com.moseeker.thrift.gen.profile.struct.Education();
          struct.education.read(iprot);
          struct.setEducationIsSet(true);
        }
      }
    }

  }

  public static class postEducation_result implements org.apache.thrift.TBase<postEducation_result, postEducation_result._Fields>, java.io.Serializable, Cloneable, Comparable<postEducation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postEducation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postEducation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postEducation_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postEducation_result.class, metaDataMap);
    }

    public postEducation_result() {
    }

    public postEducation_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postEducation_result(postEducation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postEducation_result deepCopy() {
      return new postEducation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postEducation_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postEducation_result)
        return this.equals((postEducation_result)that);
      return false;
    }

    public boolean equals(postEducation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postEducation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postEducation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postEducation_resultStandardSchemeFactory implements SchemeFactory {
      public postEducation_resultStandardScheme getScheme() {
        return new postEducation_resultStandardScheme();
      }
    }

    private static class postEducation_resultStandardScheme extends StandardScheme<postEducation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postEducation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postEducation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postEducation_resultTupleSchemeFactory implements SchemeFactory {
      public postEducation_resultTupleScheme getScheme() {
        return new postEducation_resultTupleScheme();
      }
    }

    private static class postEducation_resultTupleScheme extends TupleScheme<postEducation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postEducation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postEducation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putEducation_args implements org.apache.thrift.TBase<putEducation_args, putEducation_args._Fields>, java.io.Serializable, Cloneable, Comparable<putEducation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putEducation_args");

    private static final org.apache.thrift.protocol.TField EDUCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("education", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putEducation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putEducation_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Education education; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDUCATION((short)1, "education");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDUCATION
            return EDUCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDUCATION, new org.apache.thrift.meta_data.FieldMetaData("education", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Education.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putEducation_args.class, metaDataMap);
    }

    public putEducation_args() {
    }

    public putEducation_args(
      com.moseeker.thrift.gen.profile.struct.Education education)
    {
      this();
      this.education = education;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putEducation_args(putEducation_args other) {
      if (other.isSetEducation()) {
        this.education = new com.moseeker.thrift.gen.profile.struct.Education(other.education);
      }
    }

    public putEducation_args deepCopy() {
      return new putEducation_args(this);
    }

    @Override
    public void clear() {
      this.education = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Education getEducation() {
      return this.education;
    }

    public putEducation_args setEducation(com.moseeker.thrift.gen.profile.struct.Education education) {
      this.education = education;
      return this;
    }

    public void unsetEducation() {
      this.education = null;
    }

    /** Returns true if field education is set (has been assigned a value) and false otherwise */
    public boolean isSetEducation() {
      return this.education != null;
    }

    public void setEducationIsSet(boolean value) {
      if (!value) {
        this.education = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDUCATION:
        if (value == null) {
          unsetEducation();
        } else {
          setEducation((com.moseeker.thrift.gen.profile.struct.Education)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EDUCATION:
        return getEducation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDUCATION:
        return isSetEducation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putEducation_args)
        return this.equals((putEducation_args)that);
      return false;
    }

    public boolean equals(putEducation_args that) {
      if (that == null)
        return false;

      boolean this_present_education = true && this.isSetEducation();
      boolean that_present_education = true && that.isSetEducation();
      if (this_present_education || that_present_education) {
        if (!(this_present_education && that_present_education))
          return false;
        if (!this.education.equals(that.education))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_education = true && (isSetEducation());
      list.add(present_education);
      if (present_education)
        list.add(education);

      return list.hashCode();
    }

    @Override
    public int compareTo(putEducation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEducation()).compareTo(other.isSetEducation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEducation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.education, other.education);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putEducation_args(");
      boolean first = true;

      sb.append("education:");
      if (this.education == null) {
        sb.append("null");
      } else {
        sb.append(this.education);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (education != null) {
        education.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putEducation_argsStandardSchemeFactory implements SchemeFactory {
      public putEducation_argsStandardScheme getScheme() {
        return new putEducation_argsStandardScheme();
      }
    }

    private static class putEducation_argsStandardScheme extends StandardScheme<putEducation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putEducation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDUCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.education = new com.moseeker.thrift.gen.profile.struct.Education();
                struct.education.read(iprot);
                struct.setEducationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putEducation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.education != null) {
          oprot.writeFieldBegin(EDUCATION_FIELD_DESC);
          struct.education.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putEducation_argsTupleSchemeFactory implements SchemeFactory {
      public putEducation_argsTupleScheme getScheme() {
        return new putEducation_argsTupleScheme();
      }
    }

    private static class putEducation_argsTupleScheme extends TupleScheme<putEducation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putEducation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEducation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEducation()) {
          struct.education.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putEducation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.education = new com.moseeker.thrift.gen.profile.struct.Education();
          struct.education.read(iprot);
          struct.setEducationIsSet(true);
        }
      }
    }

  }

  public static class putEducation_result implements org.apache.thrift.TBase<putEducation_result, putEducation_result._Fields>, java.io.Serializable, Cloneable, Comparable<putEducation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putEducation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putEducation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putEducation_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putEducation_result.class, metaDataMap);
    }

    public putEducation_result() {
    }

    public putEducation_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putEducation_result(putEducation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putEducation_result deepCopy() {
      return new putEducation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putEducation_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putEducation_result)
        return this.equals((putEducation_result)that);
      return false;
    }

    public boolean equals(putEducation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putEducation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putEducation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putEducation_resultStandardSchemeFactory implements SchemeFactory {
      public putEducation_resultStandardScheme getScheme() {
        return new putEducation_resultStandardScheme();
      }
    }

    private static class putEducation_resultStandardScheme extends StandardScheme<putEducation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putEducation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putEducation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putEducation_resultTupleSchemeFactory implements SchemeFactory {
      public putEducation_resultTupleScheme getScheme() {
        return new putEducation_resultTupleScheme();
      }
    }

    private static class putEducation_resultTupleScheme extends TupleScheme<putEducation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putEducation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putEducation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delEducation_args implements org.apache.thrift.TBase<delEducation_args, delEducation_args._Fields>, java.io.Serializable, Cloneable, Comparable<delEducation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delEducation_args");

    private static final org.apache.thrift.protocol.TField EDUCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("education", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delEducation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delEducation_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Education education; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDUCATION((short)1, "education");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDUCATION
            return EDUCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDUCATION, new org.apache.thrift.meta_data.FieldMetaData("education", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Education.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delEducation_args.class, metaDataMap);
    }

    public delEducation_args() {
    }

    public delEducation_args(
      com.moseeker.thrift.gen.profile.struct.Education education)
    {
      this();
      this.education = education;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delEducation_args(delEducation_args other) {
      if (other.isSetEducation()) {
        this.education = new com.moseeker.thrift.gen.profile.struct.Education(other.education);
      }
    }

    public delEducation_args deepCopy() {
      return new delEducation_args(this);
    }

    @Override
    public void clear() {
      this.education = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Education getEducation() {
      return this.education;
    }

    public delEducation_args setEducation(com.moseeker.thrift.gen.profile.struct.Education education) {
      this.education = education;
      return this;
    }

    public void unsetEducation() {
      this.education = null;
    }

    /** Returns true if field education is set (has been assigned a value) and false otherwise */
    public boolean isSetEducation() {
      return this.education != null;
    }

    public void setEducationIsSet(boolean value) {
      if (!value) {
        this.education = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDUCATION:
        if (value == null) {
          unsetEducation();
        } else {
          setEducation((com.moseeker.thrift.gen.profile.struct.Education)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EDUCATION:
        return getEducation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDUCATION:
        return isSetEducation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delEducation_args)
        return this.equals((delEducation_args)that);
      return false;
    }

    public boolean equals(delEducation_args that) {
      if (that == null)
        return false;

      boolean this_present_education = true && this.isSetEducation();
      boolean that_present_education = true && that.isSetEducation();
      if (this_present_education || that_present_education) {
        if (!(this_present_education && that_present_education))
          return false;
        if (!this.education.equals(that.education))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_education = true && (isSetEducation());
      list.add(present_education);
      if (present_education)
        list.add(education);

      return list.hashCode();
    }

    @Override
    public int compareTo(delEducation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEducation()).compareTo(other.isSetEducation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEducation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.education, other.education);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delEducation_args(");
      boolean first = true;

      sb.append("education:");
      if (this.education == null) {
        sb.append("null");
      } else {
        sb.append(this.education);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (education != null) {
        education.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delEducation_argsStandardSchemeFactory implements SchemeFactory {
      public delEducation_argsStandardScheme getScheme() {
        return new delEducation_argsStandardScheme();
      }
    }

    private static class delEducation_argsStandardScheme extends StandardScheme<delEducation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delEducation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDUCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.education = new com.moseeker.thrift.gen.profile.struct.Education();
                struct.education.read(iprot);
                struct.setEducationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delEducation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.education != null) {
          oprot.writeFieldBegin(EDUCATION_FIELD_DESC);
          struct.education.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delEducation_argsTupleSchemeFactory implements SchemeFactory {
      public delEducation_argsTupleScheme getScheme() {
        return new delEducation_argsTupleScheme();
      }
    }

    private static class delEducation_argsTupleScheme extends TupleScheme<delEducation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delEducation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEducation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEducation()) {
          struct.education.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delEducation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.education = new com.moseeker.thrift.gen.profile.struct.Education();
          struct.education.read(iprot);
          struct.setEducationIsSet(true);
        }
      }
    }

  }

  public static class delEducation_result implements org.apache.thrift.TBase<delEducation_result, delEducation_result._Fields>, java.io.Serializable, Cloneable, Comparable<delEducation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delEducation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delEducation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delEducation_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delEducation_result.class, metaDataMap);
    }

    public delEducation_result() {
    }

    public delEducation_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delEducation_result(delEducation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delEducation_result deepCopy() {
      return new delEducation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delEducation_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delEducation_result)
        return this.equals((delEducation_result)that);
      return false;
    }

    public boolean equals(delEducation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delEducation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delEducation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delEducation_resultStandardSchemeFactory implements SchemeFactory {
      public delEducation_resultStandardScheme getScheme() {
        return new delEducation_resultStandardScheme();
      }
    }

    private static class delEducation_resultStandardScheme extends StandardScheme<delEducation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delEducation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delEducation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delEducation_resultTupleSchemeFactory implements SchemeFactory {
      public delEducation_resultTupleScheme getScheme() {
        return new delEducation_resultTupleScheme();
      }
    }

    private static class delEducation_resultTupleScheme extends TupleScheme<delEducation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delEducation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delEducation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
