/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-3")
public class ProfileExtServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> getProfileExts(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProfileExtPagination getProfileExtPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException;

    public int postProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException;

    public int putProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException;

    public int delProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException;

    public int postProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException;

    public int putProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException;

    public int delProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getProfileExts(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileExtPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> getProfileExts(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      send_getProfileExts(query, profileExt);
      return recv_getProfileExts();
    }

    public void send_getProfileExts(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      getProfileExts_args args = new getProfileExts_args();
      args.setQuery(query);
      args.setProfileExt(profileExt);
      sendBase("getProfileExts", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> recv_getProfileExts() throws org.apache.thrift.TException
    {
      getProfileExts_result result = new getProfileExts_result();
      receiveBase(result, "getProfileExts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileExts failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExtPagination getProfileExtPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      send_getProfileExtPagination(query, profileExt);
      return recv_getProfileExtPagination();
    }

    public void send_getProfileExtPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      getProfileExtPagination_args args = new getProfileExtPagination_args();
      args.setQuery(query);
      args.setProfileExt(profileExt);
      sendBase("getProfileExtPagination", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExtPagination recv_getProfileExtPagination() throws org.apache.thrift.TException
    {
      getProfileExtPagination_result result = new getProfileExtPagination_result();
      receiveBase(result, "getProfileExtPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileExtPagination failed: unknown result");
    }

    public int postProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException
    {
      send_postProfileExts(profileExts);
      return recv_postProfileExts();
    }

    public void send_postProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException
    {
      postProfileExts_args args = new postProfileExts_args();
      args.setProfileExts(profileExts);
      sendBase("postProfileExts", args);
    }

    public int recv_postProfileExts() throws org.apache.thrift.TException
    {
      postProfileExts_result result = new postProfileExts_result();
      receiveBase(result, "postProfileExts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postProfileExts failed: unknown result");
    }

    public int putProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException
    {
      send_putProfileExts(profileExts);
      return recv_putProfileExts();
    }

    public void send_putProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException
    {
      putProfileExts_args args = new putProfileExts_args();
      args.setProfileExts(profileExts);
      sendBase("putProfileExts", args);
    }

    public int recv_putProfileExts() throws org.apache.thrift.TException
    {
      putProfileExts_result result = new putProfileExts_result();
      receiveBase(result, "putProfileExts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putProfileExts failed: unknown result");
    }

    public int delProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException
    {
      send_delProfileExts(profileExts);
      return recv_delProfileExts();
    }

    public void send_delProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) throws org.apache.thrift.TException
    {
      delProfileExts_args args = new delProfileExts_args();
      args.setProfileExts(profileExts);
      sendBase("delProfileExts", args);
    }

    public int recv_delProfileExts() throws org.apache.thrift.TException
    {
      delProfileExts_result result = new delProfileExts_result();
      receiveBase(result, "delProfileExts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delProfileExts failed: unknown result");
    }

    public int postProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      send_postProfileExt(profileExt);
      return recv_postProfileExt();
    }

    public void send_postProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      postProfileExt_args args = new postProfileExt_args();
      args.setProfileExt(profileExt);
      sendBase("postProfileExt", args);
    }

    public int recv_postProfileExt() throws org.apache.thrift.TException
    {
      postProfileExt_result result = new postProfileExt_result();
      receiveBase(result, "postProfileExt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postProfileExt failed: unknown result");
    }

    public int putProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      send_putProfileExt(profileExt);
      return recv_putProfileExt();
    }

    public void send_putProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      putProfileExt_args args = new putProfileExt_args();
      args.setProfileExt(profileExt);
      sendBase("putProfileExt", args);
    }

    public int recv_putProfileExt() throws org.apache.thrift.TException
    {
      putProfileExt_result result = new putProfileExt_result();
      receiveBase(result, "putProfileExt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putProfileExt failed: unknown result");
    }

    public int delProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      send_delProfileExt(profileExt);
      return recv_delProfileExt();
    }

    public void send_delProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) throws org.apache.thrift.TException
    {
      delProfileExt_args args = new delProfileExt_args();
      args.setProfileExt(profileExt);
      sendBase("delProfileExt", args);
    }

    public int recv_delProfileExt() throws org.apache.thrift.TException
    {
      delProfileExt_result result = new delProfileExt_result();
      receiveBase(result, "delProfileExt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delProfileExt failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getProfileExts(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileExts_call method_call = new getProfileExts_call(query, profileExt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileExts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt;
      public getProfileExts_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.profileExt = profileExt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileExts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileExts_args args = new getProfileExts_args();
        args.setQuery(query);
        args.setProfileExt(profileExt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileExts();
      }
    }

    public void getProfileExtPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileExtPagination_call method_call = new getProfileExtPagination_call(query, profileExt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileExtPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt;
      public getProfileExtPagination_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.profileExt = profileExt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileExtPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileExtPagination_args args = new getProfileExtPagination_args();
        args.setQuery(query);
        args.setProfileExt(profileExt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProfileExtPagination getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileExtPagination();
      }
    }

    public void postProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postProfileExts_call method_call = new postProfileExts_call(profileExts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postProfileExts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts;
      public postProfileExts_call(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileExts = profileExts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postProfileExts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postProfileExts_args args = new postProfileExts_args();
        args.setProfileExts(profileExts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postProfileExts();
      }
    }

    public void putProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putProfileExts_call method_call = new putProfileExts_call(profileExts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putProfileExts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts;
      public putProfileExts_call(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileExts = profileExts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putProfileExts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putProfileExts_args args = new putProfileExts_args();
        args.setProfileExts(profileExts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putProfileExts();
      }
    }

    public void delProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delProfileExts_call method_call = new delProfileExts_call(profileExts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delProfileExts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts;
      public delProfileExts_call(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileExts = profileExts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delProfileExts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delProfileExts_args args = new delProfileExts_args();
        args.setProfileExts(profileExts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delProfileExts();
      }
    }

    public void postProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postProfileExt_call method_call = new postProfileExt_call(profileExt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postProfileExt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt;
      public postProfileExt_call(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileExt = profileExt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postProfileExt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postProfileExt_args args = new postProfileExt_args();
        args.setProfileExt(profileExt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postProfileExt();
      }
    }

    public void putProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putProfileExt_call method_call = new putProfileExt_call(profileExt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putProfileExt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt;
      public putProfileExt_call(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileExt = profileExt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putProfileExt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putProfileExt_args args = new putProfileExt_args();
        args.setProfileExt(profileExt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putProfileExt();
      }
    }

    public void delProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delProfileExt_call method_call = new delProfileExt_call(profileExt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delProfileExt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt;
      public delProfileExt_call(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileExt = profileExt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delProfileExt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delProfileExt_args args = new delProfileExt_args();
        args.setProfileExt(profileExt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delProfileExt();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getProfileExts", new getProfileExts());
      processMap.put("getProfileExtPagination", new getProfileExtPagination());
      processMap.put("postProfileExts", new postProfileExts());
      processMap.put("putProfileExts", new putProfileExts());
      processMap.put("delProfileExts", new delProfileExts());
      processMap.put("postProfileExt", new postProfileExt());
      processMap.put("putProfileExt", new putProfileExt());
      processMap.put("delProfileExt", new delProfileExt());
      return processMap;
    }

    public static class getProfileExts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileExts_args> {
      public getProfileExts() {
        super("getProfileExts");
      }

      public getProfileExts_args getEmptyArgsInstance() {
        return new getProfileExts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileExts_result getResult(I iface, getProfileExts_args args) throws org.apache.thrift.TException {
        getProfileExts_result result = new getProfileExts_result();
        result.success = iface.getProfileExts(args.query, args.profileExt);
        return result;
      }
    }

    public static class getProfileExtPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileExtPagination_args> {
      public getProfileExtPagination() {
        super("getProfileExtPagination");
      }

      public getProfileExtPagination_args getEmptyArgsInstance() {
        return new getProfileExtPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileExtPagination_result getResult(I iface, getProfileExtPagination_args args) throws org.apache.thrift.TException {
        getProfileExtPagination_result result = new getProfileExtPagination_result();
        result.success = iface.getProfileExtPagination(args.query, args.profileExt);
        return result;
      }
    }

    public static class postProfileExts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postProfileExts_args> {
      public postProfileExts() {
        super("postProfileExts");
      }

      public postProfileExts_args getEmptyArgsInstance() {
        return new postProfileExts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postProfileExts_result getResult(I iface, postProfileExts_args args) throws org.apache.thrift.TException {
        postProfileExts_result result = new postProfileExts_result();
        result.success = iface.postProfileExts(args.profileExts);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putProfileExts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putProfileExts_args> {
      public putProfileExts() {
        super("putProfileExts");
      }

      public putProfileExts_args getEmptyArgsInstance() {
        return new putProfileExts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putProfileExts_result getResult(I iface, putProfileExts_args args) throws org.apache.thrift.TException {
        putProfileExts_result result = new putProfileExts_result();
        result.success = iface.putProfileExts(args.profileExts);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delProfileExts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delProfileExts_args> {
      public delProfileExts() {
        super("delProfileExts");
      }

      public delProfileExts_args getEmptyArgsInstance() {
        return new delProfileExts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delProfileExts_result getResult(I iface, delProfileExts_args args) throws org.apache.thrift.TException {
        delProfileExts_result result = new delProfileExts_result();
        result.success = iface.delProfileExts(args.profileExts);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postProfileExt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postProfileExt_args> {
      public postProfileExt() {
        super("postProfileExt");
      }

      public postProfileExt_args getEmptyArgsInstance() {
        return new postProfileExt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postProfileExt_result getResult(I iface, postProfileExt_args args) throws org.apache.thrift.TException {
        postProfileExt_result result = new postProfileExt_result();
        result.success = iface.postProfileExt(args.profileExt);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putProfileExt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putProfileExt_args> {
      public putProfileExt() {
        super("putProfileExt");
      }

      public putProfileExt_args getEmptyArgsInstance() {
        return new putProfileExt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putProfileExt_result getResult(I iface, putProfileExt_args args) throws org.apache.thrift.TException {
        putProfileExt_result result = new putProfileExt_result();
        result.success = iface.putProfileExt(args.profileExt);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delProfileExt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delProfileExt_args> {
      public delProfileExt() {
        super("delProfileExt");
      }

      public delProfileExt_args getEmptyArgsInstance() {
        return new delProfileExt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delProfileExt_result getResult(I iface, delProfileExt_args args) throws org.apache.thrift.TException {
        delProfileExt_result result = new delProfileExt_result();
        result.success = iface.delProfileExt(args.profileExt);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getProfileExts", new getProfileExts());
      processMap.put("getProfileExtPagination", new getProfileExtPagination());
      processMap.put("postProfileExts", new postProfileExts());
      processMap.put("putProfileExts", new putProfileExts());
      processMap.put("delProfileExts", new delProfileExts());
      processMap.put("postProfileExt", new postProfileExt());
      processMap.put("putProfileExt", new putProfileExt());
      processMap.put("delProfileExt", new delProfileExt());
      return processMap;
    }

    public static class getProfileExts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileExts_args, List<com.moseeker.thrift.gen.profile.struct.ProfileExt>> {
      public getProfileExts() {
        super("getProfileExts");
      }

      public getProfileExts_args getEmptyArgsInstance() {
        return new getProfileExts_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProfileExt>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProfileExt>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> o) {
            getProfileExts_result result = new getProfileExts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileExts_result result = new getProfileExts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileExts_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProfileExt>> resultHandler) throws TException {
        iface.getProfileExts(args.query, args.profileExt,resultHandler);
      }
    }

    public static class getProfileExtPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileExtPagination_args, com.moseeker.thrift.gen.profile.struct.ProfileExtPagination> {
      public getProfileExtPagination() {
        super("getProfileExtPagination");
      }

      public getProfileExtPagination_args getEmptyArgsInstance() {
        return new getProfileExtPagination_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileExtPagination> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileExtPagination>() { 
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProfileExtPagination o) {
            getProfileExtPagination_result result = new getProfileExtPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileExtPagination_result result = new getProfileExtPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileExtPagination_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileExtPagination> resultHandler) throws TException {
        iface.getProfileExtPagination(args.query, args.profileExt,resultHandler);
      }
    }

    public static class postProfileExts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postProfileExts_args, Integer> {
      public postProfileExts() {
        super("postProfileExts");
      }

      public postProfileExts_args getEmptyArgsInstance() {
        return new postProfileExts_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postProfileExts_result result = new postProfileExts_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postProfileExts_result result = new postProfileExts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postProfileExts_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postProfileExts(args.profileExts,resultHandler);
      }
    }

    public static class putProfileExts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putProfileExts_args, Integer> {
      public putProfileExts() {
        super("putProfileExts");
      }

      public putProfileExts_args getEmptyArgsInstance() {
        return new putProfileExts_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putProfileExts_result result = new putProfileExts_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putProfileExts_result result = new putProfileExts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putProfileExts_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putProfileExts(args.profileExts,resultHandler);
      }
    }

    public static class delProfileExts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delProfileExts_args, Integer> {
      public delProfileExts() {
        super("delProfileExts");
      }

      public delProfileExts_args getEmptyArgsInstance() {
        return new delProfileExts_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delProfileExts_result result = new delProfileExts_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delProfileExts_result result = new delProfileExts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delProfileExts_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delProfileExts(args.profileExts,resultHandler);
      }
    }

    public static class postProfileExt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postProfileExt_args, Integer> {
      public postProfileExt() {
        super("postProfileExt");
      }

      public postProfileExt_args getEmptyArgsInstance() {
        return new postProfileExt_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postProfileExt_result result = new postProfileExt_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postProfileExt_result result = new postProfileExt_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postProfileExt_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postProfileExt(args.profileExt,resultHandler);
      }
    }

    public static class putProfileExt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putProfileExt_args, Integer> {
      public putProfileExt() {
        super("putProfileExt");
      }

      public putProfileExt_args getEmptyArgsInstance() {
        return new putProfileExt_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putProfileExt_result result = new putProfileExt_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putProfileExt_result result = new putProfileExt_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putProfileExt_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putProfileExt(args.profileExt,resultHandler);
      }
    }

    public static class delProfileExt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delProfileExt_args, Integer> {
      public delProfileExt() {
        super("delProfileExt");
      }

      public delProfileExt_args getEmptyArgsInstance() {
        return new delProfileExt_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delProfileExt_result result = new delProfileExt_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delProfileExt_result result = new delProfileExt_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delProfileExt_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delProfileExt(args.profileExt,resultHandler);
      }
    }

  }

  public static class getProfileExts_args implements org.apache.thrift.TBase<getProfileExts_args, getProfileExts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileExts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileExts_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROFILE_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileExt", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileExts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileExts_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      PROFILE_EXT((short)2, "profileExt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // PROFILE_EXT
            return PROFILE_EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.PROFILE_EXT, new org.apache.thrift.meta_data.FieldMetaData("profileExt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileExts_args.class, metaDataMap);
    }

    public getProfileExts_args() {
    }

    public getProfileExts_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt)
    {
      this();
      this.query = query;
      this.profileExt = profileExt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileExts_args(getProfileExts_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetProfileExt()) {
        this.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt(other.profileExt);
      }
    }

    public getProfileExts_args deepCopy() {
      return new getProfileExts_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.profileExt = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getProfileExts_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExt getProfileExt() {
      return this.profileExt;
    }

    public getProfileExts_args setProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) {
      this.profileExt = profileExt;
      return this;
    }

    public void unsetProfileExt() {
      this.profileExt = null;
    }

    /** Returns true if field profileExt is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileExt() {
      return this.profileExt != null;
    }

    public void setProfileExtIsSet(boolean value) {
      if (!value) {
        this.profileExt = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case PROFILE_EXT:
        if (value == null) {
          unsetProfileExt();
        } else {
          setProfileExt((com.moseeker.thrift.gen.profile.struct.ProfileExt)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case PROFILE_EXT:
        return getProfileExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case PROFILE_EXT:
        return isSetProfileExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileExts_args)
        return this.equals((getProfileExts_args)that);
      return false;
    }

    public boolean equals(getProfileExts_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_profileExt = true && this.isSetProfileExt();
      boolean that_present_profileExt = true && that.isSetProfileExt();
      if (this_present_profileExt || that_present_profileExt) {
        if (!(this_present_profileExt && that_present_profileExt))
          return false;
        if (!this.profileExt.equals(that.profileExt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_profileExt = true && (isSetProfileExt());
      list.add(present_profileExt);
      if (present_profileExt)
        list.add(profileExt);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileExts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProfileExt()).compareTo(other.isSetProfileExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileExt, other.profileExt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileExts_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("profileExt:");
      if (this.profileExt == null) {
        sb.append("null");
      } else {
        sb.append(this.profileExt);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (profileExt != null) {
        profileExt.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileExts_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileExts_argsStandardScheme getScheme() {
        return new getProfileExts_argsStandardScheme();
      }
    }

    private static class getProfileExts_argsStandardScheme extends StandardScheme<getProfileExts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileExts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROFILE_EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                struct.profileExt.read(iprot);
                struct.setProfileExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileExts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.profileExt != null) {
          oprot.writeFieldBegin(PROFILE_EXT_FIELD_DESC);
          struct.profileExt.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileExts_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileExts_argsTupleScheme getScheme() {
        return new getProfileExts_argsTupleScheme();
      }
    }

    private static class getProfileExts_argsTupleScheme extends TupleScheme<getProfileExts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileExts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetProfileExt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetProfileExt()) {
          struct.profileExt.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileExts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
          struct.profileExt.read(iprot);
          struct.setProfileExtIsSet(true);
        }
      }
    }

  }

  public static class getProfileExts_result implements org.apache.thrift.TBase<getProfileExts_result, getProfileExts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileExts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileExts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileExts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileExts_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileExts_result.class, metaDataMap);
    }

    public getProfileExts_result() {
    }

    public getProfileExts_result(
      List<com.moseeker.thrift.gen.profile.struct.ProfileExt> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileExts_result(getProfileExts_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.ProfileExt> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.ProfileExt other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.ProfileExt(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProfileExts_result deepCopy() {
      return new getProfileExts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProfileExt> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.ProfileExt elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> getSuccess() {
      return this.success;
    }

    public getProfileExts_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.ProfileExt>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileExts_result)
        return this.equals((getProfileExts_result)that);
      return false;
    }

    public boolean equals(getProfileExts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileExts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileExts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileExts_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileExts_resultStandardScheme getScheme() {
        return new getProfileExts_resultStandardScheme();
      }
    }

    private static class getProfileExts_resultStandardScheme extends StandardScheme<getProfileExts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileExts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(_list160.size);
                  com.moseeker.thrift.gen.profile.struct.ProfileExt _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileExts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProfileExt _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileExts_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileExts_resultTupleScheme getScheme() {
        return new getProfileExts_resultTupleScheme();
      }
    }

    private static class getProfileExts_resultTupleScheme extends TupleScheme<getProfileExts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileExts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.ProfileExt _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileExts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(_list165.size);
            com.moseeker.thrift.gen.profile.struct.ProfileExt _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProfileExtPagination_args implements org.apache.thrift.TBase<getProfileExtPagination_args, getProfileExtPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileExtPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileExtPagination_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROFILE_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileExt", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileExtPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileExtPagination_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      PROFILE_EXT((short)2, "profileExt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // PROFILE_EXT
            return PROFILE_EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.PROFILE_EXT, new org.apache.thrift.meta_data.FieldMetaData("profileExt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileExtPagination_args.class, metaDataMap);
    }

    public getProfileExtPagination_args() {
    }

    public getProfileExtPagination_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt)
    {
      this();
      this.query = query;
      this.profileExt = profileExt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileExtPagination_args(getProfileExtPagination_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetProfileExt()) {
        this.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt(other.profileExt);
      }
    }

    public getProfileExtPagination_args deepCopy() {
      return new getProfileExtPagination_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.profileExt = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getProfileExtPagination_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExt getProfileExt() {
      return this.profileExt;
    }

    public getProfileExtPagination_args setProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) {
      this.profileExt = profileExt;
      return this;
    }

    public void unsetProfileExt() {
      this.profileExt = null;
    }

    /** Returns true if field profileExt is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileExt() {
      return this.profileExt != null;
    }

    public void setProfileExtIsSet(boolean value) {
      if (!value) {
        this.profileExt = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case PROFILE_EXT:
        if (value == null) {
          unsetProfileExt();
        } else {
          setProfileExt((com.moseeker.thrift.gen.profile.struct.ProfileExt)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case PROFILE_EXT:
        return getProfileExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case PROFILE_EXT:
        return isSetProfileExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileExtPagination_args)
        return this.equals((getProfileExtPagination_args)that);
      return false;
    }

    public boolean equals(getProfileExtPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_profileExt = true && this.isSetProfileExt();
      boolean that_present_profileExt = true && that.isSetProfileExt();
      if (this_present_profileExt || that_present_profileExt) {
        if (!(this_present_profileExt && that_present_profileExt))
          return false;
        if (!this.profileExt.equals(that.profileExt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_profileExt = true && (isSetProfileExt());
      list.add(present_profileExt);
      if (present_profileExt)
        list.add(profileExt);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileExtPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProfileExt()).compareTo(other.isSetProfileExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileExt, other.profileExt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileExtPagination_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("profileExt:");
      if (this.profileExt == null) {
        sb.append("null");
      } else {
        sb.append(this.profileExt);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (profileExt != null) {
        profileExt.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileExtPagination_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileExtPagination_argsStandardScheme getScheme() {
        return new getProfileExtPagination_argsStandardScheme();
      }
    }

    private static class getProfileExtPagination_argsStandardScheme extends StandardScheme<getProfileExtPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileExtPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROFILE_EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                struct.profileExt.read(iprot);
                struct.setProfileExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileExtPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.profileExt != null) {
          oprot.writeFieldBegin(PROFILE_EXT_FIELD_DESC);
          struct.profileExt.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileExtPagination_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileExtPagination_argsTupleScheme getScheme() {
        return new getProfileExtPagination_argsTupleScheme();
      }
    }

    private static class getProfileExtPagination_argsTupleScheme extends TupleScheme<getProfileExtPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileExtPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetProfileExt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetProfileExt()) {
          struct.profileExt.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileExtPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
          struct.profileExt.read(iprot);
          struct.setProfileExtIsSet(true);
        }
      }
    }

  }

  public static class getProfileExtPagination_result implements org.apache.thrift.TBase<getProfileExtPagination_result, getProfileExtPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileExtPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileExtPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileExtPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileExtPagination_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExtPagination success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExtPagination.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileExtPagination_result.class, metaDataMap);
    }

    public getProfileExtPagination_result() {
    }

    public getProfileExtPagination_result(
      com.moseeker.thrift.gen.profile.struct.ProfileExtPagination success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileExtPagination_result(getProfileExtPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProfileExtPagination(other.success);
      }
    }

    public getProfileExtPagination_result deepCopy() {
      return new getProfileExtPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExtPagination getSuccess() {
      return this.success;
    }

    public getProfileExtPagination_result setSuccess(com.moseeker.thrift.gen.profile.struct.ProfileExtPagination success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProfileExtPagination)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileExtPagination_result)
        return this.equals((getProfileExtPagination_result)that);
      return false;
    }

    public boolean equals(getProfileExtPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileExtPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileExtPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileExtPagination_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileExtPagination_resultStandardScheme getScheme() {
        return new getProfileExtPagination_resultStandardScheme();
      }
    }

    private static class getProfileExtPagination_resultStandardScheme extends StandardScheme<getProfileExtPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileExtPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileExtPagination();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileExtPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileExtPagination_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileExtPagination_resultTupleScheme getScheme() {
        return new getProfileExtPagination_resultTupleScheme();
      }
    }

    private static class getProfileExtPagination_resultTupleScheme extends TupleScheme<getProfileExtPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileExtPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileExtPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileExtPagination();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postProfileExts_args implements org.apache.thrift.TBase<postProfileExts_args, postProfileExts_args._Fields>, java.io.Serializable, Cloneable, Comparable<postProfileExts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProfileExts_args");

    private static final org.apache.thrift.protocol.TField PROFILE_EXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileExts", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProfileExts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProfileExts_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_EXTS((short)1, "profileExts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_EXTS
            return PROFILE_EXTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_EXTS, new org.apache.thrift.meta_data.FieldMetaData("profileExts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProfileExts_args.class, metaDataMap);
    }

    public postProfileExts_args() {
    }

    public postProfileExts_args(
      List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts)
    {
      this();
      this.profileExts = profileExts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProfileExts_args(postProfileExts_args other) {
      if (other.isSetProfileExts()) {
        List<com.moseeker.thrift.gen.profile.struct.ProfileExt> __this__profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(other.profileExts.size());
        for (com.moseeker.thrift.gen.profile.struct.ProfileExt other_element : other.profileExts) {
          __this__profileExts.add(new com.moseeker.thrift.gen.profile.struct.ProfileExt(other_element));
        }
        this.profileExts = __this__profileExts;
      }
    }

    public postProfileExts_args deepCopy() {
      return new postProfileExts_args(this);
    }

    @Override
    public void clear() {
      this.profileExts = null;
    }

    public int getProfileExtsSize() {
      return (this.profileExts == null) ? 0 : this.profileExts.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProfileExt> getProfileExtsIterator() {
      return (this.profileExts == null) ? null : this.profileExts.iterator();
    }

    public void addToProfileExts(com.moseeker.thrift.gen.profile.struct.ProfileExt elem) {
      if (this.profileExts == null) {
        this.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>();
      }
      this.profileExts.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> getProfileExts() {
      return this.profileExts;
    }

    public postProfileExts_args setProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) {
      this.profileExts = profileExts;
      return this;
    }

    public void unsetProfileExts() {
      this.profileExts = null;
    }

    /** Returns true if field profileExts is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileExts() {
      return this.profileExts != null;
    }

    public void setProfileExtsIsSet(boolean value) {
      if (!value) {
        this.profileExts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_EXTS:
        if (value == null) {
          unsetProfileExts();
        } else {
          setProfileExts((List<com.moseeker.thrift.gen.profile.struct.ProfileExt>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_EXTS:
        return getProfileExts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_EXTS:
        return isSetProfileExts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProfileExts_args)
        return this.equals((postProfileExts_args)that);
      return false;
    }

    public boolean equals(postProfileExts_args that) {
      if (that == null)
        return false;

      boolean this_present_profileExts = true && this.isSetProfileExts();
      boolean that_present_profileExts = true && that.isSetProfileExts();
      if (this_present_profileExts || that_present_profileExts) {
        if (!(this_present_profileExts && that_present_profileExts))
          return false;
        if (!this.profileExts.equals(that.profileExts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileExts = true && (isSetProfileExts());
      list.add(present_profileExts);
      if (present_profileExts)
        list.add(profileExts);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProfileExts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileExts()).compareTo(other.isSetProfileExts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileExts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileExts, other.profileExts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProfileExts_args(");
      boolean first = true;

      sb.append("profileExts:");
      if (this.profileExts == null) {
        sb.append("null");
      } else {
        sb.append(this.profileExts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProfileExts_argsStandardSchemeFactory implements SchemeFactory {
      public postProfileExts_argsStandardScheme getScheme() {
        return new postProfileExts_argsStandardScheme();
      }
    }

    private static class postProfileExts_argsStandardScheme extends StandardScheme<postProfileExts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProfileExts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_EXTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(_list168.size);
                  com.moseeker.thrift.gen.profile.struct.ProfileExt _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                    _elem169.read(iprot);
                    struct.profileExts.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileExtsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProfileExts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileExts != null) {
          oprot.writeFieldBegin(PROFILE_EXTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileExts.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProfileExt _iter171 : struct.profileExts)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProfileExts_argsTupleSchemeFactory implements SchemeFactory {
      public postProfileExts_argsTupleScheme getScheme() {
        return new postProfileExts_argsTupleScheme();
      }
    }

    private static class postProfileExts_argsTupleScheme extends TupleScheme<postProfileExts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProfileExts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileExts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileExts()) {
          {
            oprot.writeI32(struct.profileExts.size());
            for (com.moseeker.thrift.gen.profile.struct.ProfileExt _iter172 : struct.profileExts)
            {
              _iter172.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProfileExts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(_list173.size);
            com.moseeker.thrift.gen.profile.struct.ProfileExt _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
              _elem174.read(iprot);
              struct.profileExts.add(_elem174);
            }
          }
          struct.setProfileExtsIsSet(true);
        }
      }
    }

  }

  public static class postProfileExts_result implements org.apache.thrift.TBase<postProfileExts_result, postProfileExts_result._Fields>, java.io.Serializable, Cloneable, Comparable<postProfileExts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProfileExts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProfileExts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProfileExts_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProfileExts_result.class, metaDataMap);
    }

    public postProfileExts_result() {
    }

    public postProfileExts_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProfileExts_result(postProfileExts_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postProfileExts_result deepCopy() {
      return new postProfileExts_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postProfileExts_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProfileExts_result)
        return this.equals((postProfileExts_result)that);
      return false;
    }

    public boolean equals(postProfileExts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProfileExts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProfileExts_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProfileExts_resultStandardSchemeFactory implements SchemeFactory {
      public postProfileExts_resultStandardScheme getScheme() {
        return new postProfileExts_resultStandardScheme();
      }
    }

    private static class postProfileExts_resultStandardScheme extends StandardScheme<postProfileExts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProfileExts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProfileExts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProfileExts_resultTupleSchemeFactory implements SchemeFactory {
      public postProfileExts_resultTupleScheme getScheme() {
        return new postProfileExts_resultTupleScheme();
      }
    }

    private static class postProfileExts_resultTupleScheme extends TupleScheme<postProfileExts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProfileExts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProfileExts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putProfileExts_args implements org.apache.thrift.TBase<putProfileExts_args, putProfileExts_args._Fields>, java.io.Serializable, Cloneable, Comparable<putProfileExts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProfileExts_args");

    private static final org.apache.thrift.protocol.TField PROFILE_EXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileExts", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProfileExts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProfileExts_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_EXTS((short)1, "profileExts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_EXTS
            return PROFILE_EXTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_EXTS, new org.apache.thrift.meta_data.FieldMetaData("profileExts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProfileExts_args.class, metaDataMap);
    }

    public putProfileExts_args() {
    }

    public putProfileExts_args(
      List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts)
    {
      this();
      this.profileExts = profileExts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProfileExts_args(putProfileExts_args other) {
      if (other.isSetProfileExts()) {
        List<com.moseeker.thrift.gen.profile.struct.ProfileExt> __this__profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(other.profileExts.size());
        for (com.moseeker.thrift.gen.profile.struct.ProfileExt other_element : other.profileExts) {
          __this__profileExts.add(new com.moseeker.thrift.gen.profile.struct.ProfileExt(other_element));
        }
        this.profileExts = __this__profileExts;
      }
    }

    public putProfileExts_args deepCopy() {
      return new putProfileExts_args(this);
    }

    @Override
    public void clear() {
      this.profileExts = null;
    }

    public int getProfileExtsSize() {
      return (this.profileExts == null) ? 0 : this.profileExts.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProfileExt> getProfileExtsIterator() {
      return (this.profileExts == null) ? null : this.profileExts.iterator();
    }

    public void addToProfileExts(com.moseeker.thrift.gen.profile.struct.ProfileExt elem) {
      if (this.profileExts == null) {
        this.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>();
      }
      this.profileExts.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> getProfileExts() {
      return this.profileExts;
    }

    public putProfileExts_args setProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) {
      this.profileExts = profileExts;
      return this;
    }

    public void unsetProfileExts() {
      this.profileExts = null;
    }

    /** Returns true if field profileExts is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileExts() {
      return this.profileExts != null;
    }

    public void setProfileExtsIsSet(boolean value) {
      if (!value) {
        this.profileExts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_EXTS:
        if (value == null) {
          unsetProfileExts();
        } else {
          setProfileExts((List<com.moseeker.thrift.gen.profile.struct.ProfileExt>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_EXTS:
        return getProfileExts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_EXTS:
        return isSetProfileExts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProfileExts_args)
        return this.equals((putProfileExts_args)that);
      return false;
    }

    public boolean equals(putProfileExts_args that) {
      if (that == null)
        return false;

      boolean this_present_profileExts = true && this.isSetProfileExts();
      boolean that_present_profileExts = true && that.isSetProfileExts();
      if (this_present_profileExts || that_present_profileExts) {
        if (!(this_present_profileExts && that_present_profileExts))
          return false;
        if (!this.profileExts.equals(that.profileExts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileExts = true && (isSetProfileExts());
      list.add(present_profileExts);
      if (present_profileExts)
        list.add(profileExts);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProfileExts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileExts()).compareTo(other.isSetProfileExts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileExts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileExts, other.profileExts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProfileExts_args(");
      boolean first = true;

      sb.append("profileExts:");
      if (this.profileExts == null) {
        sb.append("null");
      } else {
        sb.append(this.profileExts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProfileExts_argsStandardSchemeFactory implements SchemeFactory {
      public putProfileExts_argsStandardScheme getScheme() {
        return new putProfileExts_argsStandardScheme();
      }
    }

    private static class putProfileExts_argsStandardScheme extends StandardScheme<putProfileExts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProfileExts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_EXTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(_list176.size);
                  com.moseeker.thrift.gen.profile.struct.ProfileExt _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                    _elem177.read(iprot);
                    struct.profileExts.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileExtsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProfileExts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileExts != null) {
          oprot.writeFieldBegin(PROFILE_EXTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileExts.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProfileExt _iter179 : struct.profileExts)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProfileExts_argsTupleSchemeFactory implements SchemeFactory {
      public putProfileExts_argsTupleScheme getScheme() {
        return new putProfileExts_argsTupleScheme();
      }
    }

    private static class putProfileExts_argsTupleScheme extends TupleScheme<putProfileExts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProfileExts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileExts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileExts()) {
          {
            oprot.writeI32(struct.profileExts.size());
            for (com.moseeker.thrift.gen.profile.struct.ProfileExt _iter180 : struct.profileExts)
            {
              _iter180.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProfileExts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(_list181.size);
            com.moseeker.thrift.gen.profile.struct.ProfileExt _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
              _elem182.read(iprot);
              struct.profileExts.add(_elem182);
            }
          }
          struct.setProfileExtsIsSet(true);
        }
      }
    }

  }

  public static class putProfileExts_result implements org.apache.thrift.TBase<putProfileExts_result, putProfileExts_result._Fields>, java.io.Serializable, Cloneable, Comparable<putProfileExts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProfileExts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProfileExts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProfileExts_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProfileExts_result.class, metaDataMap);
    }

    public putProfileExts_result() {
    }

    public putProfileExts_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProfileExts_result(putProfileExts_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putProfileExts_result deepCopy() {
      return new putProfileExts_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putProfileExts_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProfileExts_result)
        return this.equals((putProfileExts_result)that);
      return false;
    }

    public boolean equals(putProfileExts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProfileExts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProfileExts_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProfileExts_resultStandardSchemeFactory implements SchemeFactory {
      public putProfileExts_resultStandardScheme getScheme() {
        return new putProfileExts_resultStandardScheme();
      }
    }

    private static class putProfileExts_resultStandardScheme extends StandardScheme<putProfileExts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProfileExts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProfileExts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProfileExts_resultTupleSchemeFactory implements SchemeFactory {
      public putProfileExts_resultTupleScheme getScheme() {
        return new putProfileExts_resultTupleScheme();
      }
    }

    private static class putProfileExts_resultTupleScheme extends TupleScheme<putProfileExts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProfileExts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProfileExts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delProfileExts_args implements org.apache.thrift.TBase<delProfileExts_args, delProfileExts_args._Fields>, java.io.Serializable, Cloneable, Comparable<delProfileExts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProfileExts_args");

    private static final org.apache.thrift.protocol.TField PROFILE_EXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileExts", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProfileExts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProfileExts_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_EXTS((short)1, "profileExts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_EXTS
            return PROFILE_EXTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_EXTS, new org.apache.thrift.meta_data.FieldMetaData("profileExts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProfileExts_args.class, metaDataMap);
    }

    public delProfileExts_args() {
    }

    public delProfileExts_args(
      List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts)
    {
      this();
      this.profileExts = profileExts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProfileExts_args(delProfileExts_args other) {
      if (other.isSetProfileExts()) {
        List<com.moseeker.thrift.gen.profile.struct.ProfileExt> __this__profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(other.profileExts.size());
        for (com.moseeker.thrift.gen.profile.struct.ProfileExt other_element : other.profileExts) {
          __this__profileExts.add(new com.moseeker.thrift.gen.profile.struct.ProfileExt(other_element));
        }
        this.profileExts = __this__profileExts;
      }
    }

    public delProfileExts_args deepCopy() {
      return new delProfileExts_args(this);
    }

    @Override
    public void clear() {
      this.profileExts = null;
    }

    public int getProfileExtsSize() {
      return (this.profileExts == null) ? 0 : this.profileExts.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProfileExt> getProfileExtsIterator() {
      return (this.profileExts == null) ? null : this.profileExts.iterator();
    }

    public void addToProfileExts(com.moseeker.thrift.gen.profile.struct.ProfileExt elem) {
      if (this.profileExts == null) {
        this.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>();
      }
      this.profileExts.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileExt> getProfileExts() {
      return this.profileExts;
    }

    public delProfileExts_args setProfileExts(List<com.moseeker.thrift.gen.profile.struct.ProfileExt> profileExts) {
      this.profileExts = profileExts;
      return this;
    }

    public void unsetProfileExts() {
      this.profileExts = null;
    }

    /** Returns true if field profileExts is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileExts() {
      return this.profileExts != null;
    }

    public void setProfileExtsIsSet(boolean value) {
      if (!value) {
        this.profileExts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_EXTS:
        if (value == null) {
          unsetProfileExts();
        } else {
          setProfileExts((List<com.moseeker.thrift.gen.profile.struct.ProfileExt>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_EXTS:
        return getProfileExts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_EXTS:
        return isSetProfileExts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProfileExts_args)
        return this.equals((delProfileExts_args)that);
      return false;
    }

    public boolean equals(delProfileExts_args that) {
      if (that == null)
        return false;

      boolean this_present_profileExts = true && this.isSetProfileExts();
      boolean that_present_profileExts = true && that.isSetProfileExts();
      if (this_present_profileExts || that_present_profileExts) {
        if (!(this_present_profileExts && that_present_profileExts))
          return false;
        if (!this.profileExts.equals(that.profileExts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileExts = true && (isSetProfileExts());
      list.add(present_profileExts);
      if (present_profileExts)
        list.add(profileExts);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProfileExts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileExts()).compareTo(other.isSetProfileExts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileExts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileExts, other.profileExts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProfileExts_args(");
      boolean first = true;

      sb.append("profileExts:");
      if (this.profileExts == null) {
        sb.append("null");
      } else {
        sb.append(this.profileExts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProfileExts_argsStandardSchemeFactory implements SchemeFactory {
      public delProfileExts_argsStandardScheme getScheme() {
        return new delProfileExts_argsStandardScheme();
      }
    }

    private static class delProfileExts_argsStandardScheme extends StandardScheme<delProfileExts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProfileExts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_EXTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(_list184.size);
                  com.moseeker.thrift.gen.profile.struct.ProfileExt _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                    _elem185.read(iprot);
                    struct.profileExts.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileExtsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProfileExts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileExts != null) {
          oprot.writeFieldBegin(PROFILE_EXTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileExts.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProfileExt _iter187 : struct.profileExts)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProfileExts_argsTupleSchemeFactory implements SchemeFactory {
      public delProfileExts_argsTupleScheme getScheme() {
        return new delProfileExts_argsTupleScheme();
      }
    }

    private static class delProfileExts_argsTupleScheme extends TupleScheme<delProfileExts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProfileExts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileExts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileExts()) {
          {
            oprot.writeI32(struct.profileExts.size());
            for (com.moseeker.thrift.gen.profile.struct.ProfileExt _iter188 : struct.profileExts)
            {
              _iter188.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProfileExts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profileExts = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileExt>(_list189.size);
            com.moseeker.thrift.gen.profile.struct.ProfileExt _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
              _elem190.read(iprot);
              struct.profileExts.add(_elem190);
            }
          }
          struct.setProfileExtsIsSet(true);
        }
      }
    }

  }

  public static class delProfileExts_result implements org.apache.thrift.TBase<delProfileExts_result, delProfileExts_result._Fields>, java.io.Serializable, Cloneable, Comparable<delProfileExts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProfileExts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProfileExts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProfileExts_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProfileExts_result.class, metaDataMap);
    }

    public delProfileExts_result() {
    }

    public delProfileExts_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProfileExts_result(delProfileExts_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delProfileExts_result deepCopy() {
      return new delProfileExts_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delProfileExts_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProfileExts_result)
        return this.equals((delProfileExts_result)that);
      return false;
    }

    public boolean equals(delProfileExts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProfileExts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProfileExts_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProfileExts_resultStandardSchemeFactory implements SchemeFactory {
      public delProfileExts_resultStandardScheme getScheme() {
        return new delProfileExts_resultStandardScheme();
      }
    }

    private static class delProfileExts_resultStandardScheme extends StandardScheme<delProfileExts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProfileExts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProfileExts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProfileExts_resultTupleSchemeFactory implements SchemeFactory {
      public delProfileExts_resultTupleScheme getScheme() {
        return new delProfileExts_resultTupleScheme();
      }
    }

    private static class delProfileExts_resultTupleScheme extends TupleScheme<delProfileExts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProfileExts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProfileExts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postProfileExt_args implements org.apache.thrift.TBase<postProfileExt_args, postProfileExt_args._Fields>, java.io.Serializable, Cloneable, Comparable<postProfileExt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProfileExt_args");

    private static final org.apache.thrift.protocol.TField PROFILE_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileExt", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProfileExt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProfileExt_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_EXT((short)1, "profileExt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_EXT
            return PROFILE_EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_EXT, new org.apache.thrift.meta_data.FieldMetaData("profileExt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProfileExt_args.class, metaDataMap);
    }

    public postProfileExt_args() {
    }

    public postProfileExt_args(
      com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt)
    {
      this();
      this.profileExt = profileExt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProfileExt_args(postProfileExt_args other) {
      if (other.isSetProfileExt()) {
        this.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt(other.profileExt);
      }
    }

    public postProfileExt_args deepCopy() {
      return new postProfileExt_args(this);
    }

    @Override
    public void clear() {
      this.profileExt = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExt getProfileExt() {
      return this.profileExt;
    }

    public postProfileExt_args setProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) {
      this.profileExt = profileExt;
      return this;
    }

    public void unsetProfileExt() {
      this.profileExt = null;
    }

    /** Returns true if field profileExt is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileExt() {
      return this.profileExt != null;
    }

    public void setProfileExtIsSet(boolean value) {
      if (!value) {
        this.profileExt = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_EXT:
        if (value == null) {
          unsetProfileExt();
        } else {
          setProfileExt((com.moseeker.thrift.gen.profile.struct.ProfileExt)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_EXT:
        return getProfileExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_EXT:
        return isSetProfileExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProfileExt_args)
        return this.equals((postProfileExt_args)that);
      return false;
    }

    public boolean equals(postProfileExt_args that) {
      if (that == null)
        return false;

      boolean this_present_profileExt = true && this.isSetProfileExt();
      boolean that_present_profileExt = true && that.isSetProfileExt();
      if (this_present_profileExt || that_present_profileExt) {
        if (!(this_present_profileExt && that_present_profileExt))
          return false;
        if (!this.profileExt.equals(that.profileExt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileExt = true && (isSetProfileExt());
      list.add(present_profileExt);
      if (present_profileExt)
        list.add(profileExt);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProfileExt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileExt()).compareTo(other.isSetProfileExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileExt, other.profileExt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProfileExt_args(");
      boolean first = true;

      sb.append("profileExt:");
      if (this.profileExt == null) {
        sb.append("null");
      } else {
        sb.append(this.profileExt);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileExt != null) {
        profileExt.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProfileExt_argsStandardSchemeFactory implements SchemeFactory {
      public postProfileExt_argsStandardScheme getScheme() {
        return new postProfileExt_argsStandardScheme();
      }
    }

    private static class postProfileExt_argsStandardScheme extends StandardScheme<postProfileExt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProfileExt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                struct.profileExt.read(iprot);
                struct.setProfileExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProfileExt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileExt != null) {
          oprot.writeFieldBegin(PROFILE_EXT_FIELD_DESC);
          struct.profileExt.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProfileExt_argsTupleSchemeFactory implements SchemeFactory {
      public postProfileExt_argsTupleScheme getScheme() {
        return new postProfileExt_argsTupleScheme();
      }
    }

    private static class postProfileExt_argsTupleScheme extends TupleScheme<postProfileExt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProfileExt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileExt()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileExt()) {
          struct.profileExt.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProfileExt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
          struct.profileExt.read(iprot);
          struct.setProfileExtIsSet(true);
        }
      }
    }

  }

  public static class postProfileExt_result implements org.apache.thrift.TBase<postProfileExt_result, postProfileExt_result._Fields>, java.io.Serializable, Cloneable, Comparable<postProfileExt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProfileExt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProfileExt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProfileExt_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProfileExt_result.class, metaDataMap);
    }

    public postProfileExt_result() {
    }

    public postProfileExt_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProfileExt_result(postProfileExt_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postProfileExt_result deepCopy() {
      return new postProfileExt_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postProfileExt_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProfileExt_result)
        return this.equals((postProfileExt_result)that);
      return false;
    }

    public boolean equals(postProfileExt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProfileExt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProfileExt_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProfileExt_resultStandardSchemeFactory implements SchemeFactory {
      public postProfileExt_resultStandardScheme getScheme() {
        return new postProfileExt_resultStandardScheme();
      }
    }

    private static class postProfileExt_resultStandardScheme extends StandardScheme<postProfileExt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProfileExt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProfileExt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProfileExt_resultTupleSchemeFactory implements SchemeFactory {
      public postProfileExt_resultTupleScheme getScheme() {
        return new postProfileExt_resultTupleScheme();
      }
    }

    private static class postProfileExt_resultTupleScheme extends TupleScheme<postProfileExt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProfileExt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProfileExt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putProfileExt_args implements org.apache.thrift.TBase<putProfileExt_args, putProfileExt_args._Fields>, java.io.Serializable, Cloneable, Comparable<putProfileExt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProfileExt_args");

    private static final org.apache.thrift.protocol.TField PROFILE_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileExt", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProfileExt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProfileExt_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_EXT((short)1, "profileExt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_EXT
            return PROFILE_EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_EXT, new org.apache.thrift.meta_data.FieldMetaData("profileExt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProfileExt_args.class, metaDataMap);
    }

    public putProfileExt_args() {
    }

    public putProfileExt_args(
      com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt)
    {
      this();
      this.profileExt = profileExt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProfileExt_args(putProfileExt_args other) {
      if (other.isSetProfileExt()) {
        this.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt(other.profileExt);
      }
    }

    public putProfileExt_args deepCopy() {
      return new putProfileExt_args(this);
    }

    @Override
    public void clear() {
      this.profileExt = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExt getProfileExt() {
      return this.profileExt;
    }

    public putProfileExt_args setProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) {
      this.profileExt = profileExt;
      return this;
    }

    public void unsetProfileExt() {
      this.profileExt = null;
    }

    /** Returns true if field profileExt is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileExt() {
      return this.profileExt != null;
    }

    public void setProfileExtIsSet(boolean value) {
      if (!value) {
        this.profileExt = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_EXT:
        if (value == null) {
          unsetProfileExt();
        } else {
          setProfileExt((com.moseeker.thrift.gen.profile.struct.ProfileExt)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_EXT:
        return getProfileExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_EXT:
        return isSetProfileExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProfileExt_args)
        return this.equals((putProfileExt_args)that);
      return false;
    }

    public boolean equals(putProfileExt_args that) {
      if (that == null)
        return false;

      boolean this_present_profileExt = true && this.isSetProfileExt();
      boolean that_present_profileExt = true && that.isSetProfileExt();
      if (this_present_profileExt || that_present_profileExt) {
        if (!(this_present_profileExt && that_present_profileExt))
          return false;
        if (!this.profileExt.equals(that.profileExt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileExt = true && (isSetProfileExt());
      list.add(present_profileExt);
      if (present_profileExt)
        list.add(profileExt);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProfileExt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileExt()).compareTo(other.isSetProfileExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileExt, other.profileExt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProfileExt_args(");
      boolean first = true;

      sb.append("profileExt:");
      if (this.profileExt == null) {
        sb.append("null");
      } else {
        sb.append(this.profileExt);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileExt != null) {
        profileExt.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProfileExt_argsStandardSchemeFactory implements SchemeFactory {
      public putProfileExt_argsStandardScheme getScheme() {
        return new putProfileExt_argsStandardScheme();
      }
    }

    private static class putProfileExt_argsStandardScheme extends StandardScheme<putProfileExt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProfileExt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                struct.profileExt.read(iprot);
                struct.setProfileExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProfileExt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileExt != null) {
          oprot.writeFieldBegin(PROFILE_EXT_FIELD_DESC);
          struct.profileExt.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProfileExt_argsTupleSchemeFactory implements SchemeFactory {
      public putProfileExt_argsTupleScheme getScheme() {
        return new putProfileExt_argsTupleScheme();
      }
    }

    private static class putProfileExt_argsTupleScheme extends TupleScheme<putProfileExt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProfileExt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileExt()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileExt()) {
          struct.profileExt.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProfileExt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
          struct.profileExt.read(iprot);
          struct.setProfileExtIsSet(true);
        }
      }
    }

  }

  public static class putProfileExt_result implements org.apache.thrift.TBase<putProfileExt_result, putProfileExt_result._Fields>, java.io.Serializable, Cloneable, Comparable<putProfileExt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProfileExt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProfileExt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProfileExt_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProfileExt_result.class, metaDataMap);
    }

    public putProfileExt_result() {
    }

    public putProfileExt_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProfileExt_result(putProfileExt_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putProfileExt_result deepCopy() {
      return new putProfileExt_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putProfileExt_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProfileExt_result)
        return this.equals((putProfileExt_result)that);
      return false;
    }

    public boolean equals(putProfileExt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProfileExt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProfileExt_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProfileExt_resultStandardSchemeFactory implements SchemeFactory {
      public putProfileExt_resultStandardScheme getScheme() {
        return new putProfileExt_resultStandardScheme();
      }
    }

    private static class putProfileExt_resultStandardScheme extends StandardScheme<putProfileExt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProfileExt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProfileExt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProfileExt_resultTupleSchemeFactory implements SchemeFactory {
      public putProfileExt_resultTupleScheme getScheme() {
        return new putProfileExt_resultTupleScheme();
      }
    }

    private static class putProfileExt_resultTupleScheme extends TupleScheme<putProfileExt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProfileExt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProfileExt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delProfileExt_args implements org.apache.thrift.TBase<delProfileExt_args, delProfileExt_args._Fields>, java.io.Serializable, Cloneable, Comparable<delProfileExt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProfileExt_args");

    private static final org.apache.thrift.protocol.TField PROFILE_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileExt", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProfileExt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProfileExt_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_EXT((short)1, "profileExt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_EXT
            return PROFILE_EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_EXT, new org.apache.thrift.meta_data.FieldMetaData("profileExt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileExt.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProfileExt_args.class, metaDataMap);
    }

    public delProfileExt_args() {
    }

    public delProfileExt_args(
      com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt)
    {
      this();
      this.profileExt = profileExt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProfileExt_args(delProfileExt_args other) {
      if (other.isSetProfileExt()) {
        this.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt(other.profileExt);
      }
    }

    public delProfileExt_args deepCopy() {
      return new delProfileExt_args(this);
    }

    @Override
    public void clear() {
      this.profileExt = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileExt getProfileExt() {
      return this.profileExt;
    }

    public delProfileExt_args setProfileExt(com.moseeker.thrift.gen.profile.struct.ProfileExt profileExt) {
      this.profileExt = profileExt;
      return this;
    }

    public void unsetProfileExt() {
      this.profileExt = null;
    }

    /** Returns true if field profileExt is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileExt() {
      return this.profileExt != null;
    }

    public void setProfileExtIsSet(boolean value) {
      if (!value) {
        this.profileExt = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_EXT:
        if (value == null) {
          unsetProfileExt();
        } else {
          setProfileExt((com.moseeker.thrift.gen.profile.struct.ProfileExt)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_EXT:
        return getProfileExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_EXT:
        return isSetProfileExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProfileExt_args)
        return this.equals((delProfileExt_args)that);
      return false;
    }

    public boolean equals(delProfileExt_args that) {
      if (that == null)
        return false;

      boolean this_present_profileExt = true && this.isSetProfileExt();
      boolean that_present_profileExt = true && that.isSetProfileExt();
      if (this_present_profileExt || that_present_profileExt) {
        if (!(this_present_profileExt && that_present_profileExt))
          return false;
        if (!this.profileExt.equals(that.profileExt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileExt = true && (isSetProfileExt());
      list.add(present_profileExt);
      if (present_profileExt)
        list.add(profileExt);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProfileExt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileExt()).compareTo(other.isSetProfileExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileExt, other.profileExt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProfileExt_args(");
      boolean first = true;

      sb.append("profileExt:");
      if (this.profileExt == null) {
        sb.append("null");
      } else {
        sb.append(this.profileExt);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileExt != null) {
        profileExt.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProfileExt_argsStandardSchemeFactory implements SchemeFactory {
      public delProfileExt_argsStandardScheme getScheme() {
        return new delProfileExt_argsStandardScheme();
      }
    }

    private static class delProfileExt_argsStandardScheme extends StandardScheme<delProfileExt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProfileExt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
                struct.profileExt.read(iprot);
                struct.setProfileExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProfileExt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileExt != null) {
          oprot.writeFieldBegin(PROFILE_EXT_FIELD_DESC);
          struct.profileExt.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProfileExt_argsTupleSchemeFactory implements SchemeFactory {
      public delProfileExt_argsTupleScheme getScheme() {
        return new delProfileExt_argsTupleScheme();
      }
    }

    private static class delProfileExt_argsTupleScheme extends TupleScheme<delProfileExt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProfileExt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileExt()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileExt()) {
          struct.profileExt.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProfileExt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileExt = new com.moseeker.thrift.gen.profile.struct.ProfileExt();
          struct.profileExt.read(iprot);
          struct.setProfileExtIsSet(true);
        }
      }
    }

  }

  public static class delProfileExt_result implements org.apache.thrift.TBase<delProfileExt_result, delProfileExt_result._Fields>, java.io.Serializable, Cloneable, Comparable<delProfileExt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProfileExt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProfileExt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProfileExt_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProfileExt_result.class, metaDataMap);
    }

    public delProfileExt_result() {
    }

    public delProfileExt_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProfileExt_result(delProfileExt_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delProfileExt_result deepCopy() {
      return new delProfileExt_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delProfileExt_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProfileExt_result)
        return this.equals((delProfileExt_result)that);
      return false;
    }

    public boolean equals(delProfileExt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProfileExt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProfileExt_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProfileExt_resultStandardSchemeFactory implements SchemeFactory {
      public delProfileExt_resultStandardScheme getScheme() {
        return new delProfileExt_resultStandardScheme();
      }
    }

    private static class delProfileExt_resultStandardScheme extends StandardScheme<delProfileExt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProfileExt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProfileExt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProfileExt_resultTupleSchemeFactory implements SchemeFactory {
      public delProfileExt_resultTupleScheme getScheme() {
        return new delProfileExt_resultTupleScheme();
      }
    }

    private static class delProfileExt_resultTupleScheme extends TupleScheme<delProfileExt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProfileExt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProfileExt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
