/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-29")
public class RewardServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.Reward> getRewards(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.RewardPagination getRewardPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException;

    public int postRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException;

    public int putRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException;

    public int delRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException;

    public int postReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException;

    public int putReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException;

    public int delReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRewards(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRewardPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postReward(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putReward(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delReward(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> getRewards(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      send_getRewards(query, reward);
      return recv_getRewards();
    }

    public void send_getRewards(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      getRewards_args args = new getRewards_args();
      args.setQuery(query);
      args.setReward(reward);
      sendBase("getRewards", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> recv_getRewards() throws org.apache.thrift.TException
    {
      getRewards_result result = new getRewards_result();
      receiveBase(result, "getRewards");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRewards failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.RewardPagination getRewardPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      send_getRewardPagination(query, reward);
      return recv_getRewardPagination();
    }

    public void send_getRewardPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      getRewardPagination_args args = new getRewardPagination_args();
      args.setQuery(query);
      args.setReward(reward);
      sendBase("getRewardPagination", args);
    }

    public com.moseeker.thrift.gen.profile.struct.RewardPagination recv_getRewardPagination() throws org.apache.thrift.TException
    {
      getRewardPagination_result result = new getRewardPagination_result();
      receiveBase(result, "getRewardPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRewardPagination failed: unknown result");
    }

    public int postRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException
    {
      send_postRewards(rewards);
      return recv_postRewards();
    }

    public void send_postRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException
    {
      postRewards_args args = new postRewards_args();
      args.setRewards(rewards);
      sendBase("postRewards", args);
    }

    public int recv_postRewards() throws org.apache.thrift.TException
    {
      postRewards_result result = new postRewards_result();
      receiveBase(result, "postRewards");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postRewards failed: unknown result");
    }

    public int putRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException
    {
      send_putRewards(rewards);
      return recv_putRewards();
    }

    public void send_putRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException
    {
      putRewards_args args = new putRewards_args();
      args.setRewards(rewards);
      sendBase("putRewards", args);
    }

    public int recv_putRewards() throws org.apache.thrift.TException
    {
      putRewards_result result = new putRewards_result();
      receiveBase(result, "putRewards");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putRewards failed: unknown result");
    }

    public int delRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException
    {
      send_delRewards(rewards);
      return recv_delRewards();
    }

    public void send_delRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) throws org.apache.thrift.TException
    {
      delRewards_args args = new delRewards_args();
      args.setRewards(rewards);
      sendBase("delRewards", args);
    }

    public int recv_delRewards() throws org.apache.thrift.TException
    {
      delRewards_result result = new delRewards_result();
      receiveBase(result, "delRewards");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delRewards failed: unknown result");
    }

    public int postReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      send_postReward(reward);
      return recv_postReward();
    }

    public void send_postReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      postReward_args args = new postReward_args();
      args.setReward(reward);
      sendBase("postReward", args);
    }

    public int recv_postReward() throws org.apache.thrift.TException
    {
      postReward_result result = new postReward_result();
      receiveBase(result, "postReward");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postReward failed: unknown result");
    }

    public int putReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      send_putReward(reward);
      return recv_putReward();
    }

    public void send_putReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      putReward_args args = new putReward_args();
      args.setReward(reward);
      sendBase("putReward", args);
    }

    public int recv_putReward() throws org.apache.thrift.TException
    {
      putReward_result result = new putReward_result();
      receiveBase(result, "putReward");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putReward failed: unknown result");
    }

    public int delReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      send_delReward(reward);
      return recv_delReward();
    }

    public void send_delReward(com.moseeker.thrift.gen.profile.struct.Reward reward) throws org.apache.thrift.TException
    {
      delReward_args args = new delReward_args();
      args.setReward(reward);
      sendBase("delReward", args);
    }

    public int recv_delReward() throws org.apache.thrift.TException
    {
      delReward_result result = new delReward_result();
      receiveBase(result, "delReward");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delReward failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRewards(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRewards_call method_call = new getRewards_call(query, reward, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRewards_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.Reward reward;
      public getRewards_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.reward = reward;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRewards", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRewards_args args = new getRewards_args();
        args.setQuery(query);
        args.setReward(reward);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.Reward> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRewards();
      }
    }

    public void getRewardPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRewardPagination_call method_call = new getRewardPagination_call(query, reward, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRewardPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.Reward reward;
      public getRewardPagination_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.reward = reward;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRewardPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRewardPagination_args args = new getRewardPagination_args();
        args.setQuery(query);
        args.setReward(reward);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.RewardPagination getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRewardPagination();
      }
    }

    public void postRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postRewards_call method_call = new postRewards_call(rewards, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postRewards_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Reward> rewards;
      public postRewards_call(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rewards = rewards;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postRewards", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postRewards_args args = new postRewards_args();
        args.setRewards(rewards);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postRewards();
      }
    }

    public void putRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putRewards_call method_call = new putRewards_call(rewards, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putRewards_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Reward> rewards;
      public putRewards_call(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rewards = rewards;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putRewards", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putRewards_args args = new putRewards_args();
        args.setRewards(rewards);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putRewards();
      }
    }

    public void delRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delRewards_call method_call = new delRewards_call(rewards, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delRewards_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Reward> rewards;
      public delRewards_call(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rewards = rewards;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delRewards", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delRewards_args args = new delRewards_args();
        args.setRewards(rewards);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delRewards();
      }
    }

    public void postReward(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postReward_call method_call = new postReward_call(reward, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postReward_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Reward reward;
      public postReward_call(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reward = reward;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postReward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postReward_args args = new postReward_args();
        args.setReward(reward);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postReward();
      }
    }

    public void putReward(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putReward_call method_call = new putReward_call(reward, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putReward_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Reward reward;
      public putReward_call(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reward = reward;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putReward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putReward_args args = new putReward_args();
        args.setReward(reward);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putReward();
      }
    }

    public void delReward(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delReward_call method_call = new delReward_call(reward, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delReward_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Reward reward;
      public delReward_call(com.moseeker.thrift.gen.profile.struct.Reward reward, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reward = reward;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delReward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delReward_args args = new delReward_args();
        args.setReward(reward);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delReward();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRewards", new getRewards());
      processMap.put("getRewardPagination", new getRewardPagination());
      processMap.put("postRewards", new postRewards());
      processMap.put("putRewards", new putRewards());
      processMap.put("delRewards", new delRewards());
      processMap.put("postReward", new postReward());
      processMap.put("putReward", new putReward());
      processMap.put("delReward", new delReward());
      return processMap;
    }

    public static class getRewards<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRewards_args> {
      public getRewards() {
        super("getRewards");
      }

      public getRewards_args getEmptyArgsInstance() {
        return new getRewards_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRewards_result getResult(I iface, getRewards_args args) throws org.apache.thrift.TException {
        getRewards_result result = new getRewards_result();
        result.success = iface.getRewards(args.query, args.reward);
        return result;
      }
    }

    public static class getRewardPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRewardPagination_args> {
      public getRewardPagination() {
        super("getRewardPagination");
      }

      public getRewardPagination_args getEmptyArgsInstance() {
        return new getRewardPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRewardPagination_result getResult(I iface, getRewardPagination_args args) throws org.apache.thrift.TException {
        getRewardPagination_result result = new getRewardPagination_result();
        result.success = iface.getRewardPagination(args.query, args.reward);
        return result;
      }
    }

    public static class postRewards<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postRewards_args> {
      public postRewards() {
        super("postRewards");
      }

      public postRewards_args getEmptyArgsInstance() {
        return new postRewards_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postRewards_result getResult(I iface, postRewards_args args) throws org.apache.thrift.TException {
        postRewards_result result = new postRewards_result();
        result.success = iface.postRewards(args.rewards);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putRewards<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putRewards_args> {
      public putRewards() {
        super("putRewards");
      }

      public putRewards_args getEmptyArgsInstance() {
        return new putRewards_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putRewards_result getResult(I iface, putRewards_args args) throws org.apache.thrift.TException {
        putRewards_result result = new putRewards_result();
        result.success = iface.putRewards(args.rewards);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delRewards<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delRewards_args> {
      public delRewards() {
        super("delRewards");
      }

      public delRewards_args getEmptyArgsInstance() {
        return new delRewards_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delRewards_result getResult(I iface, delRewards_args args) throws org.apache.thrift.TException {
        delRewards_result result = new delRewards_result();
        result.success = iface.delRewards(args.rewards);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postReward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postReward_args> {
      public postReward() {
        super("postReward");
      }

      public postReward_args getEmptyArgsInstance() {
        return new postReward_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postReward_result getResult(I iface, postReward_args args) throws org.apache.thrift.TException {
        postReward_result result = new postReward_result();
        result.success = iface.postReward(args.reward);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putReward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putReward_args> {
      public putReward() {
        super("putReward");
      }

      public putReward_args getEmptyArgsInstance() {
        return new putReward_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putReward_result getResult(I iface, putReward_args args) throws org.apache.thrift.TException {
        putReward_result result = new putReward_result();
        result.success = iface.putReward(args.reward);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delReward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delReward_args> {
      public delReward() {
        super("delReward");
      }

      public delReward_args getEmptyArgsInstance() {
        return new delReward_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delReward_result getResult(I iface, delReward_args args) throws org.apache.thrift.TException {
        delReward_result result = new delReward_result();
        result.success = iface.delReward(args.reward);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getRewards", new getRewards());
      processMap.put("getRewardPagination", new getRewardPagination());
      processMap.put("postRewards", new postRewards());
      processMap.put("putRewards", new putRewards());
      processMap.put("delRewards", new delRewards());
      processMap.put("postReward", new postReward());
      processMap.put("putReward", new putReward());
      processMap.put("delReward", new delReward());
      return processMap;
    }

    public static class getRewards<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRewards_args, List<com.moseeker.thrift.gen.profile.struct.Reward>> {
      public getRewards() {
        super("getRewards");
      }

      public getRewards_args getEmptyArgsInstance() {
        return new getRewards_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Reward>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Reward>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.Reward> o) {
            getRewards_result result = new getRewards_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRewards_result result = new getRewards_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRewards_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Reward>> resultHandler) throws TException {
        iface.getRewards(args.query, args.reward,resultHandler);
      }
    }

    public static class getRewardPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRewardPagination_args, com.moseeker.thrift.gen.profile.struct.RewardPagination> {
      public getRewardPagination() {
        super("getRewardPagination");
      }

      public getRewardPagination_args getEmptyArgsInstance() {
        return new getRewardPagination_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.RewardPagination> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.RewardPagination>() { 
          public void onComplete(com.moseeker.thrift.gen.profile.struct.RewardPagination o) {
            getRewardPagination_result result = new getRewardPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRewardPagination_result result = new getRewardPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRewardPagination_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.RewardPagination> resultHandler) throws TException {
        iface.getRewardPagination(args.query, args.reward,resultHandler);
      }
    }

    public static class postRewards<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postRewards_args, Integer> {
      public postRewards() {
        super("postRewards");
      }

      public postRewards_args getEmptyArgsInstance() {
        return new postRewards_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postRewards_result result = new postRewards_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postRewards_result result = new postRewards_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postRewards_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postRewards(args.rewards,resultHandler);
      }
    }

    public static class putRewards<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putRewards_args, Integer> {
      public putRewards() {
        super("putRewards");
      }

      public putRewards_args getEmptyArgsInstance() {
        return new putRewards_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putRewards_result result = new putRewards_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putRewards_result result = new putRewards_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putRewards_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putRewards(args.rewards,resultHandler);
      }
    }

    public static class delRewards<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delRewards_args, Integer> {
      public delRewards() {
        super("delRewards");
      }

      public delRewards_args getEmptyArgsInstance() {
        return new delRewards_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delRewards_result result = new delRewards_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delRewards_result result = new delRewards_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delRewards_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delRewards(args.rewards,resultHandler);
      }
    }

    public static class postReward<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postReward_args, Integer> {
      public postReward() {
        super("postReward");
      }

      public postReward_args getEmptyArgsInstance() {
        return new postReward_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postReward_result result = new postReward_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postReward_result result = new postReward_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postReward_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postReward(args.reward,resultHandler);
      }
    }

    public static class putReward<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putReward_args, Integer> {
      public putReward() {
        super("putReward");
      }

      public putReward_args getEmptyArgsInstance() {
        return new putReward_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putReward_result result = new putReward_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putReward_result result = new putReward_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putReward_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putReward(args.reward,resultHandler);
      }
    }

    public static class delReward<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delReward_args, Integer> {
      public delReward() {
        super("delReward");
      }

      public delReward_args getEmptyArgsInstance() {
        return new delReward_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delReward_result result = new delReward_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delReward_result result = new delReward_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delReward_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delReward(args.reward,resultHandler);
      }
    }

  }

  public static class getRewards_args implements org.apache.thrift.TBase<getRewards_args, getRewards_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRewards_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRewards_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("reward", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRewards_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRewards_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.Reward reward; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      REWARD((short)2, "reward");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // REWARD
            return REWARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.REWARD, new org.apache.thrift.meta_data.FieldMetaData("reward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRewards_args.class, metaDataMap);
    }

    public getRewards_args() {
    }

    public getRewards_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.Reward reward)
    {
      this();
      this.query = query;
      this.reward = reward;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRewards_args(getRewards_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetReward()) {
        this.reward = new com.moseeker.thrift.gen.profile.struct.Reward(other.reward);
      }
    }

    public getRewards_args deepCopy() {
      return new getRewards_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.reward = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getRewards_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.Reward getReward() {
      return this.reward;
    }

    public getRewards_args setReward(com.moseeker.thrift.gen.profile.struct.Reward reward) {
      this.reward = reward;
      return this;
    }

    public void unsetReward() {
      this.reward = null;
    }

    /** Returns true if field reward is set (has been assigned a value) and false otherwise */
    public boolean isSetReward() {
      return this.reward != null;
    }

    public void setRewardIsSet(boolean value) {
      if (!value) {
        this.reward = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case REWARD:
        if (value == null) {
          unsetReward();
        } else {
          setReward((com.moseeker.thrift.gen.profile.struct.Reward)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case REWARD:
        return getReward();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case REWARD:
        return isSetReward();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRewards_args)
        return this.equals((getRewards_args)that);
      return false;
    }

    public boolean equals(getRewards_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_reward = true && this.isSetReward();
      boolean that_present_reward = true && that.isSetReward();
      if (this_present_reward || that_present_reward) {
        if (!(this_present_reward && that_present_reward))
          return false;
        if (!this.reward.equals(that.reward))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_reward = true && (isSetReward());
      list.add(present_reward);
      if (present_reward)
        list.add(reward);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRewards_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReward()).compareTo(other.isSetReward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward, other.reward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRewards_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reward:");
      if (this.reward == null) {
        sb.append("null");
      } else {
        sb.append(this.reward);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (reward != null) {
        reward.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRewards_argsStandardSchemeFactory implements SchemeFactory {
      public getRewards_argsStandardScheme getScheme() {
        return new getRewards_argsStandardScheme();
      }
    }

    private static class getRewards_argsStandardScheme extends StandardScheme<getRewards_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRewards_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
                struct.reward.read(iprot);
                struct.setRewardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRewards_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reward != null) {
          oprot.writeFieldBegin(REWARD_FIELD_DESC);
          struct.reward.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRewards_argsTupleSchemeFactory implements SchemeFactory {
      public getRewards_argsTupleScheme getScheme() {
        return new getRewards_argsTupleScheme();
      }
    }

    private static class getRewards_argsTupleScheme extends TupleScheme<getRewards_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRewards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetReward()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetReward()) {
          struct.reward.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRewards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
          struct.reward.read(iprot);
          struct.setRewardIsSet(true);
        }
      }
    }

  }

  public static class getRewards_result implements org.apache.thrift.TBase<getRewards_result, getRewards_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRewards_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRewards_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRewards_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRewards_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRewards_result.class, metaDataMap);
    }

    public getRewards_result() {
    }

    public getRewards_result(
      List<com.moseeker.thrift.gen.profile.struct.Reward> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRewards_result(getRewards_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.Reward> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.Reward other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.Reward(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRewards_result deepCopy() {
      return new getRewards_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Reward> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.Reward elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> getSuccess() {
      return this.success;
    }

    public getRewards_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.Reward> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.Reward>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRewards_result)
        return this.equals((getRewards_result)that);
      return false;
    }

    public boolean equals(getRewards_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRewards_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRewards_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRewards_resultStandardSchemeFactory implements SchemeFactory {
      public getRewards_resultStandardScheme getScheme() {
        return new getRewards_resultStandardScheme();
      }
    }

    private static class getRewards_resultStandardScheme extends StandardScheme<getRewards_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRewards_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list352 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(_list352.size);
                  com.moseeker.thrift.gen.profile.struct.Reward _elem353;
                  for (int _i354 = 0; _i354 < _list352.size; ++_i354)
                  {
                    _elem353 = new com.moseeker.thrift.gen.profile.struct.Reward();
                    _elem353.read(iprot);
                    struct.success.add(_elem353);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRewards_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.Reward _iter355 : struct.success)
            {
              _iter355.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRewards_resultTupleSchemeFactory implements SchemeFactory {
      public getRewards_resultTupleScheme getScheme() {
        return new getRewards_resultTupleScheme();
      }
    }

    private static class getRewards_resultTupleScheme extends TupleScheme<getRewards_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRewards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.Reward _iter356 : struct.success)
            {
              _iter356.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRewards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list357 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(_list357.size);
            com.moseeker.thrift.gen.profile.struct.Reward _elem358;
            for (int _i359 = 0; _i359 < _list357.size; ++_i359)
            {
              _elem358 = new com.moseeker.thrift.gen.profile.struct.Reward();
              _elem358.read(iprot);
              struct.success.add(_elem358);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRewardPagination_args implements org.apache.thrift.TBase<getRewardPagination_args, getRewardPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRewardPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRewardPagination_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("reward", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRewardPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRewardPagination_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.Reward reward; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      REWARD((short)2, "reward");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // REWARD
            return REWARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.REWARD, new org.apache.thrift.meta_data.FieldMetaData("reward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRewardPagination_args.class, metaDataMap);
    }

    public getRewardPagination_args() {
    }

    public getRewardPagination_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.Reward reward)
    {
      this();
      this.query = query;
      this.reward = reward;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRewardPagination_args(getRewardPagination_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetReward()) {
        this.reward = new com.moseeker.thrift.gen.profile.struct.Reward(other.reward);
      }
    }

    public getRewardPagination_args deepCopy() {
      return new getRewardPagination_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.reward = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getRewardPagination_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.Reward getReward() {
      return this.reward;
    }

    public getRewardPagination_args setReward(com.moseeker.thrift.gen.profile.struct.Reward reward) {
      this.reward = reward;
      return this;
    }

    public void unsetReward() {
      this.reward = null;
    }

    /** Returns true if field reward is set (has been assigned a value) and false otherwise */
    public boolean isSetReward() {
      return this.reward != null;
    }

    public void setRewardIsSet(boolean value) {
      if (!value) {
        this.reward = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case REWARD:
        if (value == null) {
          unsetReward();
        } else {
          setReward((com.moseeker.thrift.gen.profile.struct.Reward)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case REWARD:
        return getReward();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case REWARD:
        return isSetReward();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRewardPagination_args)
        return this.equals((getRewardPagination_args)that);
      return false;
    }

    public boolean equals(getRewardPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_reward = true && this.isSetReward();
      boolean that_present_reward = true && that.isSetReward();
      if (this_present_reward || that_present_reward) {
        if (!(this_present_reward && that_present_reward))
          return false;
        if (!this.reward.equals(that.reward))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_reward = true && (isSetReward());
      list.add(present_reward);
      if (present_reward)
        list.add(reward);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRewardPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReward()).compareTo(other.isSetReward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward, other.reward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRewardPagination_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reward:");
      if (this.reward == null) {
        sb.append("null");
      } else {
        sb.append(this.reward);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (reward != null) {
        reward.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRewardPagination_argsStandardSchemeFactory implements SchemeFactory {
      public getRewardPagination_argsStandardScheme getScheme() {
        return new getRewardPagination_argsStandardScheme();
      }
    }

    private static class getRewardPagination_argsStandardScheme extends StandardScheme<getRewardPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRewardPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
                struct.reward.read(iprot);
                struct.setRewardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRewardPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reward != null) {
          oprot.writeFieldBegin(REWARD_FIELD_DESC);
          struct.reward.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRewardPagination_argsTupleSchemeFactory implements SchemeFactory {
      public getRewardPagination_argsTupleScheme getScheme() {
        return new getRewardPagination_argsTupleScheme();
      }
    }

    private static class getRewardPagination_argsTupleScheme extends TupleScheme<getRewardPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRewardPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetReward()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetReward()) {
          struct.reward.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRewardPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
          struct.reward.read(iprot);
          struct.setRewardIsSet(true);
        }
      }
    }

  }

  public static class getRewardPagination_result implements org.apache.thrift.TBase<getRewardPagination_result, getRewardPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRewardPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRewardPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRewardPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRewardPagination_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.RewardPagination success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.RewardPagination.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRewardPagination_result.class, metaDataMap);
    }

    public getRewardPagination_result() {
    }

    public getRewardPagination_result(
      com.moseeker.thrift.gen.profile.struct.RewardPagination success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRewardPagination_result(getRewardPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.RewardPagination(other.success);
      }
    }

    public getRewardPagination_result deepCopy() {
      return new getRewardPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.profile.struct.RewardPagination getSuccess() {
      return this.success;
    }

    public getRewardPagination_result setSuccess(com.moseeker.thrift.gen.profile.struct.RewardPagination success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.RewardPagination)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRewardPagination_result)
        return this.equals((getRewardPagination_result)that);
      return false;
    }

    public boolean equals(getRewardPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRewardPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRewardPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRewardPagination_resultStandardSchemeFactory implements SchemeFactory {
      public getRewardPagination_resultStandardScheme getScheme() {
        return new getRewardPagination_resultStandardScheme();
      }
    }

    private static class getRewardPagination_resultStandardScheme extends StandardScheme<getRewardPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRewardPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.RewardPagination();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRewardPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRewardPagination_resultTupleSchemeFactory implements SchemeFactory {
      public getRewardPagination_resultTupleScheme getScheme() {
        return new getRewardPagination_resultTupleScheme();
      }
    }

    private static class getRewardPagination_resultTupleScheme extends TupleScheme<getRewardPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRewardPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRewardPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.RewardPagination();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postRewards_args implements org.apache.thrift.TBase<postRewards_args, postRewards_args._Fields>, java.io.Serializable, Cloneable, Comparable<postRewards_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postRewards_args");

    private static final org.apache.thrift.protocol.TField REWARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("rewards", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postRewards_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postRewards_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> rewards; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REWARDS((short)1, "rewards");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REWARDS
            return REWARDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REWARDS, new org.apache.thrift.meta_data.FieldMetaData("rewards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postRewards_args.class, metaDataMap);
    }

    public postRewards_args() {
    }

    public postRewards_args(
      List<com.moseeker.thrift.gen.profile.struct.Reward> rewards)
    {
      this();
      this.rewards = rewards;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postRewards_args(postRewards_args other) {
      if (other.isSetRewards()) {
        List<com.moseeker.thrift.gen.profile.struct.Reward> __this__rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(other.rewards.size());
        for (com.moseeker.thrift.gen.profile.struct.Reward other_element : other.rewards) {
          __this__rewards.add(new com.moseeker.thrift.gen.profile.struct.Reward(other_element));
        }
        this.rewards = __this__rewards;
      }
    }

    public postRewards_args deepCopy() {
      return new postRewards_args(this);
    }

    @Override
    public void clear() {
      this.rewards = null;
    }

    public int getRewardsSize() {
      return (this.rewards == null) ? 0 : this.rewards.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Reward> getRewardsIterator() {
      return (this.rewards == null) ? null : this.rewards.iterator();
    }

    public void addToRewards(com.moseeker.thrift.gen.profile.struct.Reward elem) {
      if (this.rewards == null) {
        this.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>();
      }
      this.rewards.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> getRewards() {
      return this.rewards;
    }

    public postRewards_args setRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) {
      this.rewards = rewards;
      return this;
    }

    public void unsetRewards() {
      this.rewards = null;
    }

    /** Returns true if field rewards is set (has been assigned a value) and false otherwise */
    public boolean isSetRewards() {
      return this.rewards != null;
    }

    public void setRewardsIsSet(boolean value) {
      if (!value) {
        this.rewards = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REWARDS:
        if (value == null) {
          unsetRewards();
        } else {
          setRewards((List<com.moseeker.thrift.gen.profile.struct.Reward>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REWARDS:
        return getRewards();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REWARDS:
        return isSetRewards();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postRewards_args)
        return this.equals((postRewards_args)that);
      return false;
    }

    public boolean equals(postRewards_args that) {
      if (that == null)
        return false;

      boolean this_present_rewards = true && this.isSetRewards();
      boolean that_present_rewards = true && that.isSetRewards();
      if (this_present_rewards || that_present_rewards) {
        if (!(this_present_rewards && that_present_rewards))
          return false;
        if (!this.rewards.equals(that.rewards))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rewards = true && (isSetRewards());
      list.add(present_rewards);
      if (present_rewards)
        list.add(rewards);

      return list.hashCode();
    }

    @Override
    public int compareTo(postRewards_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRewards()).compareTo(other.isSetRewards());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRewards()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewards, other.rewards);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postRewards_args(");
      boolean first = true;

      sb.append("rewards:");
      if (this.rewards == null) {
        sb.append("null");
      } else {
        sb.append(this.rewards);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postRewards_argsStandardSchemeFactory implements SchemeFactory {
      public postRewards_argsStandardScheme getScheme() {
        return new postRewards_argsStandardScheme();
      }
    }

    private static class postRewards_argsStandardScheme extends StandardScheme<postRewards_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postRewards_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REWARDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list360 = iprot.readListBegin();
                  struct.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(_list360.size);
                  com.moseeker.thrift.gen.profile.struct.Reward _elem361;
                  for (int _i362 = 0; _i362 < _list360.size; ++_i362)
                  {
                    _elem361 = new com.moseeker.thrift.gen.profile.struct.Reward();
                    _elem361.read(iprot);
                    struct.rewards.add(_elem361);
                  }
                  iprot.readListEnd();
                }
                struct.setRewardsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postRewards_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rewards != null) {
          oprot.writeFieldBegin(REWARDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rewards.size()));
            for (com.moseeker.thrift.gen.profile.struct.Reward _iter363 : struct.rewards)
            {
              _iter363.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postRewards_argsTupleSchemeFactory implements SchemeFactory {
      public postRewards_argsTupleScheme getScheme() {
        return new postRewards_argsTupleScheme();
      }
    }

    private static class postRewards_argsTupleScheme extends TupleScheme<postRewards_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postRewards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRewards()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRewards()) {
          {
            oprot.writeI32(struct.rewards.size());
            for (com.moseeker.thrift.gen.profile.struct.Reward _iter364 : struct.rewards)
            {
              _iter364.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postRewards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list365 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(_list365.size);
            com.moseeker.thrift.gen.profile.struct.Reward _elem366;
            for (int _i367 = 0; _i367 < _list365.size; ++_i367)
            {
              _elem366 = new com.moseeker.thrift.gen.profile.struct.Reward();
              _elem366.read(iprot);
              struct.rewards.add(_elem366);
            }
          }
          struct.setRewardsIsSet(true);
        }
      }
    }

  }

  public static class postRewards_result implements org.apache.thrift.TBase<postRewards_result, postRewards_result._Fields>, java.io.Serializable, Cloneable, Comparable<postRewards_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postRewards_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postRewards_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postRewards_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postRewards_result.class, metaDataMap);
    }

    public postRewards_result() {
    }

    public postRewards_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postRewards_result(postRewards_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postRewards_result deepCopy() {
      return new postRewards_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postRewards_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postRewards_result)
        return this.equals((postRewards_result)that);
      return false;
    }

    public boolean equals(postRewards_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postRewards_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postRewards_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postRewards_resultStandardSchemeFactory implements SchemeFactory {
      public postRewards_resultStandardScheme getScheme() {
        return new postRewards_resultStandardScheme();
      }
    }

    private static class postRewards_resultStandardScheme extends StandardScheme<postRewards_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postRewards_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postRewards_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postRewards_resultTupleSchemeFactory implements SchemeFactory {
      public postRewards_resultTupleScheme getScheme() {
        return new postRewards_resultTupleScheme();
      }
    }

    private static class postRewards_resultTupleScheme extends TupleScheme<postRewards_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postRewards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postRewards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putRewards_args implements org.apache.thrift.TBase<putRewards_args, putRewards_args._Fields>, java.io.Serializable, Cloneable, Comparable<putRewards_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putRewards_args");

    private static final org.apache.thrift.protocol.TField REWARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("rewards", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putRewards_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putRewards_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> rewards; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REWARDS((short)1, "rewards");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REWARDS
            return REWARDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REWARDS, new org.apache.thrift.meta_data.FieldMetaData("rewards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putRewards_args.class, metaDataMap);
    }

    public putRewards_args() {
    }

    public putRewards_args(
      List<com.moseeker.thrift.gen.profile.struct.Reward> rewards)
    {
      this();
      this.rewards = rewards;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putRewards_args(putRewards_args other) {
      if (other.isSetRewards()) {
        List<com.moseeker.thrift.gen.profile.struct.Reward> __this__rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(other.rewards.size());
        for (com.moseeker.thrift.gen.profile.struct.Reward other_element : other.rewards) {
          __this__rewards.add(new com.moseeker.thrift.gen.profile.struct.Reward(other_element));
        }
        this.rewards = __this__rewards;
      }
    }

    public putRewards_args deepCopy() {
      return new putRewards_args(this);
    }

    @Override
    public void clear() {
      this.rewards = null;
    }

    public int getRewardsSize() {
      return (this.rewards == null) ? 0 : this.rewards.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Reward> getRewardsIterator() {
      return (this.rewards == null) ? null : this.rewards.iterator();
    }

    public void addToRewards(com.moseeker.thrift.gen.profile.struct.Reward elem) {
      if (this.rewards == null) {
        this.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>();
      }
      this.rewards.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> getRewards() {
      return this.rewards;
    }

    public putRewards_args setRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) {
      this.rewards = rewards;
      return this;
    }

    public void unsetRewards() {
      this.rewards = null;
    }

    /** Returns true if field rewards is set (has been assigned a value) and false otherwise */
    public boolean isSetRewards() {
      return this.rewards != null;
    }

    public void setRewardsIsSet(boolean value) {
      if (!value) {
        this.rewards = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REWARDS:
        if (value == null) {
          unsetRewards();
        } else {
          setRewards((List<com.moseeker.thrift.gen.profile.struct.Reward>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REWARDS:
        return getRewards();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REWARDS:
        return isSetRewards();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putRewards_args)
        return this.equals((putRewards_args)that);
      return false;
    }

    public boolean equals(putRewards_args that) {
      if (that == null)
        return false;

      boolean this_present_rewards = true && this.isSetRewards();
      boolean that_present_rewards = true && that.isSetRewards();
      if (this_present_rewards || that_present_rewards) {
        if (!(this_present_rewards && that_present_rewards))
          return false;
        if (!this.rewards.equals(that.rewards))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rewards = true && (isSetRewards());
      list.add(present_rewards);
      if (present_rewards)
        list.add(rewards);

      return list.hashCode();
    }

    @Override
    public int compareTo(putRewards_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRewards()).compareTo(other.isSetRewards());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRewards()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewards, other.rewards);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putRewards_args(");
      boolean first = true;

      sb.append("rewards:");
      if (this.rewards == null) {
        sb.append("null");
      } else {
        sb.append(this.rewards);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putRewards_argsStandardSchemeFactory implements SchemeFactory {
      public putRewards_argsStandardScheme getScheme() {
        return new putRewards_argsStandardScheme();
      }
    }

    private static class putRewards_argsStandardScheme extends StandardScheme<putRewards_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putRewards_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REWARDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list368 = iprot.readListBegin();
                  struct.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(_list368.size);
                  com.moseeker.thrift.gen.profile.struct.Reward _elem369;
                  for (int _i370 = 0; _i370 < _list368.size; ++_i370)
                  {
                    _elem369 = new com.moseeker.thrift.gen.profile.struct.Reward();
                    _elem369.read(iprot);
                    struct.rewards.add(_elem369);
                  }
                  iprot.readListEnd();
                }
                struct.setRewardsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putRewards_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rewards != null) {
          oprot.writeFieldBegin(REWARDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rewards.size()));
            for (com.moseeker.thrift.gen.profile.struct.Reward _iter371 : struct.rewards)
            {
              _iter371.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putRewards_argsTupleSchemeFactory implements SchemeFactory {
      public putRewards_argsTupleScheme getScheme() {
        return new putRewards_argsTupleScheme();
      }
    }

    private static class putRewards_argsTupleScheme extends TupleScheme<putRewards_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putRewards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRewards()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRewards()) {
          {
            oprot.writeI32(struct.rewards.size());
            for (com.moseeker.thrift.gen.profile.struct.Reward _iter372 : struct.rewards)
            {
              _iter372.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putRewards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list373 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(_list373.size);
            com.moseeker.thrift.gen.profile.struct.Reward _elem374;
            for (int _i375 = 0; _i375 < _list373.size; ++_i375)
            {
              _elem374 = new com.moseeker.thrift.gen.profile.struct.Reward();
              _elem374.read(iprot);
              struct.rewards.add(_elem374);
            }
          }
          struct.setRewardsIsSet(true);
        }
      }
    }

  }

  public static class putRewards_result implements org.apache.thrift.TBase<putRewards_result, putRewards_result._Fields>, java.io.Serializable, Cloneable, Comparable<putRewards_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putRewards_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putRewards_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putRewards_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putRewards_result.class, metaDataMap);
    }

    public putRewards_result() {
    }

    public putRewards_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putRewards_result(putRewards_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putRewards_result deepCopy() {
      return new putRewards_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putRewards_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putRewards_result)
        return this.equals((putRewards_result)that);
      return false;
    }

    public boolean equals(putRewards_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putRewards_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putRewards_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putRewards_resultStandardSchemeFactory implements SchemeFactory {
      public putRewards_resultStandardScheme getScheme() {
        return new putRewards_resultStandardScheme();
      }
    }

    private static class putRewards_resultStandardScheme extends StandardScheme<putRewards_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putRewards_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putRewards_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putRewards_resultTupleSchemeFactory implements SchemeFactory {
      public putRewards_resultTupleScheme getScheme() {
        return new putRewards_resultTupleScheme();
      }
    }

    private static class putRewards_resultTupleScheme extends TupleScheme<putRewards_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putRewards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putRewards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delRewards_args implements org.apache.thrift.TBase<delRewards_args, delRewards_args._Fields>, java.io.Serializable, Cloneable, Comparable<delRewards_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRewards_args");

    private static final org.apache.thrift.protocol.TField REWARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("rewards", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRewards_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRewards_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> rewards; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REWARDS((short)1, "rewards");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REWARDS
            return REWARDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REWARDS, new org.apache.thrift.meta_data.FieldMetaData("rewards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRewards_args.class, metaDataMap);
    }

    public delRewards_args() {
    }

    public delRewards_args(
      List<com.moseeker.thrift.gen.profile.struct.Reward> rewards)
    {
      this();
      this.rewards = rewards;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRewards_args(delRewards_args other) {
      if (other.isSetRewards()) {
        List<com.moseeker.thrift.gen.profile.struct.Reward> __this__rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(other.rewards.size());
        for (com.moseeker.thrift.gen.profile.struct.Reward other_element : other.rewards) {
          __this__rewards.add(new com.moseeker.thrift.gen.profile.struct.Reward(other_element));
        }
        this.rewards = __this__rewards;
      }
    }

    public delRewards_args deepCopy() {
      return new delRewards_args(this);
    }

    @Override
    public void clear() {
      this.rewards = null;
    }

    public int getRewardsSize() {
      return (this.rewards == null) ? 0 : this.rewards.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Reward> getRewardsIterator() {
      return (this.rewards == null) ? null : this.rewards.iterator();
    }

    public void addToRewards(com.moseeker.thrift.gen.profile.struct.Reward elem) {
      if (this.rewards == null) {
        this.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>();
      }
      this.rewards.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Reward> getRewards() {
      return this.rewards;
    }

    public delRewards_args setRewards(List<com.moseeker.thrift.gen.profile.struct.Reward> rewards) {
      this.rewards = rewards;
      return this;
    }

    public void unsetRewards() {
      this.rewards = null;
    }

    /** Returns true if field rewards is set (has been assigned a value) and false otherwise */
    public boolean isSetRewards() {
      return this.rewards != null;
    }

    public void setRewardsIsSet(boolean value) {
      if (!value) {
        this.rewards = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REWARDS:
        if (value == null) {
          unsetRewards();
        } else {
          setRewards((List<com.moseeker.thrift.gen.profile.struct.Reward>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REWARDS:
        return getRewards();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REWARDS:
        return isSetRewards();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRewards_args)
        return this.equals((delRewards_args)that);
      return false;
    }

    public boolean equals(delRewards_args that) {
      if (that == null)
        return false;

      boolean this_present_rewards = true && this.isSetRewards();
      boolean that_present_rewards = true && that.isSetRewards();
      if (this_present_rewards || that_present_rewards) {
        if (!(this_present_rewards && that_present_rewards))
          return false;
        if (!this.rewards.equals(that.rewards))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rewards = true && (isSetRewards());
      list.add(present_rewards);
      if (present_rewards)
        list.add(rewards);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRewards_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRewards()).compareTo(other.isSetRewards());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRewards()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewards, other.rewards);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRewards_args(");
      boolean first = true;

      sb.append("rewards:");
      if (this.rewards == null) {
        sb.append("null");
      } else {
        sb.append(this.rewards);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRewards_argsStandardSchemeFactory implements SchemeFactory {
      public delRewards_argsStandardScheme getScheme() {
        return new delRewards_argsStandardScheme();
      }
    }

    private static class delRewards_argsStandardScheme extends StandardScheme<delRewards_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRewards_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REWARDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list376 = iprot.readListBegin();
                  struct.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(_list376.size);
                  com.moseeker.thrift.gen.profile.struct.Reward _elem377;
                  for (int _i378 = 0; _i378 < _list376.size; ++_i378)
                  {
                    _elem377 = new com.moseeker.thrift.gen.profile.struct.Reward();
                    _elem377.read(iprot);
                    struct.rewards.add(_elem377);
                  }
                  iprot.readListEnd();
                }
                struct.setRewardsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRewards_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rewards != null) {
          oprot.writeFieldBegin(REWARDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rewards.size()));
            for (com.moseeker.thrift.gen.profile.struct.Reward _iter379 : struct.rewards)
            {
              _iter379.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRewards_argsTupleSchemeFactory implements SchemeFactory {
      public delRewards_argsTupleScheme getScheme() {
        return new delRewards_argsTupleScheme();
      }
    }

    private static class delRewards_argsTupleScheme extends TupleScheme<delRewards_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRewards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRewards()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRewards()) {
          {
            oprot.writeI32(struct.rewards.size());
            for (com.moseeker.thrift.gen.profile.struct.Reward _iter380 : struct.rewards)
            {
              _iter380.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRewards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list381 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.rewards = new ArrayList<com.moseeker.thrift.gen.profile.struct.Reward>(_list381.size);
            com.moseeker.thrift.gen.profile.struct.Reward _elem382;
            for (int _i383 = 0; _i383 < _list381.size; ++_i383)
            {
              _elem382 = new com.moseeker.thrift.gen.profile.struct.Reward();
              _elem382.read(iprot);
              struct.rewards.add(_elem382);
            }
          }
          struct.setRewardsIsSet(true);
        }
      }
    }

  }

  public static class delRewards_result implements org.apache.thrift.TBase<delRewards_result, delRewards_result._Fields>, java.io.Serializable, Cloneable, Comparable<delRewards_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRewards_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRewards_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRewards_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRewards_result.class, metaDataMap);
    }

    public delRewards_result() {
    }

    public delRewards_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRewards_result(delRewards_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delRewards_result deepCopy() {
      return new delRewards_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delRewards_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRewards_result)
        return this.equals((delRewards_result)that);
      return false;
    }

    public boolean equals(delRewards_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRewards_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRewards_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRewards_resultStandardSchemeFactory implements SchemeFactory {
      public delRewards_resultStandardScheme getScheme() {
        return new delRewards_resultStandardScheme();
      }
    }

    private static class delRewards_resultStandardScheme extends StandardScheme<delRewards_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRewards_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRewards_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRewards_resultTupleSchemeFactory implements SchemeFactory {
      public delRewards_resultTupleScheme getScheme() {
        return new delRewards_resultTupleScheme();
      }
    }

    private static class delRewards_resultTupleScheme extends TupleScheme<delRewards_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRewards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRewards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postReward_args implements org.apache.thrift.TBase<postReward_args, postReward_args._Fields>, java.io.Serializable, Cloneable, Comparable<postReward_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postReward_args");

    private static final org.apache.thrift.protocol.TField REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("reward", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postReward_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postReward_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Reward reward; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REWARD((short)1, "reward");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REWARD
            return REWARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REWARD, new org.apache.thrift.meta_data.FieldMetaData("reward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postReward_args.class, metaDataMap);
    }

    public postReward_args() {
    }

    public postReward_args(
      com.moseeker.thrift.gen.profile.struct.Reward reward)
    {
      this();
      this.reward = reward;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postReward_args(postReward_args other) {
      if (other.isSetReward()) {
        this.reward = new com.moseeker.thrift.gen.profile.struct.Reward(other.reward);
      }
    }

    public postReward_args deepCopy() {
      return new postReward_args(this);
    }

    @Override
    public void clear() {
      this.reward = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Reward getReward() {
      return this.reward;
    }

    public postReward_args setReward(com.moseeker.thrift.gen.profile.struct.Reward reward) {
      this.reward = reward;
      return this;
    }

    public void unsetReward() {
      this.reward = null;
    }

    /** Returns true if field reward is set (has been assigned a value) and false otherwise */
    public boolean isSetReward() {
      return this.reward != null;
    }

    public void setRewardIsSet(boolean value) {
      if (!value) {
        this.reward = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REWARD:
        if (value == null) {
          unsetReward();
        } else {
          setReward((com.moseeker.thrift.gen.profile.struct.Reward)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REWARD:
        return getReward();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REWARD:
        return isSetReward();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postReward_args)
        return this.equals((postReward_args)that);
      return false;
    }

    public boolean equals(postReward_args that) {
      if (that == null)
        return false;

      boolean this_present_reward = true && this.isSetReward();
      boolean that_present_reward = true && that.isSetReward();
      if (this_present_reward || that_present_reward) {
        if (!(this_present_reward && that_present_reward))
          return false;
        if (!this.reward.equals(that.reward))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reward = true && (isSetReward());
      list.add(present_reward);
      if (present_reward)
        list.add(reward);

      return list.hashCode();
    }

    @Override
    public int compareTo(postReward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReward()).compareTo(other.isSetReward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward, other.reward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postReward_args(");
      boolean first = true;

      sb.append("reward:");
      if (this.reward == null) {
        sb.append("null");
      } else {
        sb.append(this.reward);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reward != null) {
        reward.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postReward_argsStandardSchemeFactory implements SchemeFactory {
      public postReward_argsStandardScheme getScheme() {
        return new postReward_argsStandardScheme();
      }
    }

    private static class postReward_argsStandardScheme extends StandardScheme<postReward_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postReward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
                struct.reward.read(iprot);
                struct.setRewardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postReward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reward != null) {
          oprot.writeFieldBegin(REWARD_FIELD_DESC);
          struct.reward.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postReward_argsTupleSchemeFactory implements SchemeFactory {
      public postReward_argsTupleScheme getScheme() {
        return new postReward_argsTupleScheme();
      }
    }

    private static class postReward_argsTupleScheme extends TupleScheme<postReward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReward()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReward()) {
          struct.reward.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
          struct.reward.read(iprot);
          struct.setRewardIsSet(true);
        }
      }
    }

  }

  public static class postReward_result implements org.apache.thrift.TBase<postReward_result, postReward_result._Fields>, java.io.Serializable, Cloneable, Comparable<postReward_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postReward_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postReward_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postReward_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postReward_result.class, metaDataMap);
    }

    public postReward_result() {
    }

    public postReward_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postReward_result(postReward_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postReward_result deepCopy() {
      return new postReward_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postReward_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postReward_result)
        return this.equals((postReward_result)that);
      return false;
    }

    public boolean equals(postReward_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postReward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postReward_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postReward_resultStandardSchemeFactory implements SchemeFactory {
      public postReward_resultStandardScheme getScheme() {
        return new postReward_resultStandardScheme();
      }
    }

    private static class postReward_resultStandardScheme extends StandardScheme<postReward_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postReward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postReward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postReward_resultTupleSchemeFactory implements SchemeFactory {
      public postReward_resultTupleScheme getScheme() {
        return new postReward_resultTupleScheme();
      }
    }

    private static class postReward_resultTupleScheme extends TupleScheme<postReward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putReward_args implements org.apache.thrift.TBase<putReward_args, putReward_args._Fields>, java.io.Serializable, Cloneable, Comparable<putReward_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putReward_args");

    private static final org.apache.thrift.protocol.TField REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("reward", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putReward_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putReward_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Reward reward; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REWARD((short)1, "reward");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REWARD
            return REWARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REWARD, new org.apache.thrift.meta_data.FieldMetaData("reward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putReward_args.class, metaDataMap);
    }

    public putReward_args() {
    }

    public putReward_args(
      com.moseeker.thrift.gen.profile.struct.Reward reward)
    {
      this();
      this.reward = reward;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putReward_args(putReward_args other) {
      if (other.isSetReward()) {
        this.reward = new com.moseeker.thrift.gen.profile.struct.Reward(other.reward);
      }
    }

    public putReward_args deepCopy() {
      return new putReward_args(this);
    }

    @Override
    public void clear() {
      this.reward = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Reward getReward() {
      return this.reward;
    }

    public putReward_args setReward(com.moseeker.thrift.gen.profile.struct.Reward reward) {
      this.reward = reward;
      return this;
    }

    public void unsetReward() {
      this.reward = null;
    }

    /** Returns true if field reward is set (has been assigned a value) and false otherwise */
    public boolean isSetReward() {
      return this.reward != null;
    }

    public void setRewardIsSet(boolean value) {
      if (!value) {
        this.reward = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REWARD:
        if (value == null) {
          unsetReward();
        } else {
          setReward((com.moseeker.thrift.gen.profile.struct.Reward)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REWARD:
        return getReward();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REWARD:
        return isSetReward();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putReward_args)
        return this.equals((putReward_args)that);
      return false;
    }

    public boolean equals(putReward_args that) {
      if (that == null)
        return false;

      boolean this_present_reward = true && this.isSetReward();
      boolean that_present_reward = true && that.isSetReward();
      if (this_present_reward || that_present_reward) {
        if (!(this_present_reward && that_present_reward))
          return false;
        if (!this.reward.equals(that.reward))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reward = true && (isSetReward());
      list.add(present_reward);
      if (present_reward)
        list.add(reward);

      return list.hashCode();
    }

    @Override
    public int compareTo(putReward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReward()).compareTo(other.isSetReward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward, other.reward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putReward_args(");
      boolean first = true;

      sb.append("reward:");
      if (this.reward == null) {
        sb.append("null");
      } else {
        sb.append(this.reward);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reward != null) {
        reward.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putReward_argsStandardSchemeFactory implements SchemeFactory {
      public putReward_argsStandardScheme getScheme() {
        return new putReward_argsStandardScheme();
      }
    }

    private static class putReward_argsStandardScheme extends StandardScheme<putReward_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putReward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
                struct.reward.read(iprot);
                struct.setRewardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putReward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reward != null) {
          oprot.writeFieldBegin(REWARD_FIELD_DESC);
          struct.reward.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putReward_argsTupleSchemeFactory implements SchemeFactory {
      public putReward_argsTupleScheme getScheme() {
        return new putReward_argsTupleScheme();
      }
    }

    private static class putReward_argsTupleScheme extends TupleScheme<putReward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReward()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReward()) {
          struct.reward.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
          struct.reward.read(iprot);
          struct.setRewardIsSet(true);
        }
      }
    }

  }

  public static class putReward_result implements org.apache.thrift.TBase<putReward_result, putReward_result._Fields>, java.io.Serializable, Cloneable, Comparable<putReward_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putReward_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putReward_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putReward_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putReward_result.class, metaDataMap);
    }

    public putReward_result() {
    }

    public putReward_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putReward_result(putReward_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putReward_result deepCopy() {
      return new putReward_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putReward_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putReward_result)
        return this.equals((putReward_result)that);
      return false;
    }

    public boolean equals(putReward_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putReward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putReward_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putReward_resultStandardSchemeFactory implements SchemeFactory {
      public putReward_resultStandardScheme getScheme() {
        return new putReward_resultStandardScheme();
      }
    }

    private static class putReward_resultStandardScheme extends StandardScheme<putReward_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putReward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putReward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putReward_resultTupleSchemeFactory implements SchemeFactory {
      public putReward_resultTupleScheme getScheme() {
        return new putReward_resultTupleScheme();
      }
    }

    private static class putReward_resultTupleScheme extends TupleScheme<putReward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delReward_args implements org.apache.thrift.TBase<delReward_args, delReward_args._Fields>, java.io.Serializable, Cloneable, Comparable<delReward_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delReward_args");

    private static final org.apache.thrift.protocol.TField REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("reward", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delReward_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delReward_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Reward reward; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REWARD((short)1, "reward");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REWARD
            return REWARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REWARD, new org.apache.thrift.meta_data.FieldMetaData("reward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Reward.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delReward_args.class, metaDataMap);
    }

    public delReward_args() {
    }

    public delReward_args(
      com.moseeker.thrift.gen.profile.struct.Reward reward)
    {
      this();
      this.reward = reward;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delReward_args(delReward_args other) {
      if (other.isSetReward()) {
        this.reward = new com.moseeker.thrift.gen.profile.struct.Reward(other.reward);
      }
    }

    public delReward_args deepCopy() {
      return new delReward_args(this);
    }

    @Override
    public void clear() {
      this.reward = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Reward getReward() {
      return this.reward;
    }

    public delReward_args setReward(com.moseeker.thrift.gen.profile.struct.Reward reward) {
      this.reward = reward;
      return this;
    }

    public void unsetReward() {
      this.reward = null;
    }

    /** Returns true if field reward is set (has been assigned a value) and false otherwise */
    public boolean isSetReward() {
      return this.reward != null;
    }

    public void setRewardIsSet(boolean value) {
      if (!value) {
        this.reward = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REWARD:
        if (value == null) {
          unsetReward();
        } else {
          setReward((com.moseeker.thrift.gen.profile.struct.Reward)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REWARD:
        return getReward();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REWARD:
        return isSetReward();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delReward_args)
        return this.equals((delReward_args)that);
      return false;
    }

    public boolean equals(delReward_args that) {
      if (that == null)
        return false;

      boolean this_present_reward = true && this.isSetReward();
      boolean that_present_reward = true && that.isSetReward();
      if (this_present_reward || that_present_reward) {
        if (!(this_present_reward && that_present_reward))
          return false;
        if (!this.reward.equals(that.reward))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reward = true && (isSetReward());
      list.add(present_reward);
      if (present_reward)
        list.add(reward);

      return list.hashCode();
    }

    @Override
    public int compareTo(delReward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReward()).compareTo(other.isSetReward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward, other.reward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delReward_args(");
      boolean first = true;

      sb.append("reward:");
      if (this.reward == null) {
        sb.append("null");
      } else {
        sb.append(this.reward);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reward != null) {
        reward.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delReward_argsStandardSchemeFactory implements SchemeFactory {
      public delReward_argsStandardScheme getScheme() {
        return new delReward_argsStandardScheme();
      }
    }

    private static class delReward_argsStandardScheme extends StandardScheme<delReward_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delReward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
                struct.reward.read(iprot);
                struct.setRewardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delReward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reward != null) {
          oprot.writeFieldBegin(REWARD_FIELD_DESC);
          struct.reward.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delReward_argsTupleSchemeFactory implements SchemeFactory {
      public delReward_argsTupleScheme getScheme() {
        return new delReward_argsTupleScheme();
      }
    }

    private static class delReward_argsTupleScheme extends TupleScheme<delReward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReward()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReward()) {
          struct.reward.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reward = new com.moseeker.thrift.gen.profile.struct.Reward();
          struct.reward.read(iprot);
          struct.setRewardIsSet(true);
        }
      }
    }

  }

  public static class delReward_result implements org.apache.thrift.TBase<delReward_result, delReward_result._Fields>, java.io.Serializable, Cloneable, Comparable<delReward_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delReward_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delReward_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delReward_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delReward_result.class, metaDataMap);
    }

    public delReward_result() {
    }

    public delReward_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delReward_result(delReward_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delReward_result deepCopy() {
      return new delReward_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delReward_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delReward_result)
        return this.equals((delReward_result)that);
      return false;
    }

    public boolean equals(delReward_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delReward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delReward_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delReward_resultStandardSchemeFactory implements SchemeFactory {
      public delReward_resultStandardScheme getScheme() {
        return new delReward_resultStandardScheme();
      }
    }

    private static class delReward_resultStandardScheme extends StandardScheme<delReward_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delReward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delReward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delReward_resultTupleSchemeFactory implements SchemeFactory {
      public delReward_resultTupleScheme getScheme() {
        return new delReward_resultTupleScheme();
      }
    }

    private static class delReward_resultTupleScheme extends TupleScheme<delReward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
