/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-18")
public class SchoolJobServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSchoolJobs(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException;

    public int postSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException;

    public int putSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException;

    public int delSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException;

    public int postSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException;

    public int putSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException;

    public int delSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSchoolJobs(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSchoolJobs(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException
    {
      send_getSchoolJobs(query, schoolJob);
      return recv_getSchoolJobs();
    }

    public void send_getSchoolJobs(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException
    {
      getSchoolJobs_args args = new getSchoolJobs_args();
      args.setQuery(query);
      args.setSchoolJob(schoolJob);
      sendBase("getSchoolJobs", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> recv_getSchoolJobs() throws org.apache.thrift.TException
    {
      getSchoolJobs_result result = new getSchoolJobs_result();
      receiveBase(result, "getSchoolJobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSchoolJobs failed: unknown result");
    }

    public int postSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException
    {
      send_postSchoolJobs(schoolJobs);
      return recv_postSchoolJobs();
    }

    public void send_postSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException
    {
      postSchoolJobs_args args = new postSchoolJobs_args();
      args.setSchoolJobs(schoolJobs);
      sendBase("postSchoolJobs", args);
    }

    public int recv_postSchoolJobs() throws org.apache.thrift.TException
    {
      postSchoolJobs_result result = new postSchoolJobs_result();
      receiveBase(result, "postSchoolJobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postSchoolJobs failed: unknown result");
    }

    public int putSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException
    {
      send_putSchoolJobs(schoolJobs);
      return recv_putSchoolJobs();
    }

    public void send_putSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException
    {
      putSchoolJobs_args args = new putSchoolJobs_args();
      args.setSchoolJobs(schoolJobs);
      sendBase("putSchoolJobs", args);
    }

    public int recv_putSchoolJobs() throws org.apache.thrift.TException
    {
      putSchoolJobs_result result = new putSchoolJobs_result();
      receiveBase(result, "putSchoolJobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putSchoolJobs failed: unknown result");
    }

    public int delSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException
    {
      send_delSchoolJobs(schoolJobs);
      return recv_delSchoolJobs();
    }

    public void send_delSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) throws org.apache.thrift.TException
    {
      delSchoolJobs_args args = new delSchoolJobs_args();
      args.setSchoolJobs(schoolJobs);
      sendBase("delSchoolJobs", args);
    }

    public int recv_delSchoolJobs() throws org.apache.thrift.TException
    {
      delSchoolJobs_result result = new delSchoolJobs_result();
      receiveBase(result, "delSchoolJobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delSchoolJobs failed: unknown result");
    }

    public int postSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException
    {
      send_postSchoolJob(schoolJob);
      return recv_postSchoolJob();
    }

    public void send_postSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException
    {
      postSchoolJob_args args = new postSchoolJob_args();
      args.setSchoolJob(schoolJob);
      sendBase("postSchoolJob", args);
    }

    public int recv_postSchoolJob() throws org.apache.thrift.TException
    {
      postSchoolJob_result result = new postSchoolJob_result();
      receiveBase(result, "postSchoolJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postSchoolJob failed: unknown result");
    }

    public int putSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException
    {
      send_putSchoolJob(schoolJob);
      return recv_putSchoolJob();
    }

    public void send_putSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException
    {
      putSchoolJob_args args = new putSchoolJob_args();
      args.setSchoolJob(schoolJob);
      sendBase("putSchoolJob", args);
    }

    public int recv_putSchoolJob() throws org.apache.thrift.TException
    {
      putSchoolJob_result result = new putSchoolJob_result();
      receiveBase(result, "putSchoolJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putSchoolJob failed: unknown result");
    }

    public int delSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException
    {
      send_delSchoolJob(schoolJob);
      return recv_delSchoolJob();
    }

    public void send_delSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) throws org.apache.thrift.TException
    {
      delSchoolJob_args args = new delSchoolJob_args();
      args.setSchoolJob(schoolJob);
      sendBase("delSchoolJob", args);
    }

    public int recv_delSchoolJob() throws org.apache.thrift.TException
    {
      delSchoolJob_result result = new delSchoolJob_result();
      receiveBase(result, "delSchoolJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delSchoolJob failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSchoolJobs(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSchoolJobs_call method_call = new getSchoolJobs_call(query, schoolJob, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSchoolJobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob;
      public getSchoolJobs_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.schoolJob = schoolJob;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSchoolJobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSchoolJobs_args args = new getSchoolJobs_args();
        args.setQuery(query);
        args.setSchoolJob(schoolJob);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSchoolJobs();
      }
    }

    public void postSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postSchoolJobs_call method_call = new postSchoolJobs_call(schoolJobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postSchoolJobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs;
      public postSchoolJobs_call(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolJobs = schoolJobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postSchoolJobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postSchoolJobs_args args = new postSchoolJobs_args();
        args.setSchoolJobs(schoolJobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postSchoolJobs();
      }
    }

    public void putSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putSchoolJobs_call method_call = new putSchoolJobs_call(schoolJobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putSchoolJobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs;
      public putSchoolJobs_call(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolJobs = schoolJobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putSchoolJobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putSchoolJobs_args args = new putSchoolJobs_args();
        args.setSchoolJobs(schoolJobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putSchoolJobs();
      }
    }

    public void delSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delSchoolJobs_call method_call = new delSchoolJobs_call(schoolJobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delSchoolJobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs;
      public delSchoolJobs_call(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolJobs = schoolJobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delSchoolJobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delSchoolJobs_args args = new delSchoolJobs_args();
        args.setSchoolJobs(schoolJobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delSchoolJobs();
      }
    }

    public void postSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postSchoolJob_call method_call = new postSchoolJob_call(schoolJob, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postSchoolJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob;
      public postSchoolJob_call(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolJob = schoolJob;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postSchoolJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postSchoolJob_args args = new postSchoolJob_args();
        args.setSchoolJob(schoolJob);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postSchoolJob();
      }
    }

    public void putSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putSchoolJob_call method_call = new putSchoolJob_call(schoolJob, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putSchoolJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob;
      public putSchoolJob_call(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolJob = schoolJob;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putSchoolJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putSchoolJob_args args = new putSchoolJob_args();
        args.setSchoolJob(schoolJob);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putSchoolJob();
      }
    }

    public void delSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delSchoolJob_call method_call = new delSchoolJob_call(schoolJob, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delSchoolJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob;
      public delSchoolJob_call(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolJob = schoolJob;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delSchoolJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delSchoolJob_args args = new delSchoolJob_args();
        args.setSchoolJob(schoolJob);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delSchoolJob();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSchoolJobs", new getSchoolJobs());
      processMap.put("postSchoolJobs", new postSchoolJobs());
      processMap.put("putSchoolJobs", new putSchoolJobs());
      processMap.put("delSchoolJobs", new delSchoolJobs());
      processMap.put("postSchoolJob", new postSchoolJob());
      processMap.put("putSchoolJob", new putSchoolJob());
      processMap.put("delSchoolJob", new delSchoolJob());
      return processMap;
    }

    public static class getSchoolJobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSchoolJobs_args> {
      public getSchoolJobs() {
        super("getSchoolJobs");
      }

      public getSchoolJobs_args getEmptyArgsInstance() {
        return new getSchoolJobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSchoolJobs_result getResult(I iface, getSchoolJobs_args args) throws org.apache.thrift.TException {
        getSchoolJobs_result result = new getSchoolJobs_result();
        result.success = iface.getSchoolJobs(args.query, args.schoolJob);
        return result;
      }
    }

    public static class postSchoolJobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postSchoolJobs_args> {
      public postSchoolJobs() {
        super("postSchoolJobs");
      }

      public postSchoolJobs_args getEmptyArgsInstance() {
        return new postSchoolJobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postSchoolJobs_result getResult(I iface, postSchoolJobs_args args) throws org.apache.thrift.TException {
        postSchoolJobs_result result = new postSchoolJobs_result();
        result.success = iface.postSchoolJobs(args.schoolJobs);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putSchoolJobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putSchoolJobs_args> {
      public putSchoolJobs() {
        super("putSchoolJobs");
      }

      public putSchoolJobs_args getEmptyArgsInstance() {
        return new putSchoolJobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putSchoolJobs_result getResult(I iface, putSchoolJobs_args args) throws org.apache.thrift.TException {
        putSchoolJobs_result result = new putSchoolJobs_result();
        result.success = iface.putSchoolJobs(args.schoolJobs);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delSchoolJobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delSchoolJobs_args> {
      public delSchoolJobs() {
        super("delSchoolJobs");
      }

      public delSchoolJobs_args getEmptyArgsInstance() {
        return new delSchoolJobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delSchoolJobs_result getResult(I iface, delSchoolJobs_args args) throws org.apache.thrift.TException {
        delSchoolJobs_result result = new delSchoolJobs_result();
        result.success = iface.delSchoolJobs(args.schoolJobs);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postSchoolJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postSchoolJob_args> {
      public postSchoolJob() {
        super("postSchoolJob");
      }

      public postSchoolJob_args getEmptyArgsInstance() {
        return new postSchoolJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postSchoolJob_result getResult(I iface, postSchoolJob_args args) throws org.apache.thrift.TException {
        postSchoolJob_result result = new postSchoolJob_result();
        result.success = iface.postSchoolJob(args.schoolJob);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putSchoolJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putSchoolJob_args> {
      public putSchoolJob() {
        super("putSchoolJob");
      }

      public putSchoolJob_args getEmptyArgsInstance() {
        return new putSchoolJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putSchoolJob_result getResult(I iface, putSchoolJob_args args) throws org.apache.thrift.TException {
        putSchoolJob_result result = new putSchoolJob_result();
        result.success = iface.putSchoolJob(args.schoolJob);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delSchoolJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delSchoolJob_args> {
      public delSchoolJob() {
        super("delSchoolJob");
      }

      public delSchoolJob_args getEmptyArgsInstance() {
        return new delSchoolJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delSchoolJob_result getResult(I iface, delSchoolJob_args args) throws org.apache.thrift.TException {
        delSchoolJob_result result = new delSchoolJob_result();
        result.success = iface.delSchoolJob(args.schoolJob);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSchoolJobs", new getSchoolJobs());
      processMap.put("postSchoolJobs", new postSchoolJobs());
      processMap.put("putSchoolJobs", new putSchoolJobs());
      processMap.put("delSchoolJobs", new delSchoolJobs());
      processMap.put("postSchoolJob", new postSchoolJob());
      processMap.put("putSchoolJob", new putSchoolJob());
      processMap.put("delSchoolJob", new delSchoolJob());
      return processMap;
    }

    public static class getSchoolJobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSchoolJobs_args, List<com.moseeker.thrift.gen.profile.struct.SchoolJob>> {
      public getSchoolJobs() {
        super("getSchoolJobs");
      }

      public getSchoolJobs_args getEmptyArgsInstance() {
        return new getSchoolJobs_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.SchoolJob>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.SchoolJob>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> o) {
            getSchoolJobs_result result = new getSchoolJobs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSchoolJobs_result result = new getSchoolJobs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSchoolJobs_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.SchoolJob>> resultHandler) throws TException {
        iface.getSchoolJobs(args.query, args.schoolJob,resultHandler);
      }
    }

    public static class postSchoolJobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postSchoolJobs_args, Integer> {
      public postSchoolJobs() {
        super("postSchoolJobs");
      }

      public postSchoolJobs_args getEmptyArgsInstance() {
        return new postSchoolJobs_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postSchoolJobs_result result = new postSchoolJobs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postSchoolJobs_result result = new postSchoolJobs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postSchoolJobs_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postSchoolJobs(args.schoolJobs,resultHandler);
      }
    }

    public static class putSchoolJobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putSchoolJobs_args, Integer> {
      public putSchoolJobs() {
        super("putSchoolJobs");
      }

      public putSchoolJobs_args getEmptyArgsInstance() {
        return new putSchoolJobs_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putSchoolJobs_result result = new putSchoolJobs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putSchoolJobs_result result = new putSchoolJobs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putSchoolJobs_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putSchoolJobs(args.schoolJobs,resultHandler);
      }
    }

    public static class delSchoolJobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delSchoolJobs_args, Integer> {
      public delSchoolJobs() {
        super("delSchoolJobs");
      }

      public delSchoolJobs_args getEmptyArgsInstance() {
        return new delSchoolJobs_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delSchoolJobs_result result = new delSchoolJobs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delSchoolJobs_result result = new delSchoolJobs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delSchoolJobs_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delSchoolJobs(args.schoolJobs,resultHandler);
      }
    }

    public static class postSchoolJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postSchoolJob_args, Integer> {
      public postSchoolJob() {
        super("postSchoolJob");
      }

      public postSchoolJob_args getEmptyArgsInstance() {
        return new postSchoolJob_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postSchoolJob_result result = new postSchoolJob_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postSchoolJob_result result = new postSchoolJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postSchoolJob_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postSchoolJob(args.schoolJob,resultHandler);
      }
    }

    public static class putSchoolJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putSchoolJob_args, Integer> {
      public putSchoolJob() {
        super("putSchoolJob");
      }

      public putSchoolJob_args getEmptyArgsInstance() {
        return new putSchoolJob_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putSchoolJob_result result = new putSchoolJob_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putSchoolJob_result result = new putSchoolJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putSchoolJob_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putSchoolJob(args.schoolJob,resultHandler);
      }
    }

    public static class delSchoolJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delSchoolJob_args, Integer> {
      public delSchoolJob() {
        super("delSchoolJob");
      }

      public delSchoolJob_args getEmptyArgsInstance() {
        return new delSchoolJob_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delSchoolJob_result result = new delSchoolJob_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delSchoolJob_result result = new delSchoolJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delSchoolJob_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delSchoolJob(args.schoolJob,resultHandler);
      }
    }

  }

  public static class getSchoolJobs_args implements org.apache.thrift.TBase<getSchoolJobs_args, getSchoolJobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSchoolJobs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSchoolJobs_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolJob", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSchoolJobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchoolJobs_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      SCHOOL_JOB((short)2, "schoolJob");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // SCHOOL_JOB
            return SCHOOL_JOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.SCHOOL_JOB, new org.apache.thrift.meta_data.FieldMetaData("schoolJob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.SchoolJob.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSchoolJobs_args.class, metaDataMap);
    }

    public getSchoolJobs_args() {
    }

    public getSchoolJobs_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob)
    {
      this();
      this.query = query;
      this.schoolJob = schoolJob;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchoolJobs_args(getSchoolJobs_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetSchoolJob()) {
        this.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob(other.schoolJob);
      }
    }

    public getSchoolJobs_args deepCopy() {
      return new getSchoolJobs_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.schoolJob = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getSchoolJobs_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.SchoolJob getSchoolJob() {
      return this.schoolJob;
    }

    public getSchoolJobs_args setSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) {
      this.schoolJob = schoolJob;
      return this;
    }

    public void unsetSchoolJob() {
      this.schoolJob = null;
    }

    /** Returns true if field schoolJob is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolJob() {
      return this.schoolJob != null;
    }

    public void setSchoolJobIsSet(boolean value) {
      if (!value) {
        this.schoolJob = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case SCHOOL_JOB:
        if (value == null) {
          unsetSchoolJob();
        } else {
          setSchoolJob((com.moseeker.thrift.gen.profile.struct.SchoolJob)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case SCHOOL_JOB:
        return getSchoolJob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case SCHOOL_JOB:
        return isSetSchoolJob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchoolJobs_args)
        return this.equals((getSchoolJobs_args)that);
      return false;
    }

    public boolean equals(getSchoolJobs_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_schoolJob = true && this.isSetSchoolJob();
      boolean that_present_schoolJob = true && that.isSetSchoolJob();
      if (this_present_schoolJob || that_present_schoolJob) {
        if (!(this_present_schoolJob && that_present_schoolJob))
          return false;
        if (!this.schoolJob.equals(that.schoolJob))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_schoolJob = true && (isSetSchoolJob());
      list.add(present_schoolJob);
      if (present_schoolJob)
        list.add(schoolJob);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSchoolJobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchoolJob()).compareTo(other.isSetSchoolJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolJob, other.schoolJob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchoolJobs_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolJob:");
      if (this.schoolJob == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolJob);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (schoolJob != null) {
        schoolJob.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchoolJobs_argsStandardSchemeFactory implements SchemeFactory {
      public getSchoolJobs_argsStandardScheme getScheme() {
        return new getSchoolJobs_argsStandardScheme();
      }
    }

    private static class getSchoolJobs_argsStandardScheme extends StandardScheme<getSchoolJobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchoolJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
                struct.schoolJob.read(iprot);
                struct.setSchoolJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchoolJobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.schoolJob != null) {
          oprot.writeFieldBegin(SCHOOL_JOB_FIELD_DESC);
          struct.schoolJob.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchoolJobs_argsTupleSchemeFactory implements SchemeFactory {
      public getSchoolJobs_argsTupleScheme getScheme() {
        return new getSchoolJobs_argsTupleScheme();
      }
    }

    private static class getSchoolJobs_argsTupleScheme extends TupleScheme<getSchoolJobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchoolJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolJob()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetSchoolJob()) {
          struct.schoolJob.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchoolJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
          struct.schoolJob.read(iprot);
          struct.setSchoolJobIsSet(true);
        }
      }
    }

  }

  public static class getSchoolJobs_result implements org.apache.thrift.TBase<getSchoolJobs_result, getSchoolJobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSchoolJobs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSchoolJobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSchoolJobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchoolJobs_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.SchoolJob.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSchoolJobs_result.class, metaDataMap);
    }

    public getSchoolJobs_result() {
    }

    public getSchoolJobs_result(
      List<com.moseeker.thrift.gen.profile.struct.SchoolJob> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchoolJobs_result(getSchoolJobs_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.SchoolJob> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.SchoolJob other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.SchoolJob(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSchoolJobs_result deepCopy() {
      return new getSchoolJobs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.SchoolJob elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSuccess() {
      return this.success;
    }

    public getSchoolJobs_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.SchoolJob>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchoolJobs_result)
        return this.equals((getSchoolJobs_result)that);
      return false;
    }

    public boolean equals(getSchoolJobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSchoolJobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchoolJobs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchoolJobs_resultStandardSchemeFactory implements SchemeFactory {
      public getSchoolJobs_resultStandardScheme getScheme() {
        return new getSchoolJobs_resultStandardScheme();
      }
    }

    private static class getSchoolJobs_resultStandardScheme extends StandardScheme<getSchoolJobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchoolJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list384 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(_list384.size);
                  com.moseeker.thrift.gen.profile.struct.SchoolJob _elem385;
                  for (int _i386 = 0; _i386 < _list384.size; ++_i386)
                  {
                    _elem385 = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
                    _elem385.read(iprot);
                    struct.success.add(_elem385);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchoolJobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.SchoolJob _iter387 : struct.success)
            {
              _iter387.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchoolJobs_resultTupleSchemeFactory implements SchemeFactory {
      public getSchoolJobs_resultTupleScheme getScheme() {
        return new getSchoolJobs_resultTupleScheme();
      }
    }

    private static class getSchoolJobs_resultTupleScheme extends TupleScheme<getSchoolJobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchoolJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.SchoolJob _iter388 : struct.success)
            {
              _iter388.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchoolJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list389 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(_list389.size);
            com.moseeker.thrift.gen.profile.struct.SchoolJob _elem390;
            for (int _i391 = 0; _i391 < _list389.size; ++_i391)
            {
              _elem390 = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
              _elem390.read(iprot);
              struct.success.add(_elem390);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postSchoolJobs_args implements org.apache.thrift.TBase<postSchoolJobs_args, postSchoolJobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<postSchoolJobs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSchoolJobs_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolJobs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSchoolJobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSchoolJobs_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_JOBS((short)1, "schoolJobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_JOBS
            return SCHOOL_JOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_JOBS, new org.apache.thrift.meta_data.FieldMetaData("schoolJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.SchoolJob.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSchoolJobs_args.class, metaDataMap);
    }

    public postSchoolJobs_args() {
    }

    public postSchoolJobs_args(
      List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs)
    {
      this();
      this.schoolJobs = schoolJobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSchoolJobs_args(postSchoolJobs_args other) {
      if (other.isSetSchoolJobs()) {
        List<com.moseeker.thrift.gen.profile.struct.SchoolJob> __this__schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(other.schoolJobs.size());
        for (com.moseeker.thrift.gen.profile.struct.SchoolJob other_element : other.schoolJobs) {
          __this__schoolJobs.add(new com.moseeker.thrift.gen.profile.struct.SchoolJob(other_element));
        }
        this.schoolJobs = __this__schoolJobs;
      }
    }

    public postSchoolJobs_args deepCopy() {
      return new postSchoolJobs_args(this);
    }

    @Override
    public void clear() {
      this.schoolJobs = null;
    }

    public int getSchoolJobsSize() {
      return (this.schoolJobs == null) ? 0 : this.schoolJobs.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSchoolJobsIterator() {
      return (this.schoolJobs == null) ? null : this.schoolJobs.iterator();
    }

    public void addToSchoolJobs(com.moseeker.thrift.gen.profile.struct.SchoolJob elem) {
      if (this.schoolJobs == null) {
        this.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>();
      }
      this.schoolJobs.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSchoolJobs() {
      return this.schoolJobs;
    }

    public postSchoolJobs_args setSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) {
      this.schoolJobs = schoolJobs;
      return this;
    }

    public void unsetSchoolJobs() {
      this.schoolJobs = null;
    }

    /** Returns true if field schoolJobs is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolJobs() {
      return this.schoolJobs != null;
    }

    public void setSchoolJobsIsSet(boolean value) {
      if (!value) {
        this.schoolJobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHOOL_JOBS:
        if (value == null) {
          unsetSchoolJobs();
        } else {
          setSchoolJobs((List<com.moseeker.thrift.gen.profile.struct.SchoolJob>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_JOBS:
        return getSchoolJobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_JOBS:
        return isSetSchoolJobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSchoolJobs_args)
        return this.equals((postSchoolJobs_args)that);
      return false;
    }

    public boolean equals(postSchoolJobs_args that) {
      if (that == null)
        return false;

      boolean this_present_schoolJobs = true && this.isSetSchoolJobs();
      boolean that_present_schoolJobs = true && that.isSetSchoolJobs();
      if (this_present_schoolJobs || that_present_schoolJobs) {
        if (!(this_present_schoolJobs && that_present_schoolJobs))
          return false;
        if (!this.schoolJobs.equals(that.schoolJobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_schoolJobs = true && (isSetSchoolJobs());
      list.add(present_schoolJobs);
      if (present_schoolJobs)
        list.add(schoolJobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSchoolJobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchoolJobs()).compareTo(other.isSetSchoolJobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolJobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolJobs, other.schoolJobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSchoolJobs_args(");
      boolean first = true;

      sb.append("schoolJobs:");
      if (this.schoolJobs == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolJobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSchoolJobs_argsStandardSchemeFactory implements SchemeFactory {
      public postSchoolJobs_argsStandardScheme getScheme() {
        return new postSchoolJobs_argsStandardScheme();
      }
    }

    private static class postSchoolJobs_argsStandardScheme extends StandardScheme<postSchoolJobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSchoolJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_JOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list392 = iprot.readListBegin();
                  struct.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(_list392.size);
                  com.moseeker.thrift.gen.profile.struct.SchoolJob _elem393;
                  for (int _i394 = 0; _i394 < _list392.size; ++_i394)
                  {
                    _elem393 = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
                    _elem393.read(iprot);
                    struct.schoolJobs.add(_elem393);
                  }
                  iprot.readListEnd();
                }
                struct.setSchoolJobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSchoolJobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolJobs != null) {
          oprot.writeFieldBegin(SCHOOL_JOBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.schoolJobs.size()));
            for (com.moseeker.thrift.gen.profile.struct.SchoolJob _iter395 : struct.schoolJobs)
            {
              _iter395.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSchoolJobs_argsTupleSchemeFactory implements SchemeFactory {
      public postSchoolJobs_argsTupleScheme getScheme() {
        return new postSchoolJobs_argsTupleScheme();
      }
    }

    private static class postSchoolJobs_argsTupleScheme extends TupleScheme<postSchoolJobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSchoolJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchoolJobs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolJobs()) {
          {
            oprot.writeI32(struct.schoolJobs.size());
            for (com.moseeker.thrift.gen.profile.struct.SchoolJob _iter396 : struct.schoolJobs)
            {
              _iter396.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSchoolJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list397 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(_list397.size);
            com.moseeker.thrift.gen.profile.struct.SchoolJob _elem398;
            for (int _i399 = 0; _i399 < _list397.size; ++_i399)
            {
              _elem398 = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
              _elem398.read(iprot);
              struct.schoolJobs.add(_elem398);
            }
          }
          struct.setSchoolJobsIsSet(true);
        }
      }
    }

  }

  public static class postSchoolJobs_result implements org.apache.thrift.TBase<postSchoolJobs_result, postSchoolJobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<postSchoolJobs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSchoolJobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSchoolJobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSchoolJobs_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSchoolJobs_result.class, metaDataMap);
    }

    public postSchoolJobs_result() {
    }

    public postSchoolJobs_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSchoolJobs_result(postSchoolJobs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postSchoolJobs_result deepCopy() {
      return new postSchoolJobs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postSchoolJobs_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSchoolJobs_result)
        return this.equals((postSchoolJobs_result)that);
      return false;
    }

    public boolean equals(postSchoolJobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSchoolJobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSchoolJobs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSchoolJobs_resultStandardSchemeFactory implements SchemeFactory {
      public postSchoolJobs_resultStandardScheme getScheme() {
        return new postSchoolJobs_resultStandardScheme();
      }
    }

    private static class postSchoolJobs_resultStandardScheme extends StandardScheme<postSchoolJobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSchoolJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSchoolJobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSchoolJobs_resultTupleSchemeFactory implements SchemeFactory {
      public postSchoolJobs_resultTupleScheme getScheme() {
        return new postSchoolJobs_resultTupleScheme();
      }
    }

    private static class postSchoolJobs_resultTupleScheme extends TupleScheme<postSchoolJobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSchoolJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSchoolJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putSchoolJobs_args implements org.apache.thrift.TBase<putSchoolJobs_args, putSchoolJobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<putSchoolJobs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putSchoolJobs_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolJobs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putSchoolJobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putSchoolJobs_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_JOBS((short)1, "schoolJobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_JOBS
            return SCHOOL_JOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_JOBS, new org.apache.thrift.meta_data.FieldMetaData("schoolJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.SchoolJob.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putSchoolJobs_args.class, metaDataMap);
    }

    public putSchoolJobs_args() {
    }

    public putSchoolJobs_args(
      List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs)
    {
      this();
      this.schoolJobs = schoolJobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putSchoolJobs_args(putSchoolJobs_args other) {
      if (other.isSetSchoolJobs()) {
        List<com.moseeker.thrift.gen.profile.struct.SchoolJob> __this__schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(other.schoolJobs.size());
        for (com.moseeker.thrift.gen.profile.struct.SchoolJob other_element : other.schoolJobs) {
          __this__schoolJobs.add(new com.moseeker.thrift.gen.profile.struct.SchoolJob(other_element));
        }
        this.schoolJobs = __this__schoolJobs;
      }
    }

    public putSchoolJobs_args deepCopy() {
      return new putSchoolJobs_args(this);
    }

    @Override
    public void clear() {
      this.schoolJobs = null;
    }

    public int getSchoolJobsSize() {
      return (this.schoolJobs == null) ? 0 : this.schoolJobs.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSchoolJobsIterator() {
      return (this.schoolJobs == null) ? null : this.schoolJobs.iterator();
    }

    public void addToSchoolJobs(com.moseeker.thrift.gen.profile.struct.SchoolJob elem) {
      if (this.schoolJobs == null) {
        this.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>();
      }
      this.schoolJobs.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSchoolJobs() {
      return this.schoolJobs;
    }

    public putSchoolJobs_args setSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) {
      this.schoolJobs = schoolJobs;
      return this;
    }

    public void unsetSchoolJobs() {
      this.schoolJobs = null;
    }

    /** Returns true if field schoolJobs is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolJobs() {
      return this.schoolJobs != null;
    }

    public void setSchoolJobsIsSet(boolean value) {
      if (!value) {
        this.schoolJobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHOOL_JOBS:
        if (value == null) {
          unsetSchoolJobs();
        } else {
          setSchoolJobs((List<com.moseeker.thrift.gen.profile.struct.SchoolJob>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_JOBS:
        return getSchoolJobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_JOBS:
        return isSetSchoolJobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putSchoolJobs_args)
        return this.equals((putSchoolJobs_args)that);
      return false;
    }

    public boolean equals(putSchoolJobs_args that) {
      if (that == null)
        return false;

      boolean this_present_schoolJobs = true && this.isSetSchoolJobs();
      boolean that_present_schoolJobs = true && that.isSetSchoolJobs();
      if (this_present_schoolJobs || that_present_schoolJobs) {
        if (!(this_present_schoolJobs && that_present_schoolJobs))
          return false;
        if (!this.schoolJobs.equals(that.schoolJobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_schoolJobs = true && (isSetSchoolJobs());
      list.add(present_schoolJobs);
      if (present_schoolJobs)
        list.add(schoolJobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(putSchoolJobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchoolJobs()).compareTo(other.isSetSchoolJobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolJobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolJobs, other.schoolJobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putSchoolJobs_args(");
      boolean first = true;

      sb.append("schoolJobs:");
      if (this.schoolJobs == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolJobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putSchoolJobs_argsStandardSchemeFactory implements SchemeFactory {
      public putSchoolJobs_argsStandardScheme getScheme() {
        return new putSchoolJobs_argsStandardScheme();
      }
    }

    private static class putSchoolJobs_argsStandardScheme extends StandardScheme<putSchoolJobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putSchoolJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_JOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();
                  struct.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(_list400.size);
                  com.moseeker.thrift.gen.profile.struct.SchoolJob _elem401;
                  for (int _i402 = 0; _i402 < _list400.size; ++_i402)
                  {
                    _elem401 = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
                    _elem401.read(iprot);
                    struct.schoolJobs.add(_elem401);
                  }
                  iprot.readListEnd();
                }
                struct.setSchoolJobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putSchoolJobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolJobs != null) {
          oprot.writeFieldBegin(SCHOOL_JOBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.schoolJobs.size()));
            for (com.moseeker.thrift.gen.profile.struct.SchoolJob _iter403 : struct.schoolJobs)
            {
              _iter403.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putSchoolJobs_argsTupleSchemeFactory implements SchemeFactory {
      public putSchoolJobs_argsTupleScheme getScheme() {
        return new putSchoolJobs_argsTupleScheme();
      }
    }

    private static class putSchoolJobs_argsTupleScheme extends TupleScheme<putSchoolJobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putSchoolJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchoolJobs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolJobs()) {
          {
            oprot.writeI32(struct.schoolJobs.size());
            for (com.moseeker.thrift.gen.profile.struct.SchoolJob _iter404 : struct.schoolJobs)
            {
              _iter404.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putSchoolJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list405 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(_list405.size);
            com.moseeker.thrift.gen.profile.struct.SchoolJob _elem406;
            for (int _i407 = 0; _i407 < _list405.size; ++_i407)
            {
              _elem406 = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
              _elem406.read(iprot);
              struct.schoolJobs.add(_elem406);
            }
          }
          struct.setSchoolJobsIsSet(true);
        }
      }
    }

  }

  public static class putSchoolJobs_result implements org.apache.thrift.TBase<putSchoolJobs_result, putSchoolJobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<putSchoolJobs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putSchoolJobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putSchoolJobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putSchoolJobs_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putSchoolJobs_result.class, metaDataMap);
    }

    public putSchoolJobs_result() {
    }

    public putSchoolJobs_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putSchoolJobs_result(putSchoolJobs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putSchoolJobs_result deepCopy() {
      return new putSchoolJobs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putSchoolJobs_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putSchoolJobs_result)
        return this.equals((putSchoolJobs_result)that);
      return false;
    }

    public boolean equals(putSchoolJobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putSchoolJobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putSchoolJobs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putSchoolJobs_resultStandardSchemeFactory implements SchemeFactory {
      public putSchoolJobs_resultStandardScheme getScheme() {
        return new putSchoolJobs_resultStandardScheme();
      }
    }

    private static class putSchoolJobs_resultStandardScheme extends StandardScheme<putSchoolJobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putSchoolJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putSchoolJobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putSchoolJobs_resultTupleSchemeFactory implements SchemeFactory {
      public putSchoolJobs_resultTupleScheme getScheme() {
        return new putSchoolJobs_resultTupleScheme();
      }
    }

    private static class putSchoolJobs_resultTupleScheme extends TupleScheme<putSchoolJobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putSchoolJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putSchoolJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delSchoolJobs_args implements org.apache.thrift.TBase<delSchoolJobs_args, delSchoolJobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<delSchoolJobs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSchoolJobs_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolJobs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSchoolJobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSchoolJobs_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_JOBS((short)1, "schoolJobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_JOBS
            return SCHOOL_JOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_JOBS, new org.apache.thrift.meta_data.FieldMetaData("schoolJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.SchoolJob.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSchoolJobs_args.class, metaDataMap);
    }

    public delSchoolJobs_args() {
    }

    public delSchoolJobs_args(
      List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs)
    {
      this();
      this.schoolJobs = schoolJobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSchoolJobs_args(delSchoolJobs_args other) {
      if (other.isSetSchoolJobs()) {
        List<com.moseeker.thrift.gen.profile.struct.SchoolJob> __this__schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(other.schoolJobs.size());
        for (com.moseeker.thrift.gen.profile.struct.SchoolJob other_element : other.schoolJobs) {
          __this__schoolJobs.add(new com.moseeker.thrift.gen.profile.struct.SchoolJob(other_element));
        }
        this.schoolJobs = __this__schoolJobs;
      }
    }

    public delSchoolJobs_args deepCopy() {
      return new delSchoolJobs_args(this);
    }

    @Override
    public void clear() {
      this.schoolJobs = null;
    }

    public int getSchoolJobsSize() {
      return (this.schoolJobs == null) ? 0 : this.schoolJobs.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSchoolJobsIterator() {
      return (this.schoolJobs == null) ? null : this.schoolJobs.iterator();
    }

    public void addToSchoolJobs(com.moseeker.thrift.gen.profile.struct.SchoolJob elem) {
      if (this.schoolJobs == null) {
        this.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>();
      }
      this.schoolJobs.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.SchoolJob> getSchoolJobs() {
      return this.schoolJobs;
    }

    public delSchoolJobs_args setSchoolJobs(List<com.moseeker.thrift.gen.profile.struct.SchoolJob> schoolJobs) {
      this.schoolJobs = schoolJobs;
      return this;
    }

    public void unsetSchoolJobs() {
      this.schoolJobs = null;
    }

    /** Returns true if field schoolJobs is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolJobs() {
      return this.schoolJobs != null;
    }

    public void setSchoolJobsIsSet(boolean value) {
      if (!value) {
        this.schoolJobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHOOL_JOBS:
        if (value == null) {
          unsetSchoolJobs();
        } else {
          setSchoolJobs((List<com.moseeker.thrift.gen.profile.struct.SchoolJob>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_JOBS:
        return getSchoolJobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_JOBS:
        return isSetSchoolJobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSchoolJobs_args)
        return this.equals((delSchoolJobs_args)that);
      return false;
    }

    public boolean equals(delSchoolJobs_args that) {
      if (that == null)
        return false;

      boolean this_present_schoolJobs = true && this.isSetSchoolJobs();
      boolean that_present_schoolJobs = true && that.isSetSchoolJobs();
      if (this_present_schoolJobs || that_present_schoolJobs) {
        if (!(this_present_schoolJobs && that_present_schoolJobs))
          return false;
        if (!this.schoolJobs.equals(that.schoolJobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_schoolJobs = true && (isSetSchoolJobs());
      list.add(present_schoolJobs);
      if (present_schoolJobs)
        list.add(schoolJobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSchoolJobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchoolJobs()).compareTo(other.isSetSchoolJobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolJobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolJobs, other.schoolJobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSchoolJobs_args(");
      boolean first = true;

      sb.append("schoolJobs:");
      if (this.schoolJobs == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolJobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSchoolJobs_argsStandardSchemeFactory implements SchemeFactory {
      public delSchoolJobs_argsStandardScheme getScheme() {
        return new delSchoolJobs_argsStandardScheme();
      }
    }

    private static class delSchoolJobs_argsStandardScheme extends StandardScheme<delSchoolJobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSchoolJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_JOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list408 = iprot.readListBegin();
                  struct.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(_list408.size);
                  com.moseeker.thrift.gen.profile.struct.SchoolJob _elem409;
                  for (int _i410 = 0; _i410 < _list408.size; ++_i410)
                  {
                    _elem409 = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
                    _elem409.read(iprot);
                    struct.schoolJobs.add(_elem409);
                  }
                  iprot.readListEnd();
                }
                struct.setSchoolJobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSchoolJobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolJobs != null) {
          oprot.writeFieldBegin(SCHOOL_JOBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.schoolJobs.size()));
            for (com.moseeker.thrift.gen.profile.struct.SchoolJob _iter411 : struct.schoolJobs)
            {
              _iter411.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSchoolJobs_argsTupleSchemeFactory implements SchemeFactory {
      public delSchoolJobs_argsTupleScheme getScheme() {
        return new delSchoolJobs_argsTupleScheme();
      }
    }

    private static class delSchoolJobs_argsTupleScheme extends TupleScheme<delSchoolJobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSchoolJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchoolJobs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolJobs()) {
          {
            oprot.writeI32(struct.schoolJobs.size());
            for (com.moseeker.thrift.gen.profile.struct.SchoolJob _iter412 : struct.schoolJobs)
            {
              _iter412.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSchoolJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list413 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.schoolJobs = new ArrayList<com.moseeker.thrift.gen.profile.struct.SchoolJob>(_list413.size);
            com.moseeker.thrift.gen.profile.struct.SchoolJob _elem414;
            for (int _i415 = 0; _i415 < _list413.size; ++_i415)
            {
              _elem414 = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
              _elem414.read(iprot);
              struct.schoolJobs.add(_elem414);
            }
          }
          struct.setSchoolJobsIsSet(true);
        }
      }
    }

  }

  public static class delSchoolJobs_result implements org.apache.thrift.TBase<delSchoolJobs_result, delSchoolJobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<delSchoolJobs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSchoolJobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSchoolJobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSchoolJobs_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSchoolJobs_result.class, metaDataMap);
    }

    public delSchoolJobs_result() {
    }

    public delSchoolJobs_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSchoolJobs_result(delSchoolJobs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delSchoolJobs_result deepCopy() {
      return new delSchoolJobs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delSchoolJobs_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSchoolJobs_result)
        return this.equals((delSchoolJobs_result)that);
      return false;
    }

    public boolean equals(delSchoolJobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSchoolJobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSchoolJobs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSchoolJobs_resultStandardSchemeFactory implements SchemeFactory {
      public delSchoolJobs_resultStandardScheme getScheme() {
        return new delSchoolJobs_resultStandardScheme();
      }
    }

    private static class delSchoolJobs_resultStandardScheme extends StandardScheme<delSchoolJobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSchoolJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSchoolJobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSchoolJobs_resultTupleSchemeFactory implements SchemeFactory {
      public delSchoolJobs_resultTupleScheme getScheme() {
        return new delSchoolJobs_resultTupleScheme();
      }
    }

    private static class delSchoolJobs_resultTupleScheme extends TupleScheme<delSchoolJobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSchoolJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSchoolJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postSchoolJob_args implements org.apache.thrift.TBase<postSchoolJob_args, postSchoolJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<postSchoolJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSchoolJob_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolJob", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSchoolJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSchoolJob_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_JOB((short)1, "schoolJob");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_JOB
            return SCHOOL_JOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_JOB, new org.apache.thrift.meta_data.FieldMetaData("schoolJob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.SchoolJob.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSchoolJob_args.class, metaDataMap);
    }

    public postSchoolJob_args() {
    }

    public postSchoolJob_args(
      com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob)
    {
      this();
      this.schoolJob = schoolJob;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSchoolJob_args(postSchoolJob_args other) {
      if (other.isSetSchoolJob()) {
        this.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob(other.schoolJob);
      }
    }

    public postSchoolJob_args deepCopy() {
      return new postSchoolJob_args(this);
    }

    @Override
    public void clear() {
      this.schoolJob = null;
    }

    public com.moseeker.thrift.gen.profile.struct.SchoolJob getSchoolJob() {
      return this.schoolJob;
    }

    public postSchoolJob_args setSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) {
      this.schoolJob = schoolJob;
      return this;
    }

    public void unsetSchoolJob() {
      this.schoolJob = null;
    }

    /** Returns true if field schoolJob is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolJob() {
      return this.schoolJob != null;
    }

    public void setSchoolJobIsSet(boolean value) {
      if (!value) {
        this.schoolJob = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHOOL_JOB:
        if (value == null) {
          unsetSchoolJob();
        } else {
          setSchoolJob((com.moseeker.thrift.gen.profile.struct.SchoolJob)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_JOB:
        return getSchoolJob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_JOB:
        return isSetSchoolJob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSchoolJob_args)
        return this.equals((postSchoolJob_args)that);
      return false;
    }

    public boolean equals(postSchoolJob_args that) {
      if (that == null)
        return false;

      boolean this_present_schoolJob = true && this.isSetSchoolJob();
      boolean that_present_schoolJob = true && that.isSetSchoolJob();
      if (this_present_schoolJob || that_present_schoolJob) {
        if (!(this_present_schoolJob && that_present_schoolJob))
          return false;
        if (!this.schoolJob.equals(that.schoolJob))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_schoolJob = true && (isSetSchoolJob());
      list.add(present_schoolJob);
      if (present_schoolJob)
        list.add(schoolJob);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSchoolJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchoolJob()).compareTo(other.isSetSchoolJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolJob, other.schoolJob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSchoolJob_args(");
      boolean first = true;

      sb.append("schoolJob:");
      if (this.schoolJob == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolJob);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schoolJob != null) {
        schoolJob.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSchoolJob_argsStandardSchemeFactory implements SchemeFactory {
      public postSchoolJob_argsStandardScheme getScheme() {
        return new postSchoolJob_argsStandardScheme();
      }
    }

    private static class postSchoolJob_argsStandardScheme extends StandardScheme<postSchoolJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSchoolJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
                struct.schoolJob.read(iprot);
                struct.setSchoolJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSchoolJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolJob != null) {
          oprot.writeFieldBegin(SCHOOL_JOB_FIELD_DESC);
          struct.schoolJob.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSchoolJob_argsTupleSchemeFactory implements SchemeFactory {
      public postSchoolJob_argsTupleScheme getScheme() {
        return new postSchoolJob_argsTupleScheme();
      }
    }

    private static class postSchoolJob_argsTupleScheme extends TupleScheme<postSchoolJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSchoolJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchoolJob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolJob()) {
          struct.schoolJob.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSchoolJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
          struct.schoolJob.read(iprot);
          struct.setSchoolJobIsSet(true);
        }
      }
    }

  }

  public static class postSchoolJob_result implements org.apache.thrift.TBase<postSchoolJob_result, postSchoolJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<postSchoolJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSchoolJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSchoolJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSchoolJob_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSchoolJob_result.class, metaDataMap);
    }

    public postSchoolJob_result() {
    }

    public postSchoolJob_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSchoolJob_result(postSchoolJob_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postSchoolJob_result deepCopy() {
      return new postSchoolJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postSchoolJob_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSchoolJob_result)
        return this.equals((postSchoolJob_result)that);
      return false;
    }

    public boolean equals(postSchoolJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSchoolJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSchoolJob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSchoolJob_resultStandardSchemeFactory implements SchemeFactory {
      public postSchoolJob_resultStandardScheme getScheme() {
        return new postSchoolJob_resultStandardScheme();
      }
    }

    private static class postSchoolJob_resultStandardScheme extends StandardScheme<postSchoolJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSchoolJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSchoolJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSchoolJob_resultTupleSchemeFactory implements SchemeFactory {
      public postSchoolJob_resultTupleScheme getScheme() {
        return new postSchoolJob_resultTupleScheme();
      }
    }

    private static class postSchoolJob_resultTupleScheme extends TupleScheme<postSchoolJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSchoolJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSchoolJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putSchoolJob_args implements org.apache.thrift.TBase<putSchoolJob_args, putSchoolJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<putSchoolJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putSchoolJob_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolJob", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putSchoolJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putSchoolJob_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_JOB((short)1, "schoolJob");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_JOB
            return SCHOOL_JOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_JOB, new org.apache.thrift.meta_data.FieldMetaData("schoolJob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.SchoolJob.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putSchoolJob_args.class, metaDataMap);
    }

    public putSchoolJob_args() {
    }

    public putSchoolJob_args(
      com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob)
    {
      this();
      this.schoolJob = schoolJob;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putSchoolJob_args(putSchoolJob_args other) {
      if (other.isSetSchoolJob()) {
        this.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob(other.schoolJob);
      }
    }

    public putSchoolJob_args deepCopy() {
      return new putSchoolJob_args(this);
    }

    @Override
    public void clear() {
      this.schoolJob = null;
    }

    public com.moseeker.thrift.gen.profile.struct.SchoolJob getSchoolJob() {
      return this.schoolJob;
    }

    public putSchoolJob_args setSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) {
      this.schoolJob = schoolJob;
      return this;
    }

    public void unsetSchoolJob() {
      this.schoolJob = null;
    }

    /** Returns true if field schoolJob is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolJob() {
      return this.schoolJob != null;
    }

    public void setSchoolJobIsSet(boolean value) {
      if (!value) {
        this.schoolJob = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHOOL_JOB:
        if (value == null) {
          unsetSchoolJob();
        } else {
          setSchoolJob((com.moseeker.thrift.gen.profile.struct.SchoolJob)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_JOB:
        return getSchoolJob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_JOB:
        return isSetSchoolJob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putSchoolJob_args)
        return this.equals((putSchoolJob_args)that);
      return false;
    }

    public boolean equals(putSchoolJob_args that) {
      if (that == null)
        return false;

      boolean this_present_schoolJob = true && this.isSetSchoolJob();
      boolean that_present_schoolJob = true && that.isSetSchoolJob();
      if (this_present_schoolJob || that_present_schoolJob) {
        if (!(this_present_schoolJob && that_present_schoolJob))
          return false;
        if (!this.schoolJob.equals(that.schoolJob))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_schoolJob = true && (isSetSchoolJob());
      list.add(present_schoolJob);
      if (present_schoolJob)
        list.add(schoolJob);

      return list.hashCode();
    }

    @Override
    public int compareTo(putSchoolJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchoolJob()).compareTo(other.isSetSchoolJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolJob, other.schoolJob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putSchoolJob_args(");
      boolean first = true;

      sb.append("schoolJob:");
      if (this.schoolJob == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolJob);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schoolJob != null) {
        schoolJob.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putSchoolJob_argsStandardSchemeFactory implements SchemeFactory {
      public putSchoolJob_argsStandardScheme getScheme() {
        return new putSchoolJob_argsStandardScheme();
      }
    }

    private static class putSchoolJob_argsStandardScheme extends StandardScheme<putSchoolJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putSchoolJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
                struct.schoolJob.read(iprot);
                struct.setSchoolJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putSchoolJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolJob != null) {
          oprot.writeFieldBegin(SCHOOL_JOB_FIELD_DESC);
          struct.schoolJob.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putSchoolJob_argsTupleSchemeFactory implements SchemeFactory {
      public putSchoolJob_argsTupleScheme getScheme() {
        return new putSchoolJob_argsTupleScheme();
      }
    }

    private static class putSchoolJob_argsTupleScheme extends TupleScheme<putSchoolJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putSchoolJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchoolJob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolJob()) {
          struct.schoolJob.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putSchoolJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
          struct.schoolJob.read(iprot);
          struct.setSchoolJobIsSet(true);
        }
      }
    }

  }

  public static class putSchoolJob_result implements org.apache.thrift.TBase<putSchoolJob_result, putSchoolJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<putSchoolJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putSchoolJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putSchoolJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putSchoolJob_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putSchoolJob_result.class, metaDataMap);
    }

    public putSchoolJob_result() {
    }

    public putSchoolJob_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putSchoolJob_result(putSchoolJob_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putSchoolJob_result deepCopy() {
      return new putSchoolJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putSchoolJob_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putSchoolJob_result)
        return this.equals((putSchoolJob_result)that);
      return false;
    }

    public boolean equals(putSchoolJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putSchoolJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putSchoolJob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putSchoolJob_resultStandardSchemeFactory implements SchemeFactory {
      public putSchoolJob_resultStandardScheme getScheme() {
        return new putSchoolJob_resultStandardScheme();
      }
    }

    private static class putSchoolJob_resultStandardScheme extends StandardScheme<putSchoolJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putSchoolJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putSchoolJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putSchoolJob_resultTupleSchemeFactory implements SchemeFactory {
      public putSchoolJob_resultTupleScheme getScheme() {
        return new putSchoolJob_resultTupleScheme();
      }
    }

    private static class putSchoolJob_resultTupleScheme extends TupleScheme<putSchoolJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putSchoolJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putSchoolJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delSchoolJob_args implements org.apache.thrift.TBase<delSchoolJob_args, delSchoolJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<delSchoolJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSchoolJob_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolJob", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSchoolJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSchoolJob_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_JOB((short)1, "schoolJob");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_JOB
            return SCHOOL_JOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_JOB, new org.apache.thrift.meta_data.FieldMetaData("schoolJob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.SchoolJob.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSchoolJob_args.class, metaDataMap);
    }

    public delSchoolJob_args() {
    }

    public delSchoolJob_args(
      com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob)
    {
      this();
      this.schoolJob = schoolJob;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSchoolJob_args(delSchoolJob_args other) {
      if (other.isSetSchoolJob()) {
        this.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob(other.schoolJob);
      }
    }

    public delSchoolJob_args deepCopy() {
      return new delSchoolJob_args(this);
    }

    @Override
    public void clear() {
      this.schoolJob = null;
    }

    public com.moseeker.thrift.gen.profile.struct.SchoolJob getSchoolJob() {
      return this.schoolJob;
    }

    public delSchoolJob_args setSchoolJob(com.moseeker.thrift.gen.profile.struct.SchoolJob schoolJob) {
      this.schoolJob = schoolJob;
      return this;
    }

    public void unsetSchoolJob() {
      this.schoolJob = null;
    }

    /** Returns true if field schoolJob is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolJob() {
      return this.schoolJob != null;
    }

    public void setSchoolJobIsSet(boolean value) {
      if (!value) {
        this.schoolJob = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHOOL_JOB:
        if (value == null) {
          unsetSchoolJob();
        } else {
          setSchoolJob((com.moseeker.thrift.gen.profile.struct.SchoolJob)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_JOB:
        return getSchoolJob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_JOB:
        return isSetSchoolJob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSchoolJob_args)
        return this.equals((delSchoolJob_args)that);
      return false;
    }

    public boolean equals(delSchoolJob_args that) {
      if (that == null)
        return false;

      boolean this_present_schoolJob = true && this.isSetSchoolJob();
      boolean that_present_schoolJob = true && that.isSetSchoolJob();
      if (this_present_schoolJob || that_present_schoolJob) {
        if (!(this_present_schoolJob && that_present_schoolJob))
          return false;
        if (!this.schoolJob.equals(that.schoolJob))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_schoolJob = true && (isSetSchoolJob());
      list.add(present_schoolJob);
      if (present_schoolJob)
        list.add(schoolJob);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSchoolJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSchoolJob()).compareTo(other.isSetSchoolJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolJob, other.schoolJob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSchoolJob_args(");
      boolean first = true;

      sb.append("schoolJob:");
      if (this.schoolJob == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolJob);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schoolJob != null) {
        schoolJob.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSchoolJob_argsStandardSchemeFactory implements SchemeFactory {
      public delSchoolJob_argsStandardScheme getScheme() {
        return new delSchoolJob_argsStandardScheme();
      }
    }

    private static class delSchoolJob_argsStandardScheme extends StandardScheme<delSchoolJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSchoolJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
                struct.schoolJob.read(iprot);
                struct.setSchoolJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSchoolJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolJob != null) {
          oprot.writeFieldBegin(SCHOOL_JOB_FIELD_DESC);
          struct.schoolJob.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSchoolJob_argsTupleSchemeFactory implements SchemeFactory {
      public delSchoolJob_argsTupleScheme getScheme() {
        return new delSchoolJob_argsTupleScheme();
      }
    }

    private static class delSchoolJob_argsTupleScheme extends TupleScheme<delSchoolJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSchoolJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchoolJob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolJob()) {
          struct.schoolJob.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSchoolJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolJob = new com.moseeker.thrift.gen.profile.struct.SchoolJob();
          struct.schoolJob.read(iprot);
          struct.setSchoolJobIsSet(true);
        }
      }
    }

  }

  public static class delSchoolJob_result implements org.apache.thrift.TBase<delSchoolJob_result, delSchoolJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<delSchoolJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSchoolJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSchoolJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSchoolJob_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSchoolJob_result.class, metaDataMap);
    }

    public delSchoolJob_result() {
    }

    public delSchoolJob_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSchoolJob_result(delSchoolJob_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delSchoolJob_result deepCopy() {
      return new delSchoolJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delSchoolJob_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSchoolJob_result)
        return this.equals((delSchoolJob_result)that);
      return false;
    }

    public boolean equals(delSchoolJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSchoolJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSchoolJob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSchoolJob_resultStandardSchemeFactory implements SchemeFactory {
      public delSchoolJob_resultStandardScheme getScheme() {
        return new delSchoolJob_resultStandardScheme();
      }
    }

    private static class delSchoolJob_resultStandardScheme extends StandardScheme<delSchoolJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSchoolJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSchoolJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSchoolJob_resultTupleSchemeFactory implements SchemeFactory {
      public delSchoolJob_resultTupleScheme getScheme() {
        return new delSchoolJob_resultTupleScheme();
      }
    }

    private static class delSchoolJob_resultTupleScheme extends TupleScheme<delSchoolJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSchoolJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSchoolJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
