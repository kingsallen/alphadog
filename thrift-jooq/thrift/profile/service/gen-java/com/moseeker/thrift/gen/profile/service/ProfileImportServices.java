/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-29")
public class ProfileImportServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> getProfileImports(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProfileImportPagination getProfileImportPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException;

    public int postProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException;

    public int putProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException;

    public int delProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException;

    public int postProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException;

    public int putProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException;

    public int delProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getProfileImports(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileImportPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> getProfileImports(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      send_getProfileImports(query, profileImport);
      return recv_getProfileImports();
    }

    public void send_getProfileImports(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      getProfileImports_args args = new getProfileImports_args();
      args.setQuery(query);
      args.setProfileImport(profileImport);
      sendBase("getProfileImports", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> recv_getProfileImports() throws org.apache.thrift.TException
    {
      getProfileImports_result result = new getProfileImports_result();
      receiveBase(result, "getProfileImports");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileImports failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImportPagination getProfileImportPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      send_getProfileImportPagination(query, profileImport);
      return recv_getProfileImportPagination();
    }

    public void send_getProfileImportPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      getProfileImportPagination_args args = new getProfileImportPagination_args();
      args.setQuery(query);
      args.setProfileImport(profileImport);
      sendBase("getProfileImportPagination", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImportPagination recv_getProfileImportPagination() throws org.apache.thrift.TException
    {
      getProfileImportPagination_result result = new getProfileImportPagination_result();
      receiveBase(result, "getProfileImportPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileImportPagination failed: unknown result");
    }

    public int postProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException
    {
      send_postProfileImports(profileImports);
      return recv_postProfileImports();
    }

    public void send_postProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException
    {
      postProfileImports_args args = new postProfileImports_args();
      args.setProfileImports(profileImports);
      sendBase("postProfileImports", args);
    }

    public int recv_postProfileImports() throws org.apache.thrift.TException
    {
      postProfileImports_result result = new postProfileImports_result();
      receiveBase(result, "postProfileImports");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postProfileImports failed: unknown result");
    }

    public int putProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException
    {
      send_putProfileImports(profileImports);
      return recv_putProfileImports();
    }

    public void send_putProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException
    {
      putProfileImports_args args = new putProfileImports_args();
      args.setProfileImports(profileImports);
      sendBase("putProfileImports", args);
    }

    public int recv_putProfileImports() throws org.apache.thrift.TException
    {
      putProfileImports_result result = new putProfileImports_result();
      receiveBase(result, "putProfileImports");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putProfileImports failed: unknown result");
    }

    public int delProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException
    {
      send_delProfileImports(profileImports);
      return recv_delProfileImports();
    }

    public void send_delProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) throws org.apache.thrift.TException
    {
      delProfileImports_args args = new delProfileImports_args();
      args.setProfileImports(profileImports);
      sendBase("delProfileImports", args);
    }

    public int recv_delProfileImports() throws org.apache.thrift.TException
    {
      delProfileImports_result result = new delProfileImports_result();
      receiveBase(result, "delProfileImports");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delProfileImports failed: unknown result");
    }

    public int postProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      send_postProfileImport(profileImport);
      return recv_postProfileImport();
    }

    public void send_postProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      postProfileImport_args args = new postProfileImport_args();
      args.setProfileImport(profileImport);
      sendBase("postProfileImport", args);
    }

    public int recv_postProfileImport() throws org.apache.thrift.TException
    {
      postProfileImport_result result = new postProfileImport_result();
      receiveBase(result, "postProfileImport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postProfileImport failed: unknown result");
    }

    public int putProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      send_putProfileImport(profileImport);
      return recv_putProfileImport();
    }

    public void send_putProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      putProfileImport_args args = new putProfileImport_args();
      args.setProfileImport(profileImport);
      sendBase("putProfileImport", args);
    }

    public int recv_putProfileImport() throws org.apache.thrift.TException
    {
      putProfileImport_result result = new putProfileImport_result();
      receiveBase(result, "putProfileImport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putProfileImport failed: unknown result");
    }

    public int delProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      send_delProfileImport(profileImport);
      return recv_delProfileImport();
    }

    public void send_delProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) throws org.apache.thrift.TException
    {
      delProfileImport_args args = new delProfileImport_args();
      args.setProfileImport(profileImport);
      sendBase("delProfileImport", args);
    }

    public int recv_delProfileImport() throws org.apache.thrift.TException
    {
      delProfileImport_result result = new delProfileImport_result();
      receiveBase(result, "delProfileImport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delProfileImport failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getProfileImports(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileImports_call method_call = new getProfileImports_call(query, profileImport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileImports_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport;
      public getProfileImports_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.profileImport = profileImport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileImports", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileImports_args args = new getProfileImports_args();
        args.setQuery(query);
        args.setProfileImport(profileImport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileImports();
      }
    }

    public void getProfileImportPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileImportPagination_call method_call = new getProfileImportPagination_call(query, profileImport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileImportPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport;
      public getProfileImportPagination_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.profileImport = profileImport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileImportPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileImportPagination_args args = new getProfileImportPagination_args();
        args.setQuery(query);
        args.setProfileImport(profileImport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProfileImportPagination getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileImportPagination();
      }
    }

    public void postProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postProfileImports_call method_call = new postProfileImports_call(profileImports, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postProfileImports_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports;
      public postProfileImports_call(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileImports = profileImports;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postProfileImports", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postProfileImports_args args = new postProfileImports_args();
        args.setProfileImports(profileImports);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postProfileImports();
      }
    }

    public void putProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putProfileImports_call method_call = new putProfileImports_call(profileImports, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putProfileImports_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports;
      public putProfileImports_call(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileImports = profileImports;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putProfileImports", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putProfileImports_args args = new putProfileImports_args();
        args.setProfileImports(profileImports);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putProfileImports();
      }
    }

    public void delProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delProfileImports_call method_call = new delProfileImports_call(profileImports, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delProfileImports_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports;
      public delProfileImports_call(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileImports = profileImports;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delProfileImports", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delProfileImports_args args = new delProfileImports_args();
        args.setProfileImports(profileImports);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delProfileImports();
      }
    }

    public void postProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postProfileImport_call method_call = new postProfileImport_call(profileImport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postProfileImport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport;
      public postProfileImport_call(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileImport = profileImport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postProfileImport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postProfileImport_args args = new postProfileImport_args();
        args.setProfileImport(profileImport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postProfileImport();
      }
    }

    public void putProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putProfileImport_call method_call = new putProfileImport_call(profileImport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putProfileImport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport;
      public putProfileImport_call(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileImport = profileImport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putProfileImport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putProfileImport_args args = new putProfileImport_args();
        args.setProfileImport(profileImport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putProfileImport();
      }
    }

    public void delProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delProfileImport_call method_call = new delProfileImport_call(profileImport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delProfileImport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport;
      public delProfileImport_call(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileImport = profileImport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delProfileImport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delProfileImport_args args = new delProfileImport_args();
        args.setProfileImport(profileImport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delProfileImport();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getProfileImports", new getProfileImports());
      processMap.put("getProfileImportPagination", new getProfileImportPagination());
      processMap.put("postProfileImports", new postProfileImports());
      processMap.put("putProfileImports", new putProfileImports());
      processMap.put("delProfileImports", new delProfileImports());
      processMap.put("postProfileImport", new postProfileImport());
      processMap.put("putProfileImport", new putProfileImport());
      processMap.put("delProfileImport", new delProfileImport());
      return processMap;
    }

    public static class getProfileImports<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileImports_args> {
      public getProfileImports() {
        super("getProfileImports");
      }

      public getProfileImports_args getEmptyArgsInstance() {
        return new getProfileImports_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileImports_result getResult(I iface, getProfileImports_args args) throws org.apache.thrift.TException {
        getProfileImports_result result = new getProfileImports_result();
        result.success = iface.getProfileImports(args.query, args.profileImport);
        return result;
      }
    }

    public static class getProfileImportPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileImportPagination_args> {
      public getProfileImportPagination() {
        super("getProfileImportPagination");
      }

      public getProfileImportPagination_args getEmptyArgsInstance() {
        return new getProfileImportPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileImportPagination_result getResult(I iface, getProfileImportPagination_args args) throws org.apache.thrift.TException {
        getProfileImportPagination_result result = new getProfileImportPagination_result();
        result.success = iface.getProfileImportPagination(args.query, args.profileImport);
        return result;
      }
    }

    public static class postProfileImports<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postProfileImports_args> {
      public postProfileImports() {
        super("postProfileImports");
      }

      public postProfileImports_args getEmptyArgsInstance() {
        return new postProfileImports_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postProfileImports_result getResult(I iface, postProfileImports_args args) throws org.apache.thrift.TException {
        postProfileImports_result result = new postProfileImports_result();
        result.success = iface.postProfileImports(args.profileImports);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putProfileImports<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putProfileImports_args> {
      public putProfileImports() {
        super("putProfileImports");
      }

      public putProfileImports_args getEmptyArgsInstance() {
        return new putProfileImports_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putProfileImports_result getResult(I iface, putProfileImports_args args) throws org.apache.thrift.TException {
        putProfileImports_result result = new putProfileImports_result();
        result.success = iface.putProfileImports(args.profileImports);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delProfileImports<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delProfileImports_args> {
      public delProfileImports() {
        super("delProfileImports");
      }

      public delProfileImports_args getEmptyArgsInstance() {
        return new delProfileImports_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delProfileImports_result getResult(I iface, delProfileImports_args args) throws org.apache.thrift.TException {
        delProfileImports_result result = new delProfileImports_result();
        result.success = iface.delProfileImports(args.profileImports);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postProfileImport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postProfileImport_args> {
      public postProfileImport() {
        super("postProfileImport");
      }

      public postProfileImport_args getEmptyArgsInstance() {
        return new postProfileImport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postProfileImport_result getResult(I iface, postProfileImport_args args) throws org.apache.thrift.TException {
        postProfileImport_result result = new postProfileImport_result();
        result.success = iface.postProfileImport(args.profileImport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putProfileImport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putProfileImport_args> {
      public putProfileImport() {
        super("putProfileImport");
      }

      public putProfileImport_args getEmptyArgsInstance() {
        return new putProfileImport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putProfileImport_result getResult(I iface, putProfileImport_args args) throws org.apache.thrift.TException {
        putProfileImport_result result = new putProfileImport_result();
        result.success = iface.putProfileImport(args.profileImport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delProfileImport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delProfileImport_args> {
      public delProfileImport() {
        super("delProfileImport");
      }

      public delProfileImport_args getEmptyArgsInstance() {
        return new delProfileImport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delProfileImport_result getResult(I iface, delProfileImport_args args) throws org.apache.thrift.TException {
        delProfileImport_result result = new delProfileImport_result();
        result.success = iface.delProfileImport(args.profileImport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getProfileImports", new getProfileImports());
      processMap.put("getProfileImportPagination", new getProfileImportPagination());
      processMap.put("postProfileImports", new postProfileImports());
      processMap.put("putProfileImports", new putProfileImports());
      processMap.put("delProfileImports", new delProfileImports());
      processMap.put("postProfileImport", new postProfileImport());
      processMap.put("putProfileImport", new putProfileImport());
      processMap.put("delProfileImport", new delProfileImport());
      return processMap;
    }

    public static class getProfileImports<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileImports_args, List<com.moseeker.thrift.gen.profile.struct.ProfileImport>> {
      public getProfileImports() {
        super("getProfileImports");
      }

      public getProfileImports_args getEmptyArgsInstance() {
        return new getProfileImports_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProfileImport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProfileImport>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> o) {
            getProfileImports_result result = new getProfileImports_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileImports_result result = new getProfileImports_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileImports_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.ProfileImport>> resultHandler) throws TException {
        iface.getProfileImports(args.query, args.profileImport,resultHandler);
      }
    }

    public static class getProfileImportPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileImportPagination_args, com.moseeker.thrift.gen.profile.struct.ProfileImportPagination> {
      public getProfileImportPagination() {
        super("getProfileImportPagination");
      }

      public getProfileImportPagination_args getEmptyArgsInstance() {
        return new getProfileImportPagination_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileImportPagination> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileImportPagination>() { 
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProfileImportPagination o) {
            getProfileImportPagination_result result = new getProfileImportPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileImportPagination_result result = new getProfileImportPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileImportPagination_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileImportPagination> resultHandler) throws TException {
        iface.getProfileImportPagination(args.query, args.profileImport,resultHandler);
      }
    }

    public static class postProfileImports<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postProfileImports_args, Integer> {
      public postProfileImports() {
        super("postProfileImports");
      }

      public postProfileImports_args getEmptyArgsInstance() {
        return new postProfileImports_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postProfileImports_result result = new postProfileImports_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postProfileImports_result result = new postProfileImports_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postProfileImports_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postProfileImports(args.profileImports,resultHandler);
      }
    }

    public static class putProfileImports<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putProfileImports_args, Integer> {
      public putProfileImports() {
        super("putProfileImports");
      }

      public putProfileImports_args getEmptyArgsInstance() {
        return new putProfileImports_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putProfileImports_result result = new putProfileImports_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putProfileImports_result result = new putProfileImports_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putProfileImports_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putProfileImports(args.profileImports,resultHandler);
      }
    }

    public static class delProfileImports<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delProfileImports_args, Integer> {
      public delProfileImports() {
        super("delProfileImports");
      }

      public delProfileImports_args getEmptyArgsInstance() {
        return new delProfileImports_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delProfileImports_result result = new delProfileImports_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delProfileImports_result result = new delProfileImports_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delProfileImports_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delProfileImports(args.profileImports,resultHandler);
      }
    }

    public static class postProfileImport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postProfileImport_args, Integer> {
      public postProfileImport() {
        super("postProfileImport");
      }

      public postProfileImport_args getEmptyArgsInstance() {
        return new postProfileImport_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postProfileImport_result result = new postProfileImport_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postProfileImport_result result = new postProfileImport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postProfileImport_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postProfileImport(args.profileImport,resultHandler);
      }
    }

    public static class putProfileImport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putProfileImport_args, Integer> {
      public putProfileImport() {
        super("putProfileImport");
      }

      public putProfileImport_args getEmptyArgsInstance() {
        return new putProfileImport_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putProfileImport_result result = new putProfileImport_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putProfileImport_result result = new putProfileImport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putProfileImport_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putProfileImport(args.profileImport,resultHandler);
      }
    }

    public static class delProfileImport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delProfileImport_args, Integer> {
      public delProfileImport() {
        super("delProfileImport");
      }

      public delProfileImport_args getEmptyArgsInstance() {
        return new delProfileImport_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delProfileImport_result result = new delProfileImport_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delProfileImport_result result = new delProfileImport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delProfileImport_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delProfileImport(args.profileImport,resultHandler);
      }
    }

  }

  public static class getProfileImports_args implements org.apache.thrift.TBase<getProfileImports_args, getProfileImports_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileImports_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileImports_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROFILE_IMPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImport", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileImports_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileImports_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      PROFILE_IMPORT((short)2, "profileImport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // PROFILE_IMPORT
            return PROFILE_IMPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.PROFILE_IMPORT, new org.apache.thrift.meta_data.FieldMetaData("profileImport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileImports_args.class, metaDataMap);
    }

    public getProfileImports_args() {
    }

    public getProfileImports_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport)
    {
      this();
      this.query = query;
      this.profileImport = profileImport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileImports_args(getProfileImports_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetProfileImport()) {
        this.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport(other.profileImport);
      }
    }

    public getProfileImports_args deepCopy() {
      return new getProfileImports_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.profileImport = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getProfileImports_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImport getProfileImport() {
      return this.profileImport;
    }

    public getProfileImports_args setProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) {
      this.profileImport = profileImport;
      return this;
    }

    public void unsetProfileImport() {
      this.profileImport = null;
    }

    /** Returns true if field profileImport is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileImport() {
      return this.profileImport != null;
    }

    public void setProfileImportIsSet(boolean value) {
      if (!value) {
        this.profileImport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case PROFILE_IMPORT:
        if (value == null) {
          unsetProfileImport();
        } else {
          setProfileImport((com.moseeker.thrift.gen.profile.struct.ProfileImport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case PROFILE_IMPORT:
        return getProfileImport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case PROFILE_IMPORT:
        return isSetProfileImport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileImports_args)
        return this.equals((getProfileImports_args)that);
      return false;
    }

    public boolean equals(getProfileImports_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_profileImport = true && this.isSetProfileImport();
      boolean that_present_profileImport = true && that.isSetProfileImport();
      if (this_present_profileImport || that_present_profileImport) {
        if (!(this_present_profileImport && that_present_profileImport))
          return false;
        if (!this.profileImport.equals(that.profileImport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_profileImport = true && (isSetProfileImport());
      list.add(present_profileImport);
      if (present_profileImport)
        list.add(profileImport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileImports_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProfileImport()).compareTo(other.isSetProfileImport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileImport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImport, other.profileImport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileImports_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("profileImport:");
      if (this.profileImport == null) {
        sb.append("null");
      } else {
        sb.append(this.profileImport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (profileImport != null) {
        profileImport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileImports_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileImports_argsStandardScheme getScheme() {
        return new getProfileImports_argsStandardScheme();
      }
    }

    private static class getProfileImports_argsStandardScheme extends StandardScheme<getProfileImports_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileImports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROFILE_IMPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                struct.profileImport.read(iprot);
                struct.setProfileImportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileImports_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.profileImport != null) {
          oprot.writeFieldBegin(PROFILE_IMPORT_FIELD_DESC);
          struct.profileImport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileImports_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileImports_argsTupleScheme getScheme() {
        return new getProfileImports_argsTupleScheme();
      }
    }

    private static class getProfileImports_argsTupleScheme extends TupleScheme<getProfileImports_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileImports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetProfileImport()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetProfileImport()) {
          struct.profileImport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileImports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
          struct.profileImport.read(iprot);
          struct.setProfileImportIsSet(true);
        }
      }
    }

  }

  public static class getProfileImports_result implements org.apache.thrift.TBase<getProfileImports_result, getProfileImports_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileImports_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileImports_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileImports_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileImports_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileImports_result.class, metaDataMap);
    }

    public getProfileImports_result() {
    }

    public getProfileImports_result(
      List<com.moseeker.thrift.gen.profile.struct.ProfileImport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileImports_result(getProfileImports_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.ProfileImport> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.ProfileImport other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.ProfileImport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProfileImports_result deepCopy() {
      return new getProfileImports_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProfileImport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.ProfileImport elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> getSuccess() {
      return this.success;
    }

    public getProfileImports_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.ProfileImport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileImports_result)
        return this.equals((getProfileImports_result)that);
      return false;
    }

    public boolean equals(getProfileImports_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileImports_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileImports_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileImports_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileImports_resultStandardScheme getScheme() {
        return new getProfileImports_resultStandardScheme();
      }
    }

    private static class getProfileImports_resultStandardScheme extends StandardScheme<getProfileImports_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileImports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(_list192.size);
                  com.moseeker.thrift.gen.profile.struct.ProfileImport _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                    _elem193.read(iprot);
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileImports_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProfileImport _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileImports_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileImports_resultTupleScheme getScheme() {
        return new getProfileImports_resultTupleScheme();
      }
    }

    private static class getProfileImports_resultTupleScheme extends TupleScheme<getProfileImports_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileImports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.ProfileImport _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileImports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(_list197.size);
            com.moseeker.thrift.gen.profile.struct.ProfileImport _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
              _elem198.read(iprot);
              struct.success.add(_elem198);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProfileImportPagination_args implements org.apache.thrift.TBase<getProfileImportPagination_args, getProfileImportPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileImportPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileImportPagination_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROFILE_IMPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImport", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileImportPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileImportPagination_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      PROFILE_IMPORT((short)2, "profileImport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // PROFILE_IMPORT
            return PROFILE_IMPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.PROFILE_IMPORT, new org.apache.thrift.meta_data.FieldMetaData("profileImport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileImportPagination_args.class, metaDataMap);
    }

    public getProfileImportPagination_args() {
    }

    public getProfileImportPagination_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport)
    {
      this();
      this.query = query;
      this.profileImport = profileImport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileImportPagination_args(getProfileImportPagination_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetProfileImport()) {
        this.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport(other.profileImport);
      }
    }

    public getProfileImportPagination_args deepCopy() {
      return new getProfileImportPagination_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.profileImport = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getProfileImportPagination_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImport getProfileImport() {
      return this.profileImport;
    }

    public getProfileImportPagination_args setProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) {
      this.profileImport = profileImport;
      return this;
    }

    public void unsetProfileImport() {
      this.profileImport = null;
    }

    /** Returns true if field profileImport is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileImport() {
      return this.profileImport != null;
    }

    public void setProfileImportIsSet(boolean value) {
      if (!value) {
        this.profileImport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case PROFILE_IMPORT:
        if (value == null) {
          unsetProfileImport();
        } else {
          setProfileImport((com.moseeker.thrift.gen.profile.struct.ProfileImport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case PROFILE_IMPORT:
        return getProfileImport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case PROFILE_IMPORT:
        return isSetProfileImport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileImportPagination_args)
        return this.equals((getProfileImportPagination_args)that);
      return false;
    }

    public boolean equals(getProfileImportPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_profileImport = true && this.isSetProfileImport();
      boolean that_present_profileImport = true && that.isSetProfileImport();
      if (this_present_profileImport || that_present_profileImport) {
        if (!(this_present_profileImport && that_present_profileImport))
          return false;
        if (!this.profileImport.equals(that.profileImport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_profileImport = true && (isSetProfileImport());
      list.add(present_profileImport);
      if (present_profileImport)
        list.add(profileImport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileImportPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProfileImport()).compareTo(other.isSetProfileImport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileImport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImport, other.profileImport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileImportPagination_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("profileImport:");
      if (this.profileImport == null) {
        sb.append("null");
      } else {
        sb.append(this.profileImport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (profileImport != null) {
        profileImport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileImportPagination_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileImportPagination_argsStandardScheme getScheme() {
        return new getProfileImportPagination_argsStandardScheme();
      }
    }

    private static class getProfileImportPagination_argsStandardScheme extends StandardScheme<getProfileImportPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileImportPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROFILE_IMPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                struct.profileImport.read(iprot);
                struct.setProfileImportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileImportPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.profileImport != null) {
          oprot.writeFieldBegin(PROFILE_IMPORT_FIELD_DESC);
          struct.profileImport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileImportPagination_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileImportPagination_argsTupleScheme getScheme() {
        return new getProfileImportPagination_argsTupleScheme();
      }
    }

    private static class getProfileImportPagination_argsTupleScheme extends TupleScheme<getProfileImportPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileImportPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetProfileImport()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetProfileImport()) {
          struct.profileImport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileImportPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
          struct.profileImport.read(iprot);
          struct.setProfileImportIsSet(true);
        }
      }
    }

  }

  public static class getProfileImportPagination_result implements org.apache.thrift.TBase<getProfileImportPagination_result, getProfileImportPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileImportPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileImportPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileImportPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileImportPagination_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImportPagination success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImportPagination.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileImportPagination_result.class, metaDataMap);
    }

    public getProfileImportPagination_result() {
    }

    public getProfileImportPagination_result(
      com.moseeker.thrift.gen.profile.struct.ProfileImportPagination success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileImportPagination_result(getProfileImportPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProfileImportPagination(other.success);
      }
    }

    public getProfileImportPagination_result deepCopy() {
      return new getProfileImportPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImportPagination getSuccess() {
      return this.success;
    }

    public getProfileImportPagination_result setSuccess(com.moseeker.thrift.gen.profile.struct.ProfileImportPagination success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProfileImportPagination)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileImportPagination_result)
        return this.equals((getProfileImportPagination_result)that);
      return false;
    }

    public boolean equals(getProfileImportPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileImportPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileImportPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileImportPagination_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileImportPagination_resultStandardScheme getScheme() {
        return new getProfileImportPagination_resultStandardScheme();
      }
    }

    private static class getProfileImportPagination_resultStandardScheme extends StandardScheme<getProfileImportPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileImportPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileImportPagination();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileImportPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileImportPagination_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileImportPagination_resultTupleScheme getScheme() {
        return new getProfileImportPagination_resultTupleScheme();
      }
    }

    private static class getProfileImportPagination_resultTupleScheme extends TupleScheme<getProfileImportPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileImportPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileImportPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileImportPagination();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postProfileImports_args implements org.apache.thrift.TBase<postProfileImports_args, postProfileImports_args._Fields>, java.io.Serializable, Cloneable, Comparable<postProfileImports_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProfileImports_args");

    private static final org.apache.thrift.protocol.TField PROFILE_IMPORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImports", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProfileImports_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProfileImports_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_IMPORTS((short)1, "profileImports");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_IMPORTS
            return PROFILE_IMPORTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_IMPORTS, new org.apache.thrift.meta_data.FieldMetaData("profileImports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProfileImports_args.class, metaDataMap);
    }

    public postProfileImports_args() {
    }

    public postProfileImports_args(
      List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports)
    {
      this();
      this.profileImports = profileImports;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProfileImports_args(postProfileImports_args other) {
      if (other.isSetProfileImports()) {
        List<com.moseeker.thrift.gen.profile.struct.ProfileImport> __this__profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(other.profileImports.size());
        for (com.moseeker.thrift.gen.profile.struct.ProfileImport other_element : other.profileImports) {
          __this__profileImports.add(new com.moseeker.thrift.gen.profile.struct.ProfileImport(other_element));
        }
        this.profileImports = __this__profileImports;
      }
    }

    public postProfileImports_args deepCopy() {
      return new postProfileImports_args(this);
    }

    @Override
    public void clear() {
      this.profileImports = null;
    }

    public int getProfileImportsSize() {
      return (this.profileImports == null) ? 0 : this.profileImports.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProfileImport> getProfileImportsIterator() {
      return (this.profileImports == null) ? null : this.profileImports.iterator();
    }

    public void addToProfileImports(com.moseeker.thrift.gen.profile.struct.ProfileImport elem) {
      if (this.profileImports == null) {
        this.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>();
      }
      this.profileImports.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> getProfileImports() {
      return this.profileImports;
    }

    public postProfileImports_args setProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) {
      this.profileImports = profileImports;
      return this;
    }

    public void unsetProfileImports() {
      this.profileImports = null;
    }

    /** Returns true if field profileImports is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileImports() {
      return this.profileImports != null;
    }

    public void setProfileImportsIsSet(boolean value) {
      if (!value) {
        this.profileImports = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_IMPORTS:
        if (value == null) {
          unsetProfileImports();
        } else {
          setProfileImports((List<com.moseeker.thrift.gen.profile.struct.ProfileImport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_IMPORTS:
        return getProfileImports();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_IMPORTS:
        return isSetProfileImports();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProfileImports_args)
        return this.equals((postProfileImports_args)that);
      return false;
    }

    public boolean equals(postProfileImports_args that) {
      if (that == null)
        return false;

      boolean this_present_profileImports = true && this.isSetProfileImports();
      boolean that_present_profileImports = true && that.isSetProfileImports();
      if (this_present_profileImports || that_present_profileImports) {
        if (!(this_present_profileImports && that_present_profileImports))
          return false;
        if (!this.profileImports.equals(that.profileImports))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileImports = true && (isSetProfileImports());
      list.add(present_profileImports);
      if (present_profileImports)
        list.add(profileImports);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProfileImports_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileImports()).compareTo(other.isSetProfileImports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileImports()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImports, other.profileImports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProfileImports_args(");
      boolean first = true;

      sb.append("profileImports:");
      if (this.profileImports == null) {
        sb.append("null");
      } else {
        sb.append(this.profileImports);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProfileImports_argsStandardSchemeFactory implements SchemeFactory {
      public postProfileImports_argsStandardScheme getScheme() {
        return new postProfileImports_argsStandardScheme();
      }
    }

    private static class postProfileImports_argsStandardScheme extends StandardScheme<postProfileImports_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProfileImports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_IMPORTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(_list200.size);
                  com.moseeker.thrift.gen.profile.struct.ProfileImport _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                    _elem201.read(iprot);
                    struct.profileImports.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileImportsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProfileImports_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileImports != null) {
          oprot.writeFieldBegin(PROFILE_IMPORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileImports.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProfileImport _iter203 : struct.profileImports)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProfileImports_argsTupleSchemeFactory implements SchemeFactory {
      public postProfileImports_argsTupleScheme getScheme() {
        return new postProfileImports_argsTupleScheme();
      }
    }

    private static class postProfileImports_argsTupleScheme extends TupleScheme<postProfileImports_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProfileImports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileImports()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileImports()) {
          {
            oprot.writeI32(struct.profileImports.size());
            for (com.moseeker.thrift.gen.profile.struct.ProfileImport _iter204 : struct.profileImports)
            {
              _iter204.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProfileImports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(_list205.size);
            com.moseeker.thrift.gen.profile.struct.ProfileImport _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
              _elem206.read(iprot);
              struct.profileImports.add(_elem206);
            }
          }
          struct.setProfileImportsIsSet(true);
        }
      }
    }

  }

  public static class postProfileImports_result implements org.apache.thrift.TBase<postProfileImports_result, postProfileImports_result._Fields>, java.io.Serializable, Cloneable, Comparable<postProfileImports_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProfileImports_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProfileImports_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProfileImports_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProfileImports_result.class, metaDataMap);
    }

    public postProfileImports_result() {
    }

    public postProfileImports_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProfileImports_result(postProfileImports_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postProfileImports_result deepCopy() {
      return new postProfileImports_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postProfileImports_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProfileImports_result)
        return this.equals((postProfileImports_result)that);
      return false;
    }

    public boolean equals(postProfileImports_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProfileImports_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProfileImports_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProfileImports_resultStandardSchemeFactory implements SchemeFactory {
      public postProfileImports_resultStandardScheme getScheme() {
        return new postProfileImports_resultStandardScheme();
      }
    }

    private static class postProfileImports_resultStandardScheme extends StandardScheme<postProfileImports_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProfileImports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProfileImports_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProfileImports_resultTupleSchemeFactory implements SchemeFactory {
      public postProfileImports_resultTupleScheme getScheme() {
        return new postProfileImports_resultTupleScheme();
      }
    }

    private static class postProfileImports_resultTupleScheme extends TupleScheme<postProfileImports_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProfileImports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProfileImports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putProfileImports_args implements org.apache.thrift.TBase<putProfileImports_args, putProfileImports_args._Fields>, java.io.Serializable, Cloneable, Comparable<putProfileImports_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProfileImports_args");

    private static final org.apache.thrift.protocol.TField PROFILE_IMPORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImports", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProfileImports_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProfileImports_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_IMPORTS((short)1, "profileImports");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_IMPORTS
            return PROFILE_IMPORTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_IMPORTS, new org.apache.thrift.meta_data.FieldMetaData("profileImports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProfileImports_args.class, metaDataMap);
    }

    public putProfileImports_args() {
    }

    public putProfileImports_args(
      List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports)
    {
      this();
      this.profileImports = profileImports;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProfileImports_args(putProfileImports_args other) {
      if (other.isSetProfileImports()) {
        List<com.moseeker.thrift.gen.profile.struct.ProfileImport> __this__profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(other.profileImports.size());
        for (com.moseeker.thrift.gen.profile.struct.ProfileImport other_element : other.profileImports) {
          __this__profileImports.add(new com.moseeker.thrift.gen.profile.struct.ProfileImport(other_element));
        }
        this.profileImports = __this__profileImports;
      }
    }

    public putProfileImports_args deepCopy() {
      return new putProfileImports_args(this);
    }

    @Override
    public void clear() {
      this.profileImports = null;
    }

    public int getProfileImportsSize() {
      return (this.profileImports == null) ? 0 : this.profileImports.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProfileImport> getProfileImportsIterator() {
      return (this.profileImports == null) ? null : this.profileImports.iterator();
    }

    public void addToProfileImports(com.moseeker.thrift.gen.profile.struct.ProfileImport elem) {
      if (this.profileImports == null) {
        this.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>();
      }
      this.profileImports.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> getProfileImports() {
      return this.profileImports;
    }

    public putProfileImports_args setProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) {
      this.profileImports = profileImports;
      return this;
    }

    public void unsetProfileImports() {
      this.profileImports = null;
    }

    /** Returns true if field profileImports is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileImports() {
      return this.profileImports != null;
    }

    public void setProfileImportsIsSet(boolean value) {
      if (!value) {
        this.profileImports = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_IMPORTS:
        if (value == null) {
          unsetProfileImports();
        } else {
          setProfileImports((List<com.moseeker.thrift.gen.profile.struct.ProfileImport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_IMPORTS:
        return getProfileImports();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_IMPORTS:
        return isSetProfileImports();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProfileImports_args)
        return this.equals((putProfileImports_args)that);
      return false;
    }

    public boolean equals(putProfileImports_args that) {
      if (that == null)
        return false;

      boolean this_present_profileImports = true && this.isSetProfileImports();
      boolean that_present_profileImports = true && that.isSetProfileImports();
      if (this_present_profileImports || that_present_profileImports) {
        if (!(this_present_profileImports && that_present_profileImports))
          return false;
        if (!this.profileImports.equals(that.profileImports))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileImports = true && (isSetProfileImports());
      list.add(present_profileImports);
      if (present_profileImports)
        list.add(profileImports);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProfileImports_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileImports()).compareTo(other.isSetProfileImports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileImports()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImports, other.profileImports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProfileImports_args(");
      boolean first = true;

      sb.append("profileImports:");
      if (this.profileImports == null) {
        sb.append("null");
      } else {
        sb.append(this.profileImports);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProfileImports_argsStandardSchemeFactory implements SchemeFactory {
      public putProfileImports_argsStandardScheme getScheme() {
        return new putProfileImports_argsStandardScheme();
      }
    }

    private static class putProfileImports_argsStandardScheme extends StandardScheme<putProfileImports_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProfileImports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_IMPORTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(_list208.size);
                  com.moseeker.thrift.gen.profile.struct.ProfileImport _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                    _elem209.read(iprot);
                    struct.profileImports.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileImportsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProfileImports_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileImports != null) {
          oprot.writeFieldBegin(PROFILE_IMPORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileImports.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProfileImport _iter211 : struct.profileImports)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProfileImports_argsTupleSchemeFactory implements SchemeFactory {
      public putProfileImports_argsTupleScheme getScheme() {
        return new putProfileImports_argsTupleScheme();
      }
    }

    private static class putProfileImports_argsTupleScheme extends TupleScheme<putProfileImports_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProfileImports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileImports()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileImports()) {
          {
            oprot.writeI32(struct.profileImports.size());
            for (com.moseeker.thrift.gen.profile.struct.ProfileImport _iter212 : struct.profileImports)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProfileImports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(_list213.size);
            com.moseeker.thrift.gen.profile.struct.ProfileImport _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
              _elem214.read(iprot);
              struct.profileImports.add(_elem214);
            }
          }
          struct.setProfileImportsIsSet(true);
        }
      }
    }

  }

  public static class putProfileImports_result implements org.apache.thrift.TBase<putProfileImports_result, putProfileImports_result._Fields>, java.io.Serializable, Cloneable, Comparable<putProfileImports_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProfileImports_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProfileImports_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProfileImports_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProfileImports_result.class, metaDataMap);
    }

    public putProfileImports_result() {
    }

    public putProfileImports_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProfileImports_result(putProfileImports_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putProfileImports_result deepCopy() {
      return new putProfileImports_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putProfileImports_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProfileImports_result)
        return this.equals((putProfileImports_result)that);
      return false;
    }

    public boolean equals(putProfileImports_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProfileImports_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProfileImports_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProfileImports_resultStandardSchemeFactory implements SchemeFactory {
      public putProfileImports_resultStandardScheme getScheme() {
        return new putProfileImports_resultStandardScheme();
      }
    }

    private static class putProfileImports_resultStandardScheme extends StandardScheme<putProfileImports_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProfileImports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProfileImports_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProfileImports_resultTupleSchemeFactory implements SchemeFactory {
      public putProfileImports_resultTupleScheme getScheme() {
        return new putProfileImports_resultTupleScheme();
      }
    }

    private static class putProfileImports_resultTupleScheme extends TupleScheme<putProfileImports_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProfileImports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProfileImports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delProfileImports_args implements org.apache.thrift.TBase<delProfileImports_args, delProfileImports_args._Fields>, java.io.Serializable, Cloneable, Comparable<delProfileImports_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProfileImports_args");

    private static final org.apache.thrift.protocol.TField PROFILE_IMPORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImports", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProfileImports_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProfileImports_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_IMPORTS((short)1, "profileImports");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_IMPORTS
            return PROFILE_IMPORTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_IMPORTS, new org.apache.thrift.meta_data.FieldMetaData("profileImports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProfileImports_args.class, metaDataMap);
    }

    public delProfileImports_args() {
    }

    public delProfileImports_args(
      List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports)
    {
      this();
      this.profileImports = profileImports;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProfileImports_args(delProfileImports_args other) {
      if (other.isSetProfileImports()) {
        List<com.moseeker.thrift.gen.profile.struct.ProfileImport> __this__profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(other.profileImports.size());
        for (com.moseeker.thrift.gen.profile.struct.ProfileImport other_element : other.profileImports) {
          __this__profileImports.add(new com.moseeker.thrift.gen.profile.struct.ProfileImport(other_element));
        }
        this.profileImports = __this__profileImports;
      }
    }

    public delProfileImports_args deepCopy() {
      return new delProfileImports_args(this);
    }

    @Override
    public void clear() {
      this.profileImports = null;
    }

    public int getProfileImportsSize() {
      return (this.profileImports == null) ? 0 : this.profileImports.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ProfileImport> getProfileImportsIterator() {
      return (this.profileImports == null) ? null : this.profileImports.iterator();
    }

    public void addToProfileImports(com.moseeker.thrift.gen.profile.struct.ProfileImport elem) {
      if (this.profileImports == null) {
        this.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>();
      }
      this.profileImports.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.ProfileImport> getProfileImports() {
      return this.profileImports;
    }

    public delProfileImports_args setProfileImports(List<com.moseeker.thrift.gen.profile.struct.ProfileImport> profileImports) {
      this.profileImports = profileImports;
      return this;
    }

    public void unsetProfileImports() {
      this.profileImports = null;
    }

    /** Returns true if field profileImports is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileImports() {
      return this.profileImports != null;
    }

    public void setProfileImportsIsSet(boolean value) {
      if (!value) {
        this.profileImports = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_IMPORTS:
        if (value == null) {
          unsetProfileImports();
        } else {
          setProfileImports((List<com.moseeker.thrift.gen.profile.struct.ProfileImport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_IMPORTS:
        return getProfileImports();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_IMPORTS:
        return isSetProfileImports();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProfileImports_args)
        return this.equals((delProfileImports_args)that);
      return false;
    }

    public boolean equals(delProfileImports_args that) {
      if (that == null)
        return false;

      boolean this_present_profileImports = true && this.isSetProfileImports();
      boolean that_present_profileImports = true && that.isSetProfileImports();
      if (this_present_profileImports || that_present_profileImports) {
        if (!(this_present_profileImports && that_present_profileImports))
          return false;
        if (!this.profileImports.equals(that.profileImports))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileImports = true && (isSetProfileImports());
      list.add(present_profileImports);
      if (present_profileImports)
        list.add(profileImports);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProfileImports_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileImports()).compareTo(other.isSetProfileImports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileImports()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImports, other.profileImports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProfileImports_args(");
      boolean first = true;

      sb.append("profileImports:");
      if (this.profileImports == null) {
        sb.append("null");
      } else {
        sb.append(this.profileImports);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProfileImports_argsStandardSchemeFactory implements SchemeFactory {
      public delProfileImports_argsStandardScheme getScheme() {
        return new delProfileImports_argsStandardScheme();
      }
    }

    private static class delProfileImports_argsStandardScheme extends StandardScheme<delProfileImports_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProfileImports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_IMPORTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(_list216.size);
                  com.moseeker.thrift.gen.profile.struct.ProfileImport _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                    _elem217.read(iprot);
                    struct.profileImports.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileImportsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProfileImports_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileImports != null) {
          oprot.writeFieldBegin(PROFILE_IMPORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileImports.size()));
            for (com.moseeker.thrift.gen.profile.struct.ProfileImport _iter219 : struct.profileImports)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProfileImports_argsTupleSchemeFactory implements SchemeFactory {
      public delProfileImports_argsTupleScheme getScheme() {
        return new delProfileImports_argsTupleScheme();
      }
    }

    private static class delProfileImports_argsTupleScheme extends TupleScheme<delProfileImports_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProfileImports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileImports()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileImports()) {
          {
            oprot.writeI32(struct.profileImports.size());
            for (com.moseeker.thrift.gen.profile.struct.ProfileImport _iter220 : struct.profileImports)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProfileImports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profileImports = new ArrayList<com.moseeker.thrift.gen.profile.struct.ProfileImport>(_list221.size);
            com.moseeker.thrift.gen.profile.struct.ProfileImport _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
              _elem222.read(iprot);
              struct.profileImports.add(_elem222);
            }
          }
          struct.setProfileImportsIsSet(true);
        }
      }
    }

  }

  public static class delProfileImports_result implements org.apache.thrift.TBase<delProfileImports_result, delProfileImports_result._Fields>, java.io.Serializable, Cloneable, Comparable<delProfileImports_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProfileImports_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProfileImports_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProfileImports_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProfileImports_result.class, metaDataMap);
    }

    public delProfileImports_result() {
    }

    public delProfileImports_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProfileImports_result(delProfileImports_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delProfileImports_result deepCopy() {
      return new delProfileImports_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delProfileImports_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProfileImports_result)
        return this.equals((delProfileImports_result)that);
      return false;
    }

    public boolean equals(delProfileImports_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProfileImports_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProfileImports_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProfileImports_resultStandardSchemeFactory implements SchemeFactory {
      public delProfileImports_resultStandardScheme getScheme() {
        return new delProfileImports_resultStandardScheme();
      }
    }

    private static class delProfileImports_resultStandardScheme extends StandardScheme<delProfileImports_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProfileImports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProfileImports_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProfileImports_resultTupleSchemeFactory implements SchemeFactory {
      public delProfileImports_resultTupleScheme getScheme() {
        return new delProfileImports_resultTupleScheme();
      }
    }

    private static class delProfileImports_resultTupleScheme extends TupleScheme<delProfileImports_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProfileImports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProfileImports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postProfileImport_args implements org.apache.thrift.TBase<postProfileImport_args, postProfileImport_args._Fields>, java.io.Serializable, Cloneable, Comparable<postProfileImport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProfileImport_args");

    private static final org.apache.thrift.protocol.TField PROFILE_IMPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProfileImport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProfileImport_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_IMPORT((short)1, "profileImport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_IMPORT
            return PROFILE_IMPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_IMPORT, new org.apache.thrift.meta_data.FieldMetaData("profileImport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProfileImport_args.class, metaDataMap);
    }

    public postProfileImport_args() {
    }

    public postProfileImport_args(
      com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport)
    {
      this();
      this.profileImport = profileImport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProfileImport_args(postProfileImport_args other) {
      if (other.isSetProfileImport()) {
        this.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport(other.profileImport);
      }
    }

    public postProfileImport_args deepCopy() {
      return new postProfileImport_args(this);
    }

    @Override
    public void clear() {
      this.profileImport = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImport getProfileImport() {
      return this.profileImport;
    }

    public postProfileImport_args setProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) {
      this.profileImport = profileImport;
      return this;
    }

    public void unsetProfileImport() {
      this.profileImport = null;
    }

    /** Returns true if field profileImport is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileImport() {
      return this.profileImport != null;
    }

    public void setProfileImportIsSet(boolean value) {
      if (!value) {
        this.profileImport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_IMPORT:
        if (value == null) {
          unsetProfileImport();
        } else {
          setProfileImport((com.moseeker.thrift.gen.profile.struct.ProfileImport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_IMPORT:
        return getProfileImport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_IMPORT:
        return isSetProfileImport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProfileImport_args)
        return this.equals((postProfileImport_args)that);
      return false;
    }

    public boolean equals(postProfileImport_args that) {
      if (that == null)
        return false;

      boolean this_present_profileImport = true && this.isSetProfileImport();
      boolean that_present_profileImport = true && that.isSetProfileImport();
      if (this_present_profileImport || that_present_profileImport) {
        if (!(this_present_profileImport && that_present_profileImport))
          return false;
        if (!this.profileImport.equals(that.profileImport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileImport = true && (isSetProfileImport());
      list.add(present_profileImport);
      if (present_profileImport)
        list.add(profileImport);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProfileImport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileImport()).compareTo(other.isSetProfileImport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileImport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImport, other.profileImport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProfileImport_args(");
      boolean first = true;

      sb.append("profileImport:");
      if (this.profileImport == null) {
        sb.append("null");
      } else {
        sb.append(this.profileImport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileImport != null) {
        profileImport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProfileImport_argsStandardSchemeFactory implements SchemeFactory {
      public postProfileImport_argsStandardScheme getScheme() {
        return new postProfileImport_argsStandardScheme();
      }
    }

    private static class postProfileImport_argsStandardScheme extends StandardScheme<postProfileImport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProfileImport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_IMPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                struct.profileImport.read(iprot);
                struct.setProfileImportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProfileImport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileImport != null) {
          oprot.writeFieldBegin(PROFILE_IMPORT_FIELD_DESC);
          struct.profileImport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProfileImport_argsTupleSchemeFactory implements SchemeFactory {
      public postProfileImport_argsTupleScheme getScheme() {
        return new postProfileImport_argsTupleScheme();
      }
    }

    private static class postProfileImport_argsTupleScheme extends TupleScheme<postProfileImport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProfileImport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileImport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileImport()) {
          struct.profileImport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProfileImport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
          struct.profileImport.read(iprot);
          struct.setProfileImportIsSet(true);
        }
      }
    }

  }

  public static class postProfileImport_result implements org.apache.thrift.TBase<postProfileImport_result, postProfileImport_result._Fields>, java.io.Serializable, Cloneable, Comparable<postProfileImport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postProfileImport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postProfileImport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postProfileImport_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postProfileImport_result.class, metaDataMap);
    }

    public postProfileImport_result() {
    }

    public postProfileImport_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postProfileImport_result(postProfileImport_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postProfileImport_result deepCopy() {
      return new postProfileImport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postProfileImport_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postProfileImport_result)
        return this.equals((postProfileImport_result)that);
      return false;
    }

    public boolean equals(postProfileImport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postProfileImport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postProfileImport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postProfileImport_resultStandardSchemeFactory implements SchemeFactory {
      public postProfileImport_resultStandardScheme getScheme() {
        return new postProfileImport_resultStandardScheme();
      }
    }

    private static class postProfileImport_resultStandardScheme extends StandardScheme<postProfileImport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postProfileImport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postProfileImport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postProfileImport_resultTupleSchemeFactory implements SchemeFactory {
      public postProfileImport_resultTupleScheme getScheme() {
        return new postProfileImport_resultTupleScheme();
      }
    }

    private static class postProfileImport_resultTupleScheme extends TupleScheme<postProfileImport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postProfileImport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postProfileImport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putProfileImport_args implements org.apache.thrift.TBase<putProfileImport_args, putProfileImport_args._Fields>, java.io.Serializable, Cloneable, Comparable<putProfileImport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProfileImport_args");

    private static final org.apache.thrift.protocol.TField PROFILE_IMPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProfileImport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProfileImport_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_IMPORT((short)1, "profileImport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_IMPORT
            return PROFILE_IMPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_IMPORT, new org.apache.thrift.meta_data.FieldMetaData("profileImport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProfileImport_args.class, metaDataMap);
    }

    public putProfileImport_args() {
    }

    public putProfileImport_args(
      com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport)
    {
      this();
      this.profileImport = profileImport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProfileImport_args(putProfileImport_args other) {
      if (other.isSetProfileImport()) {
        this.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport(other.profileImport);
      }
    }

    public putProfileImport_args deepCopy() {
      return new putProfileImport_args(this);
    }

    @Override
    public void clear() {
      this.profileImport = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImport getProfileImport() {
      return this.profileImport;
    }

    public putProfileImport_args setProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) {
      this.profileImport = profileImport;
      return this;
    }

    public void unsetProfileImport() {
      this.profileImport = null;
    }

    /** Returns true if field profileImport is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileImport() {
      return this.profileImport != null;
    }

    public void setProfileImportIsSet(boolean value) {
      if (!value) {
        this.profileImport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_IMPORT:
        if (value == null) {
          unsetProfileImport();
        } else {
          setProfileImport((com.moseeker.thrift.gen.profile.struct.ProfileImport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_IMPORT:
        return getProfileImport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_IMPORT:
        return isSetProfileImport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProfileImport_args)
        return this.equals((putProfileImport_args)that);
      return false;
    }

    public boolean equals(putProfileImport_args that) {
      if (that == null)
        return false;

      boolean this_present_profileImport = true && this.isSetProfileImport();
      boolean that_present_profileImport = true && that.isSetProfileImport();
      if (this_present_profileImport || that_present_profileImport) {
        if (!(this_present_profileImport && that_present_profileImport))
          return false;
        if (!this.profileImport.equals(that.profileImport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileImport = true && (isSetProfileImport());
      list.add(present_profileImport);
      if (present_profileImport)
        list.add(profileImport);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProfileImport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileImport()).compareTo(other.isSetProfileImport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileImport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImport, other.profileImport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProfileImport_args(");
      boolean first = true;

      sb.append("profileImport:");
      if (this.profileImport == null) {
        sb.append("null");
      } else {
        sb.append(this.profileImport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileImport != null) {
        profileImport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProfileImport_argsStandardSchemeFactory implements SchemeFactory {
      public putProfileImport_argsStandardScheme getScheme() {
        return new putProfileImport_argsStandardScheme();
      }
    }

    private static class putProfileImport_argsStandardScheme extends StandardScheme<putProfileImport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProfileImport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_IMPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                struct.profileImport.read(iprot);
                struct.setProfileImportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProfileImport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileImport != null) {
          oprot.writeFieldBegin(PROFILE_IMPORT_FIELD_DESC);
          struct.profileImport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProfileImport_argsTupleSchemeFactory implements SchemeFactory {
      public putProfileImport_argsTupleScheme getScheme() {
        return new putProfileImport_argsTupleScheme();
      }
    }

    private static class putProfileImport_argsTupleScheme extends TupleScheme<putProfileImport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProfileImport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileImport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileImport()) {
          struct.profileImport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProfileImport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
          struct.profileImport.read(iprot);
          struct.setProfileImportIsSet(true);
        }
      }
    }

  }

  public static class putProfileImport_result implements org.apache.thrift.TBase<putProfileImport_result, putProfileImport_result._Fields>, java.io.Serializable, Cloneable, Comparable<putProfileImport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putProfileImport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putProfileImport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putProfileImport_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putProfileImport_result.class, metaDataMap);
    }

    public putProfileImport_result() {
    }

    public putProfileImport_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putProfileImport_result(putProfileImport_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putProfileImport_result deepCopy() {
      return new putProfileImport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putProfileImport_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putProfileImport_result)
        return this.equals((putProfileImport_result)that);
      return false;
    }

    public boolean equals(putProfileImport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putProfileImport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putProfileImport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putProfileImport_resultStandardSchemeFactory implements SchemeFactory {
      public putProfileImport_resultStandardScheme getScheme() {
        return new putProfileImport_resultStandardScheme();
      }
    }

    private static class putProfileImport_resultStandardScheme extends StandardScheme<putProfileImport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putProfileImport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putProfileImport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putProfileImport_resultTupleSchemeFactory implements SchemeFactory {
      public putProfileImport_resultTupleScheme getScheme() {
        return new putProfileImport_resultTupleScheme();
      }
    }

    private static class putProfileImport_resultTupleScheme extends TupleScheme<putProfileImport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putProfileImport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putProfileImport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delProfileImport_args implements org.apache.thrift.TBase<delProfileImport_args, delProfileImport_args._Fields>, java.io.Serializable, Cloneable, Comparable<delProfileImport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProfileImport_args");

    private static final org.apache.thrift.protocol.TField PROFILE_IMPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProfileImport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProfileImport_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_IMPORT((short)1, "profileImport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_IMPORT
            return PROFILE_IMPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_IMPORT, new org.apache.thrift.meta_data.FieldMetaData("profileImport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileImport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProfileImport_args.class, metaDataMap);
    }

    public delProfileImport_args() {
    }

    public delProfileImport_args(
      com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport)
    {
      this();
      this.profileImport = profileImport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProfileImport_args(delProfileImport_args other) {
      if (other.isSetProfileImport()) {
        this.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport(other.profileImport);
      }
    }

    public delProfileImport_args deepCopy() {
      return new delProfileImport_args(this);
    }

    @Override
    public void clear() {
      this.profileImport = null;
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileImport getProfileImport() {
      return this.profileImport;
    }

    public delProfileImport_args setProfileImport(com.moseeker.thrift.gen.profile.struct.ProfileImport profileImport) {
      this.profileImport = profileImport;
      return this;
    }

    public void unsetProfileImport() {
      this.profileImport = null;
    }

    /** Returns true if field profileImport is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileImport() {
      return this.profileImport != null;
    }

    public void setProfileImportIsSet(boolean value) {
      if (!value) {
        this.profileImport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_IMPORT:
        if (value == null) {
          unsetProfileImport();
        } else {
          setProfileImport((com.moseeker.thrift.gen.profile.struct.ProfileImport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_IMPORT:
        return getProfileImport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_IMPORT:
        return isSetProfileImport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProfileImport_args)
        return this.equals((delProfileImport_args)that);
      return false;
    }

    public boolean equals(delProfileImport_args that) {
      if (that == null)
        return false;

      boolean this_present_profileImport = true && this.isSetProfileImport();
      boolean that_present_profileImport = true && that.isSetProfileImport();
      if (this_present_profileImport || that_present_profileImport) {
        if (!(this_present_profileImport && that_present_profileImport))
          return false;
        if (!this.profileImport.equals(that.profileImport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileImport = true && (isSetProfileImport());
      list.add(present_profileImport);
      if (present_profileImport)
        list.add(profileImport);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProfileImport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileImport()).compareTo(other.isSetProfileImport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileImport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImport, other.profileImport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProfileImport_args(");
      boolean first = true;

      sb.append("profileImport:");
      if (this.profileImport == null) {
        sb.append("null");
      } else {
        sb.append(this.profileImport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileImport != null) {
        profileImport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProfileImport_argsStandardSchemeFactory implements SchemeFactory {
      public delProfileImport_argsStandardScheme getScheme() {
        return new delProfileImport_argsStandardScheme();
      }
    }

    private static class delProfileImport_argsStandardScheme extends StandardScheme<delProfileImport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProfileImport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_IMPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
                struct.profileImport.read(iprot);
                struct.setProfileImportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProfileImport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileImport != null) {
          oprot.writeFieldBegin(PROFILE_IMPORT_FIELD_DESC);
          struct.profileImport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProfileImport_argsTupleSchemeFactory implements SchemeFactory {
      public delProfileImport_argsTupleScheme getScheme() {
        return new delProfileImport_argsTupleScheme();
      }
    }

    private static class delProfileImport_argsTupleScheme extends TupleScheme<delProfileImport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProfileImport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileImport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileImport()) {
          struct.profileImport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProfileImport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileImport = new com.moseeker.thrift.gen.profile.struct.ProfileImport();
          struct.profileImport.read(iprot);
          struct.setProfileImportIsSet(true);
        }
      }
    }

  }

  public static class delProfileImport_result implements org.apache.thrift.TBase<delProfileImport_result, delProfileImport_result._Fields>, java.io.Serializable, Cloneable, Comparable<delProfileImport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delProfileImport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delProfileImport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delProfileImport_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delProfileImport_result.class, metaDataMap);
    }

    public delProfileImport_result() {
    }

    public delProfileImport_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delProfileImport_result(delProfileImport_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delProfileImport_result deepCopy() {
      return new delProfileImport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delProfileImport_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delProfileImport_result)
        return this.equals((delProfileImport_result)that);
      return false;
    }

    public boolean equals(delProfileImport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delProfileImport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delProfileImport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delProfileImport_resultStandardSchemeFactory implements SchemeFactory {
      public delProfileImport_resultStandardScheme getScheme() {
        return new delProfileImport_resultStandardScheme();
      }
    }

    private static class delProfileImport_resultStandardScheme extends StandardScheme<delProfileImport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delProfileImport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delProfileImport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delProfileImport_resultTupleSchemeFactory implements SchemeFactory {
      public delProfileImport_resultTupleScheme getScheme() {
        return new delProfileImport_resultTupleScheme();
      }
    }

    private static class delProfileImport_resultTupleScheme extends TupleScheme<delProfileImport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delProfileImport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delProfileImport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
