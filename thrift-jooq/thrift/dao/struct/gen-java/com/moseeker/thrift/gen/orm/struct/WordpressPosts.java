/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.orm.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-12")
public class WordpressPosts implements org.apache.thrift.TBase<WordpressPosts, WordpressPosts._Fields>, java.io.Serializable, Cloneable, Comparable<WordpressPosts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WordpressPosts");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POST_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("postAuthor", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField POST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("postDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField POST_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("postContent", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POST_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("postTitle", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POST_EXCERPT_FIELD_DESC = new org.apache.thrift.protocol.TField("postExcerpt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField POST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("postStatus", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("postModified", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLATEFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("plateform", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField POST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("postName", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WordpressPostsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WordpressPostsTupleSchemeFactory());
  }

  public long id; // required
  public long postAuthor; // required
  public String postDate; // required
  public String postContent; // required
  public String postTitle; // required
  public String postExcerpt; // required
  public String postStatus; // required
  public String postModified; // required
  public String version; // required
  public String plateform; // required
  public String postName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    POST_AUTHOR((short)2, "postAuthor"),
    POST_DATE((short)3, "postDate"),
    POST_CONTENT((short)4, "postContent"),
    POST_TITLE((short)5, "postTitle"),
    POST_EXCERPT((short)6, "postExcerpt"),
    POST_STATUS((short)7, "postStatus"),
    POST_MODIFIED((short)8, "postModified"),
    VERSION((short)9, "version"),
    PLATEFORM((short)10, "plateform"),
    POST_NAME((short)11, "postName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // POST_AUTHOR
          return POST_AUTHOR;
        case 3: // POST_DATE
          return POST_DATE;
        case 4: // POST_CONTENT
          return POST_CONTENT;
        case 5: // POST_TITLE
          return POST_TITLE;
        case 6: // POST_EXCERPT
          return POST_EXCERPT;
        case 7: // POST_STATUS
          return POST_STATUS;
        case 8: // POST_MODIFIED
          return POST_MODIFIED;
        case 9: // VERSION
          return VERSION;
        case 10: // PLATEFORM
          return PLATEFORM;
        case 11: // POST_NAME
          return POST_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __POSTAUTHOR_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POST_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("postAuthor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POST_DATE, new org.apache.thrift.meta_data.FieldMetaData("postDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("postContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_TITLE, new org.apache.thrift.meta_data.FieldMetaData("postTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_EXCERPT, new org.apache.thrift.meta_data.FieldMetaData("postExcerpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("postStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("postModified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATEFORM, new org.apache.thrift.meta_data.FieldMetaData("plateform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_NAME, new org.apache.thrift.meta_data.FieldMetaData("postName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WordpressPosts.class, metaDataMap);
  }

  public WordpressPosts() {
  }

  public WordpressPosts(
    long id,
    long postAuthor,
    String postDate,
    String postContent,
    String postTitle,
    String postExcerpt,
    String postStatus,
    String postModified,
    String version,
    String plateform,
    String postName)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.postAuthor = postAuthor;
    setPostAuthorIsSet(true);
    this.postDate = postDate;
    this.postContent = postContent;
    this.postTitle = postTitle;
    this.postExcerpt = postExcerpt;
    this.postStatus = postStatus;
    this.postModified = postModified;
    this.version = version;
    this.plateform = plateform;
    this.postName = postName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WordpressPosts(WordpressPosts other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.postAuthor = other.postAuthor;
    if (other.isSetPostDate()) {
      this.postDate = other.postDate;
    }
    if (other.isSetPostContent()) {
      this.postContent = other.postContent;
    }
    if (other.isSetPostTitle()) {
      this.postTitle = other.postTitle;
    }
    if (other.isSetPostExcerpt()) {
      this.postExcerpt = other.postExcerpt;
    }
    if (other.isSetPostStatus()) {
      this.postStatus = other.postStatus;
    }
    if (other.isSetPostModified()) {
      this.postModified = other.postModified;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetPlateform()) {
      this.plateform = other.plateform;
    }
    if (other.isSetPostName()) {
      this.postName = other.postName;
    }
  }

  public WordpressPosts deepCopy() {
    return new WordpressPosts(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPostAuthorIsSet(false);
    this.postAuthor = 0;
    this.postDate = null;
    this.postContent = null;
    this.postTitle = null;
    this.postExcerpt = null;
    this.postStatus = null;
    this.postModified = null;
    this.version = null;
    this.plateform = null;
    this.postName = null;
  }

  public long getId() {
    return this.id;
  }

  public WordpressPosts setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getPostAuthor() {
    return this.postAuthor;
  }

  public WordpressPosts setPostAuthor(long postAuthor) {
    this.postAuthor = postAuthor;
    setPostAuthorIsSet(true);
    return this;
  }

  public void unsetPostAuthor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSTAUTHOR_ISSET_ID);
  }

  /** Returns true if field postAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetPostAuthor() {
    return EncodingUtils.testBit(__isset_bitfield, __POSTAUTHOR_ISSET_ID);
  }

  public void setPostAuthorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSTAUTHOR_ISSET_ID, value);
  }

  public String getPostDate() {
    return this.postDate;
  }

  public WordpressPosts setPostDate(String postDate) {
    this.postDate = postDate;
    return this;
  }

  public void unsetPostDate() {
    this.postDate = null;
  }

  /** Returns true if field postDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPostDate() {
    return this.postDate != null;
  }

  public void setPostDateIsSet(boolean value) {
    if (!value) {
      this.postDate = null;
    }
  }

  public String getPostContent() {
    return this.postContent;
  }

  public WordpressPosts setPostContent(String postContent) {
    this.postContent = postContent;
    return this;
  }

  public void unsetPostContent() {
    this.postContent = null;
  }

  /** Returns true if field postContent is set (has been assigned a value) and false otherwise */
  public boolean isSetPostContent() {
    return this.postContent != null;
  }

  public void setPostContentIsSet(boolean value) {
    if (!value) {
      this.postContent = null;
    }
  }

  public String getPostTitle() {
    return this.postTitle;
  }

  public WordpressPosts setPostTitle(String postTitle) {
    this.postTitle = postTitle;
    return this;
  }

  public void unsetPostTitle() {
    this.postTitle = null;
  }

  /** Returns true if field postTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetPostTitle() {
    return this.postTitle != null;
  }

  public void setPostTitleIsSet(boolean value) {
    if (!value) {
      this.postTitle = null;
    }
  }

  public String getPostExcerpt() {
    return this.postExcerpt;
  }

  public WordpressPosts setPostExcerpt(String postExcerpt) {
    this.postExcerpt = postExcerpt;
    return this;
  }

  public void unsetPostExcerpt() {
    this.postExcerpt = null;
  }

  /** Returns true if field postExcerpt is set (has been assigned a value) and false otherwise */
  public boolean isSetPostExcerpt() {
    return this.postExcerpt != null;
  }

  public void setPostExcerptIsSet(boolean value) {
    if (!value) {
      this.postExcerpt = null;
    }
  }

  public String getPostStatus() {
    return this.postStatus;
  }

  public WordpressPosts setPostStatus(String postStatus) {
    this.postStatus = postStatus;
    return this;
  }

  public void unsetPostStatus() {
    this.postStatus = null;
  }

  /** Returns true if field postStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPostStatus() {
    return this.postStatus != null;
  }

  public void setPostStatusIsSet(boolean value) {
    if (!value) {
      this.postStatus = null;
    }
  }

  public String getPostModified() {
    return this.postModified;
  }

  public WordpressPosts setPostModified(String postModified) {
    this.postModified = postModified;
    return this;
  }

  public void unsetPostModified() {
    this.postModified = null;
  }

  /** Returns true if field postModified is set (has been assigned a value) and false otherwise */
  public boolean isSetPostModified() {
    return this.postModified != null;
  }

  public void setPostModifiedIsSet(boolean value) {
    if (!value) {
      this.postModified = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public WordpressPosts setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getPlateform() {
    return this.plateform;
  }

  public WordpressPosts setPlateform(String plateform) {
    this.plateform = plateform;
    return this;
  }

  public void unsetPlateform() {
    this.plateform = null;
  }

  /** Returns true if field plateform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlateform() {
    return this.plateform != null;
  }

  public void setPlateformIsSet(boolean value) {
    if (!value) {
      this.plateform = null;
    }
  }

  public String getPostName() {
    return this.postName;
  }

  public WordpressPosts setPostName(String postName) {
    this.postName = postName;
    return this;
  }

  public void unsetPostName() {
    this.postName = null;
  }

  /** Returns true if field postName is set (has been assigned a value) and false otherwise */
  public boolean isSetPostName() {
    return this.postName != null;
  }

  public void setPostNameIsSet(boolean value) {
    if (!value) {
      this.postName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case POST_AUTHOR:
      if (value == null) {
        unsetPostAuthor();
      } else {
        setPostAuthor((Long)value);
      }
      break;

    case POST_DATE:
      if (value == null) {
        unsetPostDate();
      } else {
        setPostDate((String)value);
      }
      break;

    case POST_CONTENT:
      if (value == null) {
        unsetPostContent();
      } else {
        setPostContent((String)value);
      }
      break;

    case POST_TITLE:
      if (value == null) {
        unsetPostTitle();
      } else {
        setPostTitle((String)value);
      }
      break;

    case POST_EXCERPT:
      if (value == null) {
        unsetPostExcerpt();
      } else {
        setPostExcerpt((String)value);
      }
      break;

    case POST_STATUS:
      if (value == null) {
        unsetPostStatus();
      } else {
        setPostStatus((String)value);
      }
      break;

    case POST_MODIFIED:
      if (value == null) {
        unsetPostModified();
      } else {
        setPostModified((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case PLATEFORM:
      if (value == null) {
        unsetPlateform();
      } else {
        setPlateform((String)value);
      }
      break;

    case POST_NAME:
      if (value == null) {
        unsetPostName();
      } else {
        setPostName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case POST_AUTHOR:
      return Long.valueOf(getPostAuthor());

    case POST_DATE:
      return getPostDate();

    case POST_CONTENT:
      return getPostContent();

    case POST_TITLE:
      return getPostTitle();

    case POST_EXCERPT:
      return getPostExcerpt();

    case POST_STATUS:
      return getPostStatus();

    case POST_MODIFIED:
      return getPostModified();

    case VERSION:
      return getVersion();

    case PLATEFORM:
      return getPlateform();

    case POST_NAME:
      return getPostName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case POST_AUTHOR:
      return isSetPostAuthor();
    case POST_DATE:
      return isSetPostDate();
    case POST_CONTENT:
      return isSetPostContent();
    case POST_TITLE:
      return isSetPostTitle();
    case POST_EXCERPT:
      return isSetPostExcerpt();
    case POST_STATUS:
      return isSetPostStatus();
    case POST_MODIFIED:
      return isSetPostModified();
    case VERSION:
      return isSetVersion();
    case PLATEFORM:
      return isSetPlateform();
    case POST_NAME:
      return isSetPostName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WordpressPosts)
      return this.equals((WordpressPosts)that);
    return false;
  }

  public boolean equals(WordpressPosts that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_postAuthor = true;
    boolean that_present_postAuthor = true;
    if (this_present_postAuthor || that_present_postAuthor) {
      if (!(this_present_postAuthor && that_present_postAuthor))
        return false;
      if (this.postAuthor != that.postAuthor)
        return false;
    }

    boolean this_present_postDate = true && this.isSetPostDate();
    boolean that_present_postDate = true && that.isSetPostDate();
    if (this_present_postDate || that_present_postDate) {
      if (!(this_present_postDate && that_present_postDate))
        return false;
      if (!this.postDate.equals(that.postDate))
        return false;
    }

    boolean this_present_postContent = true && this.isSetPostContent();
    boolean that_present_postContent = true && that.isSetPostContent();
    if (this_present_postContent || that_present_postContent) {
      if (!(this_present_postContent && that_present_postContent))
        return false;
      if (!this.postContent.equals(that.postContent))
        return false;
    }

    boolean this_present_postTitle = true && this.isSetPostTitle();
    boolean that_present_postTitle = true && that.isSetPostTitle();
    if (this_present_postTitle || that_present_postTitle) {
      if (!(this_present_postTitle && that_present_postTitle))
        return false;
      if (!this.postTitle.equals(that.postTitle))
        return false;
    }

    boolean this_present_postExcerpt = true && this.isSetPostExcerpt();
    boolean that_present_postExcerpt = true && that.isSetPostExcerpt();
    if (this_present_postExcerpt || that_present_postExcerpt) {
      if (!(this_present_postExcerpt && that_present_postExcerpt))
        return false;
      if (!this.postExcerpt.equals(that.postExcerpt))
        return false;
    }

    boolean this_present_postStatus = true && this.isSetPostStatus();
    boolean that_present_postStatus = true && that.isSetPostStatus();
    if (this_present_postStatus || that_present_postStatus) {
      if (!(this_present_postStatus && that_present_postStatus))
        return false;
      if (!this.postStatus.equals(that.postStatus))
        return false;
    }

    boolean this_present_postModified = true && this.isSetPostModified();
    boolean that_present_postModified = true && that.isSetPostModified();
    if (this_present_postModified || that_present_postModified) {
      if (!(this_present_postModified && that_present_postModified))
        return false;
      if (!this.postModified.equals(that.postModified))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_plateform = true && this.isSetPlateform();
    boolean that_present_plateform = true && that.isSetPlateform();
    if (this_present_plateform || that_present_plateform) {
      if (!(this_present_plateform && that_present_plateform))
        return false;
      if (!this.plateform.equals(that.plateform))
        return false;
    }

    boolean this_present_postName = true && this.isSetPostName();
    boolean that_present_postName = true && that.isSetPostName();
    if (this_present_postName || that_present_postName) {
      if (!(this_present_postName && that_present_postName))
        return false;
      if (!this.postName.equals(that.postName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_postAuthor = true;
    list.add(present_postAuthor);
    if (present_postAuthor)
      list.add(postAuthor);

    boolean present_postDate = true && (isSetPostDate());
    list.add(present_postDate);
    if (present_postDate)
      list.add(postDate);

    boolean present_postContent = true && (isSetPostContent());
    list.add(present_postContent);
    if (present_postContent)
      list.add(postContent);

    boolean present_postTitle = true && (isSetPostTitle());
    list.add(present_postTitle);
    if (present_postTitle)
      list.add(postTitle);

    boolean present_postExcerpt = true && (isSetPostExcerpt());
    list.add(present_postExcerpt);
    if (present_postExcerpt)
      list.add(postExcerpt);

    boolean present_postStatus = true && (isSetPostStatus());
    list.add(present_postStatus);
    if (present_postStatus)
      list.add(postStatus);

    boolean present_postModified = true && (isSetPostModified());
    list.add(present_postModified);
    if (present_postModified)
      list.add(postModified);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_plateform = true && (isSetPlateform());
    list.add(present_plateform);
    if (present_plateform)
      list.add(plateform);

    boolean present_postName = true && (isSetPostName());
    list.add(present_postName);
    if (present_postName)
      list.add(postName);

    return list.hashCode();
  }

  @Override
  public int compareTo(WordpressPosts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostAuthor()).compareTo(other.isSetPostAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postAuthor, other.postAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostDate()).compareTo(other.isSetPostDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postDate, other.postDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostContent()).compareTo(other.isSetPostContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postContent, other.postContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostTitle()).compareTo(other.isSetPostTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postTitle, other.postTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostExcerpt()).compareTo(other.isSetPostExcerpt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostExcerpt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postExcerpt, other.postExcerpt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostStatus()).compareTo(other.isSetPostStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postStatus, other.postStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostModified()).compareTo(other.isSetPostModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postModified, other.postModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlateform()).compareTo(other.isSetPlateform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlateform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plateform, other.plateform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostName()).compareTo(other.isSetPostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postName, other.postName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WordpressPosts(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("postAuthor:");
    sb.append(this.postAuthor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("postDate:");
    if (this.postDate == null) {
      sb.append("null");
    } else {
      sb.append(this.postDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postContent:");
    if (this.postContent == null) {
      sb.append("null");
    } else {
      sb.append(this.postContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postTitle:");
    if (this.postTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.postTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postExcerpt:");
    if (this.postExcerpt == null) {
      sb.append("null");
    } else {
      sb.append(this.postExcerpt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postStatus:");
    if (this.postStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.postStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postModified:");
    if (this.postModified == null) {
      sb.append("null");
    } else {
      sb.append(this.postModified);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plateform:");
    if (this.plateform == null) {
      sb.append("null");
    } else {
      sb.append(this.plateform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postName:");
    if (this.postName == null) {
      sb.append("null");
    } else {
      sb.append(this.postName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WordpressPostsStandardSchemeFactory implements SchemeFactory {
    public WordpressPostsStandardScheme getScheme() {
      return new WordpressPostsStandardScheme();
    }
  }

  private static class WordpressPostsStandardScheme extends StandardScheme<WordpressPosts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WordpressPosts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POST_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.postAuthor = iprot.readI64();
              struct.setPostAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postDate = iprot.readString();
              struct.setPostDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POST_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postContent = iprot.readString();
              struct.setPostContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POST_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postTitle = iprot.readString();
              struct.setPostTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POST_EXCERPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postExcerpt = iprot.readString();
              struct.setPostExcerptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postStatus = iprot.readString();
              struct.setPostStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POST_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postModified = iprot.readString();
              struct.setPostModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLATEFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plateform = iprot.readString();
              struct.setPlateformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postName = iprot.readString();
              struct.setPostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WordpressPosts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POST_AUTHOR_FIELD_DESC);
      oprot.writeI64(struct.postAuthor);
      oprot.writeFieldEnd();
      if (struct.postDate != null) {
        oprot.writeFieldBegin(POST_DATE_FIELD_DESC);
        oprot.writeString(struct.postDate);
        oprot.writeFieldEnd();
      }
      if (struct.postContent != null) {
        oprot.writeFieldBegin(POST_CONTENT_FIELD_DESC);
        oprot.writeString(struct.postContent);
        oprot.writeFieldEnd();
      }
      if (struct.postTitle != null) {
        oprot.writeFieldBegin(POST_TITLE_FIELD_DESC);
        oprot.writeString(struct.postTitle);
        oprot.writeFieldEnd();
      }
      if (struct.postExcerpt != null) {
        oprot.writeFieldBegin(POST_EXCERPT_FIELD_DESC);
        oprot.writeString(struct.postExcerpt);
        oprot.writeFieldEnd();
      }
      if (struct.postStatus != null) {
        oprot.writeFieldBegin(POST_STATUS_FIELD_DESC);
        oprot.writeString(struct.postStatus);
        oprot.writeFieldEnd();
      }
      if (struct.postModified != null) {
        oprot.writeFieldBegin(POST_MODIFIED_FIELD_DESC);
        oprot.writeString(struct.postModified);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.plateform != null) {
        oprot.writeFieldBegin(PLATEFORM_FIELD_DESC);
        oprot.writeString(struct.plateform);
        oprot.writeFieldEnd();
      }
      if (struct.postName != null) {
        oprot.writeFieldBegin(POST_NAME_FIELD_DESC);
        oprot.writeString(struct.postName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WordpressPostsTupleSchemeFactory implements SchemeFactory {
    public WordpressPostsTupleScheme getScheme() {
      return new WordpressPostsTupleScheme();
    }
  }

  private static class WordpressPostsTupleScheme extends TupleScheme<WordpressPosts> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WordpressPosts struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPostAuthor()) {
        optionals.set(1);
      }
      if (struct.isSetPostDate()) {
        optionals.set(2);
      }
      if (struct.isSetPostContent()) {
        optionals.set(3);
      }
      if (struct.isSetPostTitle()) {
        optionals.set(4);
      }
      if (struct.isSetPostExcerpt()) {
        optionals.set(5);
      }
      if (struct.isSetPostStatus()) {
        optionals.set(6);
      }
      if (struct.isSetPostModified()) {
        optionals.set(7);
      }
      if (struct.isSetVersion()) {
        optionals.set(8);
      }
      if (struct.isSetPlateform()) {
        optionals.set(9);
      }
      if (struct.isSetPostName()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetPostAuthor()) {
        oprot.writeI64(struct.postAuthor);
      }
      if (struct.isSetPostDate()) {
        oprot.writeString(struct.postDate);
      }
      if (struct.isSetPostContent()) {
        oprot.writeString(struct.postContent);
      }
      if (struct.isSetPostTitle()) {
        oprot.writeString(struct.postTitle);
      }
      if (struct.isSetPostExcerpt()) {
        oprot.writeString(struct.postExcerpt);
      }
      if (struct.isSetPostStatus()) {
        oprot.writeString(struct.postStatus);
      }
      if (struct.isSetPostModified()) {
        oprot.writeString(struct.postModified);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetPlateform()) {
        oprot.writeString(struct.plateform);
      }
      if (struct.isSetPostName()) {
        oprot.writeString(struct.postName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WordpressPosts struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.postAuthor = iprot.readI64();
        struct.setPostAuthorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.postDate = iprot.readString();
        struct.setPostDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.postContent = iprot.readString();
        struct.setPostContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.postTitle = iprot.readString();
        struct.setPostTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.postExcerpt = iprot.readString();
        struct.setPostExcerptIsSet(true);
      }
      if (incoming.get(6)) {
        struct.postStatus = iprot.readString();
        struct.setPostStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.postModified = iprot.readString();
        struct.setPostModifiedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.plateform = iprot.readString();
        struct.setPlateformIsSet(true);
      }
      if (incoming.get(10)) {
        struct.postName = iprot.readString();
        struct.setPostNameIsSet(true);
      }
    }
  }

}

