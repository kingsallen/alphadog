/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.application.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-7")
public class JobApplicationServices {

  public interface Iface {

    public com.moseeker.thrift.gen.common.struct.Response postApplication(com.moseeker.thrift.gen.application.struct.JobApplication application, com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response postJobResumeOther(com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getApplicationByUserIdAndPositionId(long userId, long positionId, long companyId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void postApplication(com.moseeker.thrift.gen.application.struct.JobApplication application, com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postJobResumeOther(com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationByUserIdAndPositionId(long userId, long positionId, long companyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.moseeker.thrift.gen.common.struct.Response postApplication(com.moseeker.thrift.gen.application.struct.JobApplication application, com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic) throws org.apache.thrift.TException
    {
      send_postApplication(application, jobResumeBasic);
      return recv_postApplication();
    }

    public void send_postApplication(com.moseeker.thrift.gen.application.struct.JobApplication application, com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic) throws org.apache.thrift.TException
    {
      postApplication_args args = new postApplication_args();
      args.setApplication(application);
      args.setJobResumeBasic(jobResumeBasic);
      sendBase("postApplication", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_postApplication() throws org.apache.thrift.TException
    {
      postApplication_result result = new postApplication_result();
      receiveBase(result, "postApplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postApplication failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response postJobResumeOther(com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther) throws org.apache.thrift.TException
    {
      send_postJobResumeOther(jobResumeOther);
      return recv_postJobResumeOther();
    }

    public void send_postJobResumeOther(com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther) throws org.apache.thrift.TException
    {
      postJobResumeOther_args args = new postJobResumeOther_args();
      args.setJobResumeOther(jobResumeOther);
      sendBase("postJobResumeOther", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_postJobResumeOther() throws org.apache.thrift.TException
    {
      postJobResumeOther_result result = new postJobResumeOther_result();
      receiveBase(result, "postJobResumeOther");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postJobResumeOther failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getApplicationByUserIdAndPositionId(long userId, long positionId, long companyId) throws org.apache.thrift.TException
    {
      send_getApplicationByUserIdAndPositionId(userId, positionId, companyId);
      return recv_getApplicationByUserIdAndPositionId();
    }

    public void send_getApplicationByUserIdAndPositionId(long userId, long positionId, long companyId) throws org.apache.thrift.TException
    {
      getApplicationByUserIdAndPositionId_args args = new getApplicationByUserIdAndPositionId_args();
      args.setUserId(userId);
      args.setPositionId(positionId);
      args.setCompanyId(companyId);
      sendBase("getApplicationByUserIdAndPositionId", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getApplicationByUserIdAndPositionId() throws org.apache.thrift.TException
    {
      getApplicationByUserIdAndPositionId_result result = new getApplicationByUserIdAndPositionId_result();
      receiveBase(result, "getApplicationByUserIdAndPositionId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationByUserIdAndPositionId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void postApplication(com.moseeker.thrift.gen.application.struct.JobApplication application, com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postApplication_call method_call = new postApplication_call(application, jobResumeBasic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postApplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.application.struct.JobApplication application;
      private com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic;
      public postApplication_call(com.moseeker.thrift.gen.application.struct.JobApplication application, com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.application = application;
        this.jobResumeBasic = jobResumeBasic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postApplication_args args = new postApplication_args();
        args.setApplication(application);
        args.setJobResumeBasic(jobResumeBasic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postApplication();
      }
    }

    public void postJobResumeOther(com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postJobResumeOther_call method_call = new postJobResumeOther_call(jobResumeOther, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postJobResumeOther_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther;
      public postJobResumeOther_call(com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobResumeOther = jobResumeOther;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postJobResumeOther", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postJobResumeOther_args args = new postJobResumeOther_args();
        args.setJobResumeOther(jobResumeOther);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postJobResumeOther();
      }
    }

    public void getApplicationByUserIdAndPositionId(long userId, long positionId, long companyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationByUserIdAndPositionId_call method_call = new getApplicationByUserIdAndPositionId_call(userId, positionId, companyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationByUserIdAndPositionId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private long positionId;
      private long companyId;
      public getApplicationByUserIdAndPositionId_call(long userId, long positionId, long companyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.positionId = positionId;
        this.companyId = companyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationByUserIdAndPositionId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationByUserIdAndPositionId_args args = new getApplicationByUserIdAndPositionId_args();
        args.setUserId(userId);
        args.setPositionId(positionId);
        args.setCompanyId(companyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationByUserIdAndPositionId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("postApplication", new postApplication());
      processMap.put("postJobResumeOther", new postJobResumeOther());
      processMap.put("getApplicationByUserIdAndPositionId", new getApplicationByUserIdAndPositionId());
      return processMap;
    }

    public static class postApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postApplication_args> {
      public postApplication() {
        super("postApplication");
      }

      public postApplication_args getEmptyArgsInstance() {
        return new postApplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postApplication_result getResult(I iface, postApplication_args args) throws org.apache.thrift.TException {
        postApplication_result result = new postApplication_result();
        result.success = iface.postApplication(args.application, args.jobResumeBasic);
        return result;
      }
    }

    public static class postJobResumeOther<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postJobResumeOther_args> {
      public postJobResumeOther() {
        super("postJobResumeOther");
      }

      public postJobResumeOther_args getEmptyArgsInstance() {
        return new postJobResumeOther_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postJobResumeOther_result getResult(I iface, postJobResumeOther_args args) throws org.apache.thrift.TException {
        postJobResumeOther_result result = new postJobResumeOther_result();
        result.success = iface.postJobResumeOther(args.jobResumeOther);
        return result;
      }
    }

    public static class getApplicationByUserIdAndPositionId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationByUserIdAndPositionId_args> {
      public getApplicationByUserIdAndPositionId() {
        super("getApplicationByUserIdAndPositionId");
      }

      public getApplicationByUserIdAndPositionId_args getEmptyArgsInstance() {
        return new getApplicationByUserIdAndPositionId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationByUserIdAndPositionId_result getResult(I iface, getApplicationByUserIdAndPositionId_args args) throws org.apache.thrift.TException {
        getApplicationByUserIdAndPositionId_result result = new getApplicationByUserIdAndPositionId_result();
        result.success = iface.getApplicationByUserIdAndPositionId(args.userId, args.positionId, args.companyId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("postApplication", new postApplication());
      processMap.put("postJobResumeOther", new postJobResumeOther());
      processMap.put("getApplicationByUserIdAndPositionId", new getApplicationByUserIdAndPositionId());
      return processMap;
    }

    public static class postApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postApplication_args, com.moseeker.thrift.gen.common.struct.Response> {
      public postApplication() {
        super("postApplication");
      }

      public postApplication_args getEmptyArgsInstance() {
        return new postApplication_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            postApplication_result result = new postApplication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postApplication_result result = new postApplication_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postApplication_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.postApplication(args.application, args.jobResumeBasic,resultHandler);
      }
    }

    public static class postJobResumeOther<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postJobResumeOther_args, com.moseeker.thrift.gen.common.struct.Response> {
      public postJobResumeOther() {
        super("postJobResumeOther");
      }

      public postJobResumeOther_args getEmptyArgsInstance() {
        return new postJobResumeOther_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            postJobResumeOther_result result = new postJobResumeOther_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postJobResumeOther_result result = new postJobResumeOther_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postJobResumeOther_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.postJobResumeOther(args.jobResumeOther,resultHandler);
      }
    }

    public static class getApplicationByUserIdAndPositionId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationByUserIdAndPositionId_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getApplicationByUserIdAndPositionId() {
        super("getApplicationByUserIdAndPositionId");
      }

      public getApplicationByUserIdAndPositionId_args getEmptyArgsInstance() {
        return new getApplicationByUserIdAndPositionId_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getApplicationByUserIdAndPositionId_result result = new getApplicationByUserIdAndPositionId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationByUserIdAndPositionId_result result = new getApplicationByUserIdAndPositionId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationByUserIdAndPositionId_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.getApplicationByUserIdAndPositionId(args.userId, args.positionId, args.companyId,resultHandler);
      }
    }

  }

  public static class postApplication_args implements org.apache.thrift.TBase<postApplication_args, postApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<postApplication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postApplication_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("application", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_RESUME_BASIC_FIELD_DESC = new org.apache.thrift.protocol.TField("jobResumeBasic", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postApplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postApplication_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.application.struct.JobApplication application; // required
    public com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION((short)1, "application"),
      JOB_RESUME_BASIC((short)2, "jobResumeBasic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION
            return APPLICATION;
          case 2: // JOB_RESUME_BASIC
            return JOB_RESUME_BASIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION, new org.apache.thrift.meta_data.FieldMetaData("application", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.application.struct.JobApplication.class)));
      tmpMap.put(_Fields.JOB_RESUME_BASIC, new org.apache.thrift.meta_data.FieldMetaData("jobResumeBasic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.application.struct.JobResumeBasic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postApplication_args.class, metaDataMap);
    }

    public postApplication_args() {
    }

    public postApplication_args(
      com.moseeker.thrift.gen.application.struct.JobApplication application,
      com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic)
    {
      this();
      this.application = application;
      this.jobResumeBasic = jobResumeBasic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postApplication_args(postApplication_args other) {
      if (other.isSetApplication()) {
        this.application = new com.moseeker.thrift.gen.application.struct.JobApplication(other.application);
      }
      if (other.isSetJobResumeBasic()) {
        this.jobResumeBasic = new com.moseeker.thrift.gen.application.struct.JobResumeBasic(other.jobResumeBasic);
      }
    }

    public postApplication_args deepCopy() {
      return new postApplication_args(this);
    }

    @Override
    public void clear() {
      this.application = null;
      this.jobResumeBasic = null;
    }

    public com.moseeker.thrift.gen.application.struct.JobApplication getApplication() {
      return this.application;
    }

    public postApplication_args setApplication(com.moseeker.thrift.gen.application.struct.JobApplication application) {
      this.application = application;
      return this;
    }

    public void unsetApplication() {
      this.application = null;
    }

    /** Returns true if field application is set (has been assigned a value) and false otherwise */
    public boolean isSetApplication() {
      return this.application != null;
    }

    public void setApplicationIsSet(boolean value) {
      if (!value) {
        this.application = null;
      }
    }

    public com.moseeker.thrift.gen.application.struct.JobResumeBasic getJobResumeBasic() {
      return this.jobResumeBasic;
    }

    public postApplication_args setJobResumeBasic(com.moseeker.thrift.gen.application.struct.JobResumeBasic jobResumeBasic) {
      this.jobResumeBasic = jobResumeBasic;
      return this;
    }

    public void unsetJobResumeBasic() {
      this.jobResumeBasic = null;
    }

    /** Returns true if field jobResumeBasic is set (has been assigned a value) and false otherwise */
    public boolean isSetJobResumeBasic() {
      return this.jobResumeBasic != null;
    }

    public void setJobResumeBasicIsSet(boolean value) {
      if (!value) {
        this.jobResumeBasic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION:
        if (value == null) {
          unsetApplication();
        } else {
          setApplication((com.moseeker.thrift.gen.application.struct.JobApplication)value);
        }
        break;

      case JOB_RESUME_BASIC:
        if (value == null) {
          unsetJobResumeBasic();
        } else {
          setJobResumeBasic((com.moseeker.thrift.gen.application.struct.JobResumeBasic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION:
        return getApplication();

      case JOB_RESUME_BASIC:
        return getJobResumeBasic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION:
        return isSetApplication();
      case JOB_RESUME_BASIC:
        return isSetJobResumeBasic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postApplication_args)
        return this.equals((postApplication_args)that);
      return false;
    }

    public boolean equals(postApplication_args that) {
      if (that == null)
        return false;

      boolean this_present_application = true && this.isSetApplication();
      boolean that_present_application = true && that.isSetApplication();
      if (this_present_application || that_present_application) {
        if (!(this_present_application && that_present_application))
          return false;
        if (!this.application.equals(that.application))
          return false;
      }

      boolean this_present_jobResumeBasic = true && this.isSetJobResumeBasic();
      boolean that_present_jobResumeBasic = true && that.isSetJobResumeBasic();
      if (this_present_jobResumeBasic || that_present_jobResumeBasic) {
        if (!(this_present_jobResumeBasic && that_present_jobResumeBasic))
          return false;
        if (!this.jobResumeBasic.equals(that.jobResumeBasic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_application = true && (isSetApplication());
      list.add(present_application);
      if (present_application)
        list.add(application);

      boolean present_jobResumeBasic = true && (isSetJobResumeBasic());
      list.add(present_jobResumeBasic);
      if (present_jobResumeBasic)
        list.add(jobResumeBasic);

      return list.hashCode();
    }

    @Override
    public int compareTo(postApplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplication()).compareTo(other.isSetApplication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.application, other.application);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobResumeBasic()).compareTo(other.isSetJobResumeBasic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobResumeBasic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobResumeBasic, other.jobResumeBasic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postApplication_args(");
      boolean first = true;

      sb.append("application:");
      if (this.application == null) {
        sb.append("null");
      } else {
        sb.append(this.application);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobResumeBasic:");
      if (this.jobResumeBasic == null) {
        sb.append("null");
      } else {
        sb.append(this.jobResumeBasic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (application != null) {
        application.validate();
      }
      if (jobResumeBasic != null) {
        jobResumeBasic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postApplication_argsStandardSchemeFactory implements SchemeFactory {
      public postApplication_argsStandardScheme getScheme() {
        return new postApplication_argsStandardScheme();
      }
    }

    private static class postApplication_argsStandardScheme extends StandardScheme<postApplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.application = new com.moseeker.thrift.gen.application.struct.JobApplication();
                struct.application.read(iprot);
                struct.setApplicationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_RESUME_BASIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobResumeBasic = new com.moseeker.thrift.gen.application.struct.JobResumeBasic();
                struct.jobResumeBasic.read(iprot);
                struct.setJobResumeBasicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postApplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.application != null) {
          oprot.writeFieldBegin(APPLICATION_FIELD_DESC);
          struct.application.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jobResumeBasic != null) {
          oprot.writeFieldBegin(JOB_RESUME_BASIC_FIELD_DESC);
          struct.jobResumeBasic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postApplication_argsTupleSchemeFactory implements SchemeFactory {
      public postApplication_argsTupleScheme getScheme() {
        return new postApplication_argsTupleScheme();
      }
    }

    private static class postApplication_argsTupleScheme extends TupleScheme<postApplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplication()) {
          optionals.set(0);
        }
        if (struct.isSetJobResumeBasic()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApplication()) {
          struct.application.write(oprot);
        }
        if (struct.isSetJobResumeBasic()) {
          struct.jobResumeBasic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.application = new com.moseeker.thrift.gen.application.struct.JobApplication();
          struct.application.read(iprot);
          struct.setApplicationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jobResumeBasic = new com.moseeker.thrift.gen.application.struct.JobResumeBasic();
          struct.jobResumeBasic.read(iprot);
          struct.setJobResumeBasicIsSet(true);
        }
      }
    }

  }

  public static class postApplication_result implements org.apache.thrift.TBase<postApplication_result, postApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<postApplication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postApplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postApplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postApplication_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postApplication_result.class, metaDataMap);
    }

    public postApplication_result() {
    }

    public postApplication_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postApplication_result(postApplication_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public postApplication_result deepCopy() {
      return new postApplication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public postApplication_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postApplication_result)
        return this.equals((postApplication_result)that);
      return false;
    }

    public boolean equals(postApplication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postApplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postApplication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postApplication_resultStandardSchemeFactory implements SchemeFactory {
      public postApplication_resultStandardScheme getScheme() {
        return new postApplication_resultStandardScheme();
      }
    }

    private static class postApplication_resultStandardScheme extends StandardScheme<postApplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postApplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postApplication_resultTupleSchemeFactory implements SchemeFactory {
      public postApplication_resultTupleScheme getScheme() {
        return new postApplication_resultTupleScheme();
      }
    }

    private static class postApplication_resultTupleScheme extends TupleScheme<postApplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postJobResumeOther_args implements org.apache.thrift.TBase<postJobResumeOther_args, postJobResumeOther_args._Fields>, java.io.Serializable, Cloneable, Comparable<postJobResumeOther_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postJobResumeOther_args");

    private static final org.apache.thrift.protocol.TField JOB_RESUME_OTHER_FIELD_DESC = new org.apache.thrift.protocol.TField("jobResumeOther", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postJobResumeOther_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postJobResumeOther_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_RESUME_OTHER((short)1, "jobResumeOther");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_RESUME_OTHER
            return JOB_RESUME_OTHER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_RESUME_OTHER, new org.apache.thrift.meta_data.FieldMetaData("jobResumeOther", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.application.struct.JobResumeOther.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postJobResumeOther_args.class, metaDataMap);
    }

    public postJobResumeOther_args() {
    }

    public postJobResumeOther_args(
      com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther)
    {
      this();
      this.jobResumeOther = jobResumeOther;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postJobResumeOther_args(postJobResumeOther_args other) {
      if (other.isSetJobResumeOther()) {
        this.jobResumeOther = new com.moseeker.thrift.gen.application.struct.JobResumeOther(other.jobResumeOther);
      }
    }

    public postJobResumeOther_args deepCopy() {
      return new postJobResumeOther_args(this);
    }

    @Override
    public void clear() {
      this.jobResumeOther = null;
    }

    public com.moseeker.thrift.gen.application.struct.JobResumeOther getJobResumeOther() {
      return this.jobResumeOther;
    }

    public postJobResumeOther_args setJobResumeOther(com.moseeker.thrift.gen.application.struct.JobResumeOther jobResumeOther) {
      this.jobResumeOther = jobResumeOther;
      return this;
    }

    public void unsetJobResumeOther() {
      this.jobResumeOther = null;
    }

    /** Returns true if field jobResumeOther is set (has been assigned a value) and false otherwise */
    public boolean isSetJobResumeOther() {
      return this.jobResumeOther != null;
    }

    public void setJobResumeOtherIsSet(boolean value) {
      if (!value) {
        this.jobResumeOther = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_RESUME_OTHER:
        if (value == null) {
          unsetJobResumeOther();
        } else {
          setJobResumeOther((com.moseeker.thrift.gen.application.struct.JobResumeOther)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_RESUME_OTHER:
        return getJobResumeOther();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_RESUME_OTHER:
        return isSetJobResumeOther();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postJobResumeOther_args)
        return this.equals((postJobResumeOther_args)that);
      return false;
    }

    public boolean equals(postJobResumeOther_args that) {
      if (that == null)
        return false;

      boolean this_present_jobResumeOther = true && this.isSetJobResumeOther();
      boolean that_present_jobResumeOther = true && that.isSetJobResumeOther();
      if (this_present_jobResumeOther || that_present_jobResumeOther) {
        if (!(this_present_jobResumeOther && that_present_jobResumeOther))
          return false;
        if (!this.jobResumeOther.equals(that.jobResumeOther))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobResumeOther = true && (isSetJobResumeOther());
      list.add(present_jobResumeOther);
      if (present_jobResumeOther)
        list.add(jobResumeOther);

      return list.hashCode();
    }

    @Override
    public int compareTo(postJobResumeOther_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobResumeOther()).compareTo(other.isSetJobResumeOther());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobResumeOther()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobResumeOther, other.jobResumeOther);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postJobResumeOther_args(");
      boolean first = true;

      sb.append("jobResumeOther:");
      if (this.jobResumeOther == null) {
        sb.append("null");
      } else {
        sb.append(this.jobResumeOther);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (jobResumeOther != null) {
        jobResumeOther.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postJobResumeOther_argsStandardSchemeFactory implements SchemeFactory {
      public postJobResumeOther_argsStandardScheme getScheme() {
        return new postJobResumeOther_argsStandardScheme();
      }
    }

    private static class postJobResumeOther_argsStandardScheme extends StandardScheme<postJobResumeOther_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postJobResumeOther_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_RESUME_OTHER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobResumeOther = new com.moseeker.thrift.gen.application.struct.JobResumeOther();
                struct.jobResumeOther.read(iprot);
                struct.setJobResumeOtherIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postJobResumeOther_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobResumeOther != null) {
          oprot.writeFieldBegin(JOB_RESUME_OTHER_FIELD_DESC);
          struct.jobResumeOther.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postJobResumeOther_argsTupleSchemeFactory implements SchemeFactory {
      public postJobResumeOther_argsTupleScheme getScheme() {
        return new postJobResumeOther_argsTupleScheme();
      }
    }

    private static class postJobResumeOther_argsTupleScheme extends TupleScheme<postJobResumeOther_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postJobResumeOther_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobResumeOther()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJobResumeOther()) {
          struct.jobResumeOther.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postJobResumeOther_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jobResumeOther = new com.moseeker.thrift.gen.application.struct.JobResumeOther();
          struct.jobResumeOther.read(iprot);
          struct.setJobResumeOtherIsSet(true);
        }
      }
    }

  }

  public static class postJobResumeOther_result implements org.apache.thrift.TBase<postJobResumeOther_result, postJobResumeOther_result._Fields>, java.io.Serializable, Cloneable, Comparable<postJobResumeOther_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postJobResumeOther_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postJobResumeOther_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postJobResumeOther_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postJobResumeOther_result.class, metaDataMap);
    }

    public postJobResumeOther_result() {
    }

    public postJobResumeOther_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postJobResumeOther_result(postJobResumeOther_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public postJobResumeOther_result deepCopy() {
      return new postJobResumeOther_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public postJobResumeOther_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postJobResumeOther_result)
        return this.equals((postJobResumeOther_result)that);
      return false;
    }

    public boolean equals(postJobResumeOther_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postJobResumeOther_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postJobResumeOther_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postJobResumeOther_resultStandardSchemeFactory implements SchemeFactory {
      public postJobResumeOther_resultStandardScheme getScheme() {
        return new postJobResumeOther_resultStandardScheme();
      }
    }

    private static class postJobResumeOther_resultStandardScheme extends StandardScheme<postJobResumeOther_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postJobResumeOther_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postJobResumeOther_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postJobResumeOther_resultTupleSchemeFactory implements SchemeFactory {
      public postJobResumeOther_resultTupleScheme getScheme() {
        return new postJobResumeOther_resultTupleScheme();
      }
    }

    private static class postJobResumeOther_resultTupleScheme extends TupleScheme<postJobResumeOther_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postJobResumeOther_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postJobResumeOther_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getApplicationByUserIdAndPositionId_args implements org.apache.thrift.TBase<getApplicationByUserIdAndPositionId_args, getApplicationByUserIdAndPositionId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationByUserIdAndPositionId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationByUserIdAndPositionId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationByUserIdAndPositionId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationByUserIdAndPositionId_argsTupleSchemeFactory());
    }

    public long userId; // required
    public long positionId; // required
    public long companyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      POSITION_ID((short)2, "positionId"),
      COMPANY_ID((short)3, "companyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // POSITION_ID
            return POSITION_ID;
          case 3: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __POSITIONID_ISSET_ID = 1;
    private static final int __COMPANYID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationByUserIdAndPositionId_args.class, metaDataMap);
    }

    public getApplicationByUserIdAndPositionId_args() {
    }

    public getApplicationByUserIdAndPositionId_args(
      long userId,
      long positionId,
      long companyId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.positionId = positionId;
      setPositionIdIsSet(true);
      this.companyId = companyId;
      setCompanyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationByUserIdAndPositionId_args(getApplicationByUserIdAndPositionId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.positionId = other.positionId;
      this.companyId = other.companyId;
    }

    public getApplicationByUserIdAndPositionId_args deepCopy() {
      return new getApplicationByUserIdAndPositionId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setPositionIdIsSet(false);
      this.positionId = 0;
      setCompanyIdIsSet(false);
      this.companyId = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public getApplicationByUserIdAndPositionId_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public long getPositionId() {
      return this.positionId;
    }

    public getApplicationByUserIdAndPositionId_args setPositionId(long positionId) {
      this.positionId = positionId;
      setPositionIdIsSet(true);
      return this;
    }

    public void unsetPositionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionId() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    public void setPositionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
    }

    public long getCompanyId() {
      return this.companyId;
    }

    public getApplicationByUserIdAndPositionId_args setCompanyId(long companyId) {
      this.companyId = companyId;
      setCompanyIdIsSet(true);
      return this;
    }

    public void unsetCompanyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    public void setCompanyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case POSITION_ID:
        if (value == null) {
          unsetPositionId();
        } else {
          setPositionId((Long)value);
        }
        break;

      case COMPANY_ID:
        if (value == null) {
          unsetCompanyId();
        } else {
          setCompanyId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case POSITION_ID:
        return Long.valueOf(getPositionId());

      case COMPANY_ID:
        return Long.valueOf(getCompanyId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case POSITION_ID:
        return isSetPositionId();
      case COMPANY_ID:
        return isSetCompanyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationByUserIdAndPositionId_args)
        return this.equals((getApplicationByUserIdAndPositionId_args)that);
      return false;
    }

    public boolean equals(getApplicationByUserIdAndPositionId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_positionId = true;
      boolean that_present_positionId = true;
      if (this_present_positionId || that_present_positionId) {
        if (!(this_present_positionId && that_present_positionId))
          return false;
        if (this.positionId != that.positionId)
          return false;
      }

      boolean this_present_companyId = true;
      boolean that_present_companyId = true;
      if (this_present_companyId || that_present_companyId) {
        if (!(this_present_companyId && that_present_companyId))
          return false;
        if (this.companyId != that.companyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_positionId = true;
      list.add(present_positionId);
      if (present_positionId)
        list.add(positionId);

      boolean present_companyId = true;
      list.add(present_companyId);
      if (present_companyId)
        list.add(companyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplicationByUserIdAndPositionId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationByUserIdAndPositionId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationByUserIdAndPositionId_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationByUserIdAndPositionId_argsStandardScheme getScheme() {
        return new getApplicationByUserIdAndPositionId_argsStandardScheme();
      }
    }

    private static class getApplicationByUserIdAndPositionId_argsStandardScheme extends StandardScheme<getApplicationByUserIdAndPositionId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationByUserIdAndPositionId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.positionId = iprot.readI64();
                struct.setPositionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.companyId = iprot.readI64();
                struct.setCompanyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationByUserIdAndPositionId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI64(struct.positionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI64(struct.companyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationByUserIdAndPositionId_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationByUserIdAndPositionId_argsTupleScheme getScheme() {
        return new getApplicationByUserIdAndPositionId_argsTupleScheme();
      }
    }

    private static class getApplicationByUserIdAndPositionId_argsTupleScheme extends TupleScheme<getApplicationByUserIdAndPositionId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationByUserIdAndPositionId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetPositionId()) {
          optionals.set(1);
        }
        if (struct.isSetCompanyId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetPositionId()) {
          oprot.writeI64(struct.positionId);
        }
        if (struct.isSetCompanyId()) {
          oprot.writeI64(struct.companyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationByUserIdAndPositionId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.positionId = iprot.readI64();
          struct.setPositionIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.companyId = iprot.readI64();
          struct.setCompanyIdIsSet(true);
        }
      }
    }

  }

  public static class getApplicationByUserIdAndPositionId_result implements org.apache.thrift.TBase<getApplicationByUserIdAndPositionId_result, getApplicationByUserIdAndPositionId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationByUserIdAndPositionId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationByUserIdAndPositionId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationByUserIdAndPositionId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationByUserIdAndPositionId_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationByUserIdAndPositionId_result.class, metaDataMap);
    }

    public getApplicationByUserIdAndPositionId_result() {
    }

    public getApplicationByUserIdAndPositionId_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationByUserIdAndPositionId_result(getApplicationByUserIdAndPositionId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public getApplicationByUserIdAndPositionId_result deepCopy() {
      return new getApplicationByUserIdAndPositionId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getApplicationByUserIdAndPositionId_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationByUserIdAndPositionId_result)
        return this.equals((getApplicationByUserIdAndPositionId_result)that);
      return false;
    }

    public boolean equals(getApplicationByUserIdAndPositionId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplicationByUserIdAndPositionId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationByUserIdAndPositionId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationByUserIdAndPositionId_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationByUserIdAndPositionId_resultStandardScheme getScheme() {
        return new getApplicationByUserIdAndPositionId_resultStandardScheme();
      }
    }

    private static class getApplicationByUserIdAndPositionId_resultStandardScheme extends StandardScheme<getApplicationByUserIdAndPositionId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationByUserIdAndPositionId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationByUserIdAndPositionId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationByUserIdAndPositionId_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationByUserIdAndPositionId_resultTupleScheme getScheme() {
        return new getApplicationByUserIdAndPositionId_resultTupleScheme();
      }
    }

    private static class getApplicationByUserIdAndPositionId_resultTupleScheme extends TupleScheme<getApplicationByUserIdAndPositionId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationByUserIdAndPositionId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationByUserIdAndPositionId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
