/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-18")
public class SkillServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.Skill> getSkills(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException;

    public int postSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException;

    public int putSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException;

    public int delSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException;

    public int postSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException;

    public int putSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException;

    public int delSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSkills(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postSkill(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putSkill(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delSkill(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> getSkills(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException
    {
      send_getSkills(query, skill);
      return recv_getSkills();
    }

    public void send_getSkills(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException
    {
      getSkills_args args = new getSkills_args();
      args.setQuery(query);
      args.setSkill(skill);
      sendBase("getSkills", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> recv_getSkills() throws org.apache.thrift.TException
    {
      getSkills_result result = new getSkills_result();
      receiveBase(result, "getSkills");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSkills failed: unknown result");
    }

    public int postSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException
    {
      send_postSkills(skills);
      return recv_postSkills();
    }

    public void send_postSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException
    {
      postSkills_args args = new postSkills_args();
      args.setSkills(skills);
      sendBase("postSkills", args);
    }

    public int recv_postSkills() throws org.apache.thrift.TException
    {
      postSkills_result result = new postSkills_result();
      receiveBase(result, "postSkills");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postSkills failed: unknown result");
    }

    public int putSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException
    {
      send_putSkills(skills);
      return recv_putSkills();
    }

    public void send_putSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException
    {
      putSkills_args args = new putSkills_args();
      args.setSkills(skills);
      sendBase("putSkills", args);
    }

    public int recv_putSkills() throws org.apache.thrift.TException
    {
      putSkills_result result = new putSkills_result();
      receiveBase(result, "putSkills");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putSkills failed: unknown result");
    }

    public int delSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException
    {
      send_delSkills(skills);
      return recv_delSkills();
    }

    public void send_delSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) throws org.apache.thrift.TException
    {
      delSkills_args args = new delSkills_args();
      args.setSkills(skills);
      sendBase("delSkills", args);
    }

    public int recv_delSkills() throws org.apache.thrift.TException
    {
      delSkills_result result = new delSkills_result();
      receiveBase(result, "delSkills");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delSkills failed: unknown result");
    }

    public int postSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException
    {
      send_postSkill(skill);
      return recv_postSkill();
    }

    public void send_postSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException
    {
      postSkill_args args = new postSkill_args();
      args.setSkill(skill);
      sendBase("postSkill", args);
    }

    public int recv_postSkill() throws org.apache.thrift.TException
    {
      postSkill_result result = new postSkill_result();
      receiveBase(result, "postSkill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postSkill failed: unknown result");
    }

    public int putSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException
    {
      send_putSkill(skill);
      return recv_putSkill();
    }

    public void send_putSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException
    {
      putSkill_args args = new putSkill_args();
      args.setSkill(skill);
      sendBase("putSkill", args);
    }

    public int recv_putSkill() throws org.apache.thrift.TException
    {
      putSkill_result result = new putSkill_result();
      receiveBase(result, "putSkill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putSkill failed: unknown result");
    }

    public int delSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException
    {
      send_delSkill(skill);
      return recv_delSkill();
    }

    public void send_delSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) throws org.apache.thrift.TException
    {
      delSkill_args args = new delSkill_args();
      args.setSkill(skill);
      sendBase("delSkill", args);
    }

    public int recv_delSkill() throws org.apache.thrift.TException
    {
      delSkill_result result = new delSkill_result();
      receiveBase(result, "delSkill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delSkill failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSkills(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSkills_call method_call = new getSkills_call(query, skill, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSkills_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.Skill skill;
      public getSkills_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.skill = skill;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSkills", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSkills_args args = new getSkills_args();
        args.setQuery(query);
        args.setSkill(skill);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.Skill> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSkills();
      }
    }

    public void postSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postSkills_call method_call = new postSkills_call(skills, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postSkills_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Skill> skills;
      public postSkills_call(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.skills = skills;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postSkills", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postSkills_args args = new postSkills_args();
        args.setSkills(skills);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postSkills();
      }
    }

    public void putSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putSkills_call method_call = new putSkills_call(skills, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putSkills_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Skill> skills;
      public putSkills_call(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.skills = skills;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putSkills", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putSkills_args args = new putSkills_args();
        args.setSkills(skills);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putSkills();
      }
    }

    public void delSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delSkills_call method_call = new delSkills_call(skills, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delSkills_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Skill> skills;
      public delSkills_call(List<com.moseeker.thrift.gen.profile.struct.Skill> skills, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.skills = skills;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delSkills", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delSkills_args args = new delSkills_args();
        args.setSkills(skills);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delSkills();
      }
    }

    public void postSkill(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postSkill_call method_call = new postSkill_call(skill, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postSkill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Skill skill;
      public postSkill_call(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.skill = skill;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postSkill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postSkill_args args = new postSkill_args();
        args.setSkill(skill);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postSkill();
      }
    }

    public void putSkill(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putSkill_call method_call = new putSkill_call(skill, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putSkill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Skill skill;
      public putSkill_call(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.skill = skill;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putSkill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putSkill_args args = new putSkill_args();
        args.setSkill(skill);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putSkill();
      }
    }

    public void delSkill(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delSkill_call method_call = new delSkill_call(skill, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delSkill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Skill skill;
      public delSkill_call(com.moseeker.thrift.gen.profile.struct.Skill skill, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.skill = skill;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delSkill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delSkill_args args = new delSkill_args();
        args.setSkill(skill);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delSkill();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSkills", new getSkills());
      processMap.put("postSkills", new postSkills());
      processMap.put("putSkills", new putSkills());
      processMap.put("delSkills", new delSkills());
      processMap.put("postSkill", new postSkill());
      processMap.put("putSkill", new putSkill());
      processMap.put("delSkill", new delSkill());
      return processMap;
    }

    public static class getSkills<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSkills_args> {
      public getSkills() {
        super("getSkills");
      }

      public getSkills_args getEmptyArgsInstance() {
        return new getSkills_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSkills_result getResult(I iface, getSkills_args args) throws org.apache.thrift.TException {
        getSkills_result result = new getSkills_result();
        result.success = iface.getSkills(args.query, args.skill);
        return result;
      }
    }

    public static class postSkills<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postSkills_args> {
      public postSkills() {
        super("postSkills");
      }

      public postSkills_args getEmptyArgsInstance() {
        return new postSkills_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postSkills_result getResult(I iface, postSkills_args args) throws org.apache.thrift.TException {
        postSkills_result result = new postSkills_result();
        result.success = iface.postSkills(args.skills);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putSkills<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putSkills_args> {
      public putSkills() {
        super("putSkills");
      }

      public putSkills_args getEmptyArgsInstance() {
        return new putSkills_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putSkills_result getResult(I iface, putSkills_args args) throws org.apache.thrift.TException {
        putSkills_result result = new putSkills_result();
        result.success = iface.putSkills(args.skills);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delSkills<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delSkills_args> {
      public delSkills() {
        super("delSkills");
      }

      public delSkills_args getEmptyArgsInstance() {
        return new delSkills_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delSkills_result getResult(I iface, delSkills_args args) throws org.apache.thrift.TException {
        delSkills_result result = new delSkills_result();
        result.success = iface.delSkills(args.skills);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postSkill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postSkill_args> {
      public postSkill() {
        super("postSkill");
      }

      public postSkill_args getEmptyArgsInstance() {
        return new postSkill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postSkill_result getResult(I iface, postSkill_args args) throws org.apache.thrift.TException {
        postSkill_result result = new postSkill_result();
        result.success = iface.postSkill(args.skill);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putSkill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putSkill_args> {
      public putSkill() {
        super("putSkill");
      }

      public putSkill_args getEmptyArgsInstance() {
        return new putSkill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putSkill_result getResult(I iface, putSkill_args args) throws org.apache.thrift.TException {
        putSkill_result result = new putSkill_result();
        result.success = iface.putSkill(args.skill);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delSkill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delSkill_args> {
      public delSkill() {
        super("delSkill");
      }

      public delSkill_args getEmptyArgsInstance() {
        return new delSkill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delSkill_result getResult(I iface, delSkill_args args) throws org.apache.thrift.TException {
        delSkill_result result = new delSkill_result();
        result.success = iface.delSkill(args.skill);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSkills", new getSkills());
      processMap.put("postSkills", new postSkills());
      processMap.put("putSkills", new putSkills());
      processMap.put("delSkills", new delSkills());
      processMap.put("postSkill", new postSkill());
      processMap.put("putSkill", new putSkill());
      processMap.put("delSkill", new delSkill());
      return processMap;
    }

    public static class getSkills<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSkills_args, List<com.moseeker.thrift.gen.profile.struct.Skill>> {
      public getSkills() {
        super("getSkills");
      }

      public getSkills_args getEmptyArgsInstance() {
        return new getSkills_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Skill>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Skill>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.Skill> o) {
            getSkills_result result = new getSkills_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSkills_result result = new getSkills_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSkills_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Skill>> resultHandler) throws TException {
        iface.getSkills(args.query, args.skill,resultHandler);
      }
    }

    public static class postSkills<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postSkills_args, Integer> {
      public postSkills() {
        super("postSkills");
      }

      public postSkills_args getEmptyArgsInstance() {
        return new postSkills_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postSkills_result result = new postSkills_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postSkills_result result = new postSkills_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postSkills_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postSkills(args.skills,resultHandler);
      }
    }

    public static class putSkills<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putSkills_args, Integer> {
      public putSkills() {
        super("putSkills");
      }

      public putSkills_args getEmptyArgsInstance() {
        return new putSkills_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putSkills_result result = new putSkills_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putSkills_result result = new putSkills_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putSkills_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putSkills(args.skills,resultHandler);
      }
    }

    public static class delSkills<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delSkills_args, Integer> {
      public delSkills() {
        super("delSkills");
      }

      public delSkills_args getEmptyArgsInstance() {
        return new delSkills_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delSkills_result result = new delSkills_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delSkills_result result = new delSkills_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delSkills_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delSkills(args.skills,resultHandler);
      }
    }

    public static class postSkill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postSkill_args, Integer> {
      public postSkill() {
        super("postSkill");
      }

      public postSkill_args getEmptyArgsInstance() {
        return new postSkill_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postSkill_result result = new postSkill_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postSkill_result result = new postSkill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postSkill_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postSkill(args.skill,resultHandler);
      }
    }

    public static class putSkill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putSkill_args, Integer> {
      public putSkill() {
        super("putSkill");
      }

      public putSkill_args getEmptyArgsInstance() {
        return new putSkill_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putSkill_result result = new putSkill_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putSkill_result result = new putSkill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putSkill_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putSkill(args.skill,resultHandler);
      }
    }

    public static class delSkill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delSkill_args, Integer> {
      public delSkill() {
        super("delSkill");
      }

      public delSkill_args getEmptyArgsInstance() {
        return new delSkill_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delSkill_result result = new delSkill_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delSkill_result result = new delSkill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delSkill_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delSkill(args.skill,resultHandler);
      }
    }

  }

  public static class getSkills_args implements org.apache.thrift.TBase<getSkills_args, getSkills_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSkills_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSkills_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("skill", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSkills_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSkills_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.Skill skill; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      SKILL((short)2, "skill");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // SKILL
            return SKILL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.SKILL, new org.apache.thrift.meta_data.FieldMetaData("skill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Skill.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSkills_args.class, metaDataMap);
    }

    public getSkills_args() {
    }

    public getSkills_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.Skill skill)
    {
      this();
      this.query = query;
      this.skill = skill;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSkills_args(getSkills_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetSkill()) {
        this.skill = new com.moseeker.thrift.gen.profile.struct.Skill(other.skill);
      }
    }

    public getSkills_args deepCopy() {
      return new getSkills_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.skill = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getSkills_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.Skill getSkill() {
      return this.skill;
    }

    public getSkills_args setSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) {
      this.skill = skill;
      return this;
    }

    public void unsetSkill() {
      this.skill = null;
    }

    /** Returns true if field skill is set (has been assigned a value) and false otherwise */
    public boolean isSetSkill() {
      return this.skill != null;
    }

    public void setSkillIsSet(boolean value) {
      if (!value) {
        this.skill = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case SKILL:
        if (value == null) {
          unsetSkill();
        } else {
          setSkill((com.moseeker.thrift.gen.profile.struct.Skill)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case SKILL:
        return getSkill();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case SKILL:
        return isSetSkill();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSkills_args)
        return this.equals((getSkills_args)that);
      return false;
    }

    public boolean equals(getSkills_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_skill = true && this.isSetSkill();
      boolean that_present_skill = true && that.isSetSkill();
      if (this_present_skill || that_present_skill) {
        if (!(this_present_skill && that_present_skill))
          return false;
        if (!this.skill.equals(that.skill))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_skill = true && (isSetSkill());
      list.add(present_skill);
      if (present_skill)
        list.add(skill);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSkills_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSkill()).compareTo(other.isSetSkill());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkill()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill, other.skill);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSkills_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("skill:");
      if (this.skill == null) {
        sb.append("null");
      } else {
        sb.append(this.skill);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (skill != null) {
        skill.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSkills_argsStandardSchemeFactory implements SchemeFactory {
      public getSkills_argsStandardScheme getScheme() {
        return new getSkills_argsStandardScheme();
      }
    }

    private static class getSkills_argsStandardScheme extends StandardScheme<getSkills_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSkills_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SKILL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.skill = new com.moseeker.thrift.gen.profile.struct.Skill();
                struct.skill.read(iprot);
                struct.setSkillIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSkills_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.skill != null) {
          oprot.writeFieldBegin(SKILL_FIELD_DESC);
          struct.skill.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSkills_argsTupleSchemeFactory implements SchemeFactory {
      public getSkills_argsTupleScheme getScheme() {
        return new getSkills_argsTupleScheme();
      }
    }

    private static class getSkills_argsTupleScheme extends TupleScheme<getSkills_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSkills_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetSkill()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetSkill()) {
          struct.skill.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSkills_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.skill = new com.moseeker.thrift.gen.profile.struct.Skill();
          struct.skill.read(iprot);
          struct.setSkillIsSet(true);
        }
      }
    }

  }

  public static class getSkills_result implements org.apache.thrift.TBase<getSkills_result, getSkills_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSkills_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSkills_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSkills_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSkills_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Skill.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSkills_result.class, metaDataMap);
    }

    public getSkills_result() {
    }

    public getSkills_result(
      List<com.moseeker.thrift.gen.profile.struct.Skill> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSkills_result(getSkills_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.Skill> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.Skill other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.Skill(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSkills_result deepCopy() {
      return new getSkills_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Skill> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.Skill elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> getSuccess() {
      return this.success;
    }

    public getSkills_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.Skill> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.Skill>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSkills_result)
        return this.equals((getSkills_result)that);
      return false;
    }

    public boolean equals(getSkills_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSkills_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSkills_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSkills_resultStandardSchemeFactory implements SchemeFactory {
      public getSkills_resultStandardScheme getScheme() {
        return new getSkills_resultStandardScheme();
      }
    }

    private static class getSkills_resultStandardScheme extends StandardScheme<getSkills_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSkills_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list416 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(_list416.size);
                  com.moseeker.thrift.gen.profile.struct.Skill _elem417;
                  for (int _i418 = 0; _i418 < _list416.size; ++_i418)
                  {
                    _elem417 = new com.moseeker.thrift.gen.profile.struct.Skill();
                    _elem417.read(iprot);
                    struct.success.add(_elem417);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSkills_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.Skill _iter419 : struct.success)
            {
              _iter419.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSkills_resultTupleSchemeFactory implements SchemeFactory {
      public getSkills_resultTupleScheme getScheme() {
        return new getSkills_resultTupleScheme();
      }
    }

    private static class getSkills_resultTupleScheme extends TupleScheme<getSkills_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSkills_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.Skill _iter420 : struct.success)
            {
              _iter420.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSkills_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list421 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(_list421.size);
            com.moseeker.thrift.gen.profile.struct.Skill _elem422;
            for (int _i423 = 0; _i423 < _list421.size; ++_i423)
            {
              _elem422 = new com.moseeker.thrift.gen.profile.struct.Skill();
              _elem422.read(iprot);
              struct.success.add(_elem422);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postSkills_args implements org.apache.thrift.TBase<postSkills_args, postSkills_args._Fields>, java.io.Serializable, Cloneable, Comparable<postSkills_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSkills_args");

    private static final org.apache.thrift.protocol.TField SKILLS_FIELD_DESC = new org.apache.thrift.protocol.TField("skills", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSkills_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSkills_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> skills; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SKILLS((short)1, "skills");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SKILLS
            return SKILLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SKILLS, new org.apache.thrift.meta_data.FieldMetaData("skills", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Skill.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSkills_args.class, metaDataMap);
    }

    public postSkills_args() {
    }

    public postSkills_args(
      List<com.moseeker.thrift.gen.profile.struct.Skill> skills)
    {
      this();
      this.skills = skills;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSkills_args(postSkills_args other) {
      if (other.isSetSkills()) {
        List<com.moseeker.thrift.gen.profile.struct.Skill> __this__skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(other.skills.size());
        for (com.moseeker.thrift.gen.profile.struct.Skill other_element : other.skills) {
          __this__skills.add(new com.moseeker.thrift.gen.profile.struct.Skill(other_element));
        }
        this.skills = __this__skills;
      }
    }

    public postSkills_args deepCopy() {
      return new postSkills_args(this);
    }

    @Override
    public void clear() {
      this.skills = null;
    }

    public int getSkillsSize() {
      return (this.skills == null) ? 0 : this.skills.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Skill> getSkillsIterator() {
      return (this.skills == null) ? null : this.skills.iterator();
    }

    public void addToSkills(com.moseeker.thrift.gen.profile.struct.Skill elem) {
      if (this.skills == null) {
        this.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>();
      }
      this.skills.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> getSkills() {
      return this.skills;
    }

    public postSkills_args setSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) {
      this.skills = skills;
      return this;
    }

    public void unsetSkills() {
      this.skills = null;
    }

    /** Returns true if field skills is set (has been assigned a value) and false otherwise */
    public boolean isSetSkills() {
      return this.skills != null;
    }

    public void setSkillsIsSet(boolean value) {
      if (!value) {
        this.skills = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SKILLS:
        if (value == null) {
          unsetSkills();
        } else {
          setSkills((List<com.moseeker.thrift.gen.profile.struct.Skill>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SKILLS:
        return getSkills();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SKILLS:
        return isSetSkills();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSkills_args)
        return this.equals((postSkills_args)that);
      return false;
    }

    public boolean equals(postSkills_args that) {
      if (that == null)
        return false;

      boolean this_present_skills = true && this.isSetSkills();
      boolean that_present_skills = true && that.isSetSkills();
      if (this_present_skills || that_present_skills) {
        if (!(this_present_skills && that_present_skills))
          return false;
        if (!this.skills.equals(that.skills))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_skills = true && (isSetSkills());
      list.add(present_skills);
      if (present_skills)
        list.add(skills);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSkills_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSkills()).compareTo(other.isSetSkills());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkills()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skills, other.skills);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSkills_args(");
      boolean first = true;

      sb.append("skills:");
      if (this.skills == null) {
        sb.append("null");
      } else {
        sb.append(this.skills);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSkills_argsStandardSchemeFactory implements SchemeFactory {
      public postSkills_argsStandardScheme getScheme() {
        return new postSkills_argsStandardScheme();
      }
    }

    private static class postSkills_argsStandardScheme extends StandardScheme<postSkills_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSkills_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SKILLS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list424 = iprot.readListBegin();
                  struct.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(_list424.size);
                  com.moseeker.thrift.gen.profile.struct.Skill _elem425;
                  for (int _i426 = 0; _i426 < _list424.size; ++_i426)
                  {
                    _elem425 = new com.moseeker.thrift.gen.profile.struct.Skill();
                    _elem425.read(iprot);
                    struct.skills.add(_elem425);
                  }
                  iprot.readListEnd();
                }
                struct.setSkillsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSkills_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.skills != null) {
          oprot.writeFieldBegin(SKILLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.skills.size()));
            for (com.moseeker.thrift.gen.profile.struct.Skill _iter427 : struct.skills)
            {
              _iter427.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSkills_argsTupleSchemeFactory implements SchemeFactory {
      public postSkills_argsTupleScheme getScheme() {
        return new postSkills_argsTupleScheme();
      }
    }

    private static class postSkills_argsTupleScheme extends TupleScheme<postSkills_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSkills_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSkills()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSkills()) {
          {
            oprot.writeI32(struct.skills.size());
            for (com.moseeker.thrift.gen.profile.struct.Skill _iter428 : struct.skills)
            {
              _iter428.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSkills_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list429 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(_list429.size);
            com.moseeker.thrift.gen.profile.struct.Skill _elem430;
            for (int _i431 = 0; _i431 < _list429.size; ++_i431)
            {
              _elem430 = new com.moseeker.thrift.gen.profile.struct.Skill();
              _elem430.read(iprot);
              struct.skills.add(_elem430);
            }
          }
          struct.setSkillsIsSet(true);
        }
      }
    }

  }

  public static class postSkills_result implements org.apache.thrift.TBase<postSkills_result, postSkills_result._Fields>, java.io.Serializable, Cloneable, Comparable<postSkills_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSkills_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSkills_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSkills_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSkills_result.class, metaDataMap);
    }

    public postSkills_result() {
    }

    public postSkills_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSkills_result(postSkills_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postSkills_result deepCopy() {
      return new postSkills_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postSkills_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSkills_result)
        return this.equals((postSkills_result)that);
      return false;
    }

    public boolean equals(postSkills_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSkills_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSkills_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSkills_resultStandardSchemeFactory implements SchemeFactory {
      public postSkills_resultStandardScheme getScheme() {
        return new postSkills_resultStandardScheme();
      }
    }

    private static class postSkills_resultStandardScheme extends StandardScheme<postSkills_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSkills_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSkills_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSkills_resultTupleSchemeFactory implements SchemeFactory {
      public postSkills_resultTupleScheme getScheme() {
        return new postSkills_resultTupleScheme();
      }
    }

    private static class postSkills_resultTupleScheme extends TupleScheme<postSkills_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSkills_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSkills_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putSkills_args implements org.apache.thrift.TBase<putSkills_args, putSkills_args._Fields>, java.io.Serializable, Cloneable, Comparable<putSkills_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putSkills_args");

    private static final org.apache.thrift.protocol.TField SKILLS_FIELD_DESC = new org.apache.thrift.protocol.TField("skills", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putSkills_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putSkills_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> skills; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SKILLS((short)1, "skills");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SKILLS
            return SKILLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SKILLS, new org.apache.thrift.meta_data.FieldMetaData("skills", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Skill.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putSkills_args.class, metaDataMap);
    }

    public putSkills_args() {
    }

    public putSkills_args(
      List<com.moseeker.thrift.gen.profile.struct.Skill> skills)
    {
      this();
      this.skills = skills;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putSkills_args(putSkills_args other) {
      if (other.isSetSkills()) {
        List<com.moseeker.thrift.gen.profile.struct.Skill> __this__skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(other.skills.size());
        for (com.moseeker.thrift.gen.profile.struct.Skill other_element : other.skills) {
          __this__skills.add(new com.moseeker.thrift.gen.profile.struct.Skill(other_element));
        }
        this.skills = __this__skills;
      }
    }

    public putSkills_args deepCopy() {
      return new putSkills_args(this);
    }

    @Override
    public void clear() {
      this.skills = null;
    }

    public int getSkillsSize() {
      return (this.skills == null) ? 0 : this.skills.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Skill> getSkillsIterator() {
      return (this.skills == null) ? null : this.skills.iterator();
    }

    public void addToSkills(com.moseeker.thrift.gen.profile.struct.Skill elem) {
      if (this.skills == null) {
        this.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>();
      }
      this.skills.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> getSkills() {
      return this.skills;
    }

    public putSkills_args setSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) {
      this.skills = skills;
      return this;
    }

    public void unsetSkills() {
      this.skills = null;
    }

    /** Returns true if field skills is set (has been assigned a value) and false otherwise */
    public boolean isSetSkills() {
      return this.skills != null;
    }

    public void setSkillsIsSet(boolean value) {
      if (!value) {
        this.skills = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SKILLS:
        if (value == null) {
          unsetSkills();
        } else {
          setSkills((List<com.moseeker.thrift.gen.profile.struct.Skill>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SKILLS:
        return getSkills();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SKILLS:
        return isSetSkills();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putSkills_args)
        return this.equals((putSkills_args)that);
      return false;
    }

    public boolean equals(putSkills_args that) {
      if (that == null)
        return false;

      boolean this_present_skills = true && this.isSetSkills();
      boolean that_present_skills = true && that.isSetSkills();
      if (this_present_skills || that_present_skills) {
        if (!(this_present_skills && that_present_skills))
          return false;
        if (!this.skills.equals(that.skills))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_skills = true && (isSetSkills());
      list.add(present_skills);
      if (present_skills)
        list.add(skills);

      return list.hashCode();
    }

    @Override
    public int compareTo(putSkills_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSkills()).compareTo(other.isSetSkills());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkills()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skills, other.skills);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putSkills_args(");
      boolean first = true;

      sb.append("skills:");
      if (this.skills == null) {
        sb.append("null");
      } else {
        sb.append(this.skills);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putSkills_argsStandardSchemeFactory implements SchemeFactory {
      public putSkills_argsStandardScheme getScheme() {
        return new putSkills_argsStandardScheme();
      }
    }

    private static class putSkills_argsStandardScheme extends StandardScheme<putSkills_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putSkills_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SKILLS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list432 = iprot.readListBegin();
                  struct.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(_list432.size);
                  com.moseeker.thrift.gen.profile.struct.Skill _elem433;
                  for (int _i434 = 0; _i434 < _list432.size; ++_i434)
                  {
                    _elem433 = new com.moseeker.thrift.gen.profile.struct.Skill();
                    _elem433.read(iprot);
                    struct.skills.add(_elem433);
                  }
                  iprot.readListEnd();
                }
                struct.setSkillsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putSkills_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.skills != null) {
          oprot.writeFieldBegin(SKILLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.skills.size()));
            for (com.moseeker.thrift.gen.profile.struct.Skill _iter435 : struct.skills)
            {
              _iter435.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putSkills_argsTupleSchemeFactory implements SchemeFactory {
      public putSkills_argsTupleScheme getScheme() {
        return new putSkills_argsTupleScheme();
      }
    }

    private static class putSkills_argsTupleScheme extends TupleScheme<putSkills_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putSkills_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSkills()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSkills()) {
          {
            oprot.writeI32(struct.skills.size());
            for (com.moseeker.thrift.gen.profile.struct.Skill _iter436 : struct.skills)
            {
              _iter436.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putSkills_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list437 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(_list437.size);
            com.moseeker.thrift.gen.profile.struct.Skill _elem438;
            for (int _i439 = 0; _i439 < _list437.size; ++_i439)
            {
              _elem438 = new com.moseeker.thrift.gen.profile.struct.Skill();
              _elem438.read(iprot);
              struct.skills.add(_elem438);
            }
          }
          struct.setSkillsIsSet(true);
        }
      }
    }

  }

  public static class putSkills_result implements org.apache.thrift.TBase<putSkills_result, putSkills_result._Fields>, java.io.Serializable, Cloneable, Comparable<putSkills_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putSkills_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putSkills_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putSkills_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putSkills_result.class, metaDataMap);
    }

    public putSkills_result() {
    }

    public putSkills_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putSkills_result(putSkills_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putSkills_result deepCopy() {
      return new putSkills_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putSkills_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putSkills_result)
        return this.equals((putSkills_result)that);
      return false;
    }

    public boolean equals(putSkills_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putSkills_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putSkills_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putSkills_resultStandardSchemeFactory implements SchemeFactory {
      public putSkills_resultStandardScheme getScheme() {
        return new putSkills_resultStandardScheme();
      }
    }

    private static class putSkills_resultStandardScheme extends StandardScheme<putSkills_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putSkills_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putSkills_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putSkills_resultTupleSchemeFactory implements SchemeFactory {
      public putSkills_resultTupleScheme getScheme() {
        return new putSkills_resultTupleScheme();
      }
    }

    private static class putSkills_resultTupleScheme extends TupleScheme<putSkills_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putSkills_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putSkills_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delSkills_args implements org.apache.thrift.TBase<delSkills_args, delSkills_args._Fields>, java.io.Serializable, Cloneable, Comparable<delSkills_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSkills_args");

    private static final org.apache.thrift.protocol.TField SKILLS_FIELD_DESC = new org.apache.thrift.protocol.TField("skills", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSkills_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSkills_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> skills; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SKILLS((short)1, "skills");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SKILLS
            return SKILLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SKILLS, new org.apache.thrift.meta_data.FieldMetaData("skills", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Skill.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSkills_args.class, metaDataMap);
    }

    public delSkills_args() {
    }

    public delSkills_args(
      List<com.moseeker.thrift.gen.profile.struct.Skill> skills)
    {
      this();
      this.skills = skills;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSkills_args(delSkills_args other) {
      if (other.isSetSkills()) {
        List<com.moseeker.thrift.gen.profile.struct.Skill> __this__skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(other.skills.size());
        for (com.moseeker.thrift.gen.profile.struct.Skill other_element : other.skills) {
          __this__skills.add(new com.moseeker.thrift.gen.profile.struct.Skill(other_element));
        }
        this.skills = __this__skills;
      }
    }

    public delSkills_args deepCopy() {
      return new delSkills_args(this);
    }

    @Override
    public void clear() {
      this.skills = null;
    }

    public int getSkillsSize() {
      return (this.skills == null) ? 0 : this.skills.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Skill> getSkillsIterator() {
      return (this.skills == null) ? null : this.skills.iterator();
    }

    public void addToSkills(com.moseeker.thrift.gen.profile.struct.Skill elem) {
      if (this.skills == null) {
        this.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>();
      }
      this.skills.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Skill> getSkills() {
      return this.skills;
    }

    public delSkills_args setSkills(List<com.moseeker.thrift.gen.profile.struct.Skill> skills) {
      this.skills = skills;
      return this;
    }

    public void unsetSkills() {
      this.skills = null;
    }

    /** Returns true if field skills is set (has been assigned a value) and false otherwise */
    public boolean isSetSkills() {
      return this.skills != null;
    }

    public void setSkillsIsSet(boolean value) {
      if (!value) {
        this.skills = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SKILLS:
        if (value == null) {
          unsetSkills();
        } else {
          setSkills((List<com.moseeker.thrift.gen.profile.struct.Skill>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SKILLS:
        return getSkills();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SKILLS:
        return isSetSkills();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSkills_args)
        return this.equals((delSkills_args)that);
      return false;
    }

    public boolean equals(delSkills_args that) {
      if (that == null)
        return false;

      boolean this_present_skills = true && this.isSetSkills();
      boolean that_present_skills = true && that.isSetSkills();
      if (this_present_skills || that_present_skills) {
        if (!(this_present_skills && that_present_skills))
          return false;
        if (!this.skills.equals(that.skills))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_skills = true && (isSetSkills());
      list.add(present_skills);
      if (present_skills)
        list.add(skills);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSkills_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSkills()).compareTo(other.isSetSkills());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkills()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skills, other.skills);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSkills_args(");
      boolean first = true;

      sb.append("skills:");
      if (this.skills == null) {
        sb.append("null");
      } else {
        sb.append(this.skills);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSkills_argsStandardSchemeFactory implements SchemeFactory {
      public delSkills_argsStandardScheme getScheme() {
        return new delSkills_argsStandardScheme();
      }
    }

    private static class delSkills_argsStandardScheme extends StandardScheme<delSkills_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSkills_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SKILLS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list440 = iprot.readListBegin();
                  struct.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(_list440.size);
                  com.moseeker.thrift.gen.profile.struct.Skill _elem441;
                  for (int _i442 = 0; _i442 < _list440.size; ++_i442)
                  {
                    _elem441 = new com.moseeker.thrift.gen.profile.struct.Skill();
                    _elem441.read(iprot);
                    struct.skills.add(_elem441);
                  }
                  iprot.readListEnd();
                }
                struct.setSkillsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSkills_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.skills != null) {
          oprot.writeFieldBegin(SKILLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.skills.size()));
            for (com.moseeker.thrift.gen.profile.struct.Skill _iter443 : struct.skills)
            {
              _iter443.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSkills_argsTupleSchemeFactory implements SchemeFactory {
      public delSkills_argsTupleScheme getScheme() {
        return new delSkills_argsTupleScheme();
      }
    }

    private static class delSkills_argsTupleScheme extends TupleScheme<delSkills_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSkills_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSkills()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSkills()) {
          {
            oprot.writeI32(struct.skills.size());
            for (com.moseeker.thrift.gen.profile.struct.Skill _iter444 : struct.skills)
            {
              _iter444.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSkills_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list445 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.skills = new ArrayList<com.moseeker.thrift.gen.profile.struct.Skill>(_list445.size);
            com.moseeker.thrift.gen.profile.struct.Skill _elem446;
            for (int _i447 = 0; _i447 < _list445.size; ++_i447)
            {
              _elem446 = new com.moseeker.thrift.gen.profile.struct.Skill();
              _elem446.read(iprot);
              struct.skills.add(_elem446);
            }
          }
          struct.setSkillsIsSet(true);
        }
      }
    }

  }

  public static class delSkills_result implements org.apache.thrift.TBase<delSkills_result, delSkills_result._Fields>, java.io.Serializable, Cloneable, Comparable<delSkills_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSkills_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSkills_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSkills_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSkills_result.class, metaDataMap);
    }

    public delSkills_result() {
    }

    public delSkills_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSkills_result(delSkills_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delSkills_result deepCopy() {
      return new delSkills_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delSkills_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSkills_result)
        return this.equals((delSkills_result)that);
      return false;
    }

    public boolean equals(delSkills_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSkills_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSkills_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSkills_resultStandardSchemeFactory implements SchemeFactory {
      public delSkills_resultStandardScheme getScheme() {
        return new delSkills_resultStandardScheme();
      }
    }

    private static class delSkills_resultStandardScheme extends StandardScheme<delSkills_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSkills_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSkills_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSkills_resultTupleSchemeFactory implements SchemeFactory {
      public delSkills_resultTupleScheme getScheme() {
        return new delSkills_resultTupleScheme();
      }
    }

    private static class delSkills_resultTupleScheme extends TupleScheme<delSkills_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSkills_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSkills_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postSkill_args implements org.apache.thrift.TBase<postSkill_args, postSkill_args._Fields>, java.io.Serializable, Cloneable, Comparable<postSkill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSkill_args");

    private static final org.apache.thrift.protocol.TField SKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("skill", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSkill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSkill_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Skill skill; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SKILL((short)1, "skill");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SKILL
            return SKILL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SKILL, new org.apache.thrift.meta_data.FieldMetaData("skill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Skill.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSkill_args.class, metaDataMap);
    }

    public postSkill_args() {
    }

    public postSkill_args(
      com.moseeker.thrift.gen.profile.struct.Skill skill)
    {
      this();
      this.skill = skill;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSkill_args(postSkill_args other) {
      if (other.isSetSkill()) {
        this.skill = new com.moseeker.thrift.gen.profile.struct.Skill(other.skill);
      }
    }

    public postSkill_args deepCopy() {
      return new postSkill_args(this);
    }

    @Override
    public void clear() {
      this.skill = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Skill getSkill() {
      return this.skill;
    }

    public postSkill_args setSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) {
      this.skill = skill;
      return this;
    }

    public void unsetSkill() {
      this.skill = null;
    }

    /** Returns true if field skill is set (has been assigned a value) and false otherwise */
    public boolean isSetSkill() {
      return this.skill != null;
    }

    public void setSkillIsSet(boolean value) {
      if (!value) {
        this.skill = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SKILL:
        if (value == null) {
          unsetSkill();
        } else {
          setSkill((com.moseeker.thrift.gen.profile.struct.Skill)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SKILL:
        return getSkill();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SKILL:
        return isSetSkill();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSkill_args)
        return this.equals((postSkill_args)that);
      return false;
    }

    public boolean equals(postSkill_args that) {
      if (that == null)
        return false;

      boolean this_present_skill = true && this.isSetSkill();
      boolean that_present_skill = true && that.isSetSkill();
      if (this_present_skill || that_present_skill) {
        if (!(this_present_skill && that_present_skill))
          return false;
        if (!this.skill.equals(that.skill))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_skill = true && (isSetSkill());
      list.add(present_skill);
      if (present_skill)
        list.add(skill);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSkill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSkill()).compareTo(other.isSetSkill());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkill()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill, other.skill);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSkill_args(");
      boolean first = true;

      sb.append("skill:");
      if (this.skill == null) {
        sb.append("null");
      } else {
        sb.append(this.skill);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (skill != null) {
        skill.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSkill_argsStandardSchemeFactory implements SchemeFactory {
      public postSkill_argsStandardScheme getScheme() {
        return new postSkill_argsStandardScheme();
      }
    }

    private static class postSkill_argsStandardScheme extends StandardScheme<postSkill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSkill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SKILL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.skill = new com.moseeker.thrift.gen.profile.struct.Skill();
                struct.skill.read(iprot);
                struct.setSkillIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSkill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.skill != null) {
          oprot.writeFieldBegin(SKILL_FIELD_DESC);
          struct.skill.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSkill_argsTupleSchemeFactory implements SchemeFactory {
      public postSkill_argsTupleScheme getScheme() {
        return new postSkill_argsTupleScheme();
      }
    }

    private static class postSkill_argsTupleScheme extends TupleScheme<postSkill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSkill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSkill()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSkill()) {
          struct.skill.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSkill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.skill = new com.moseeker.thrift.gen.profile.struct.Skill();
          struct.skill.read(iprot);
          struct.setSkillIsSet(true);
        }
      }
    }

  }

  public static class postSkill_result implements org.apache.thrift.TBase<postSkill_result, postSkill_result._Fields>, java.io.Serializable, Cloneable, Comparable<postSkill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSkill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSkill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSkill_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSkill_result.class, metaDataMap);
    }

    public postSkill_result() {
    }

    public postSkill_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSkill_result(postSkill_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postSkill_result deepCopy() {
      return new postSkill_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postSkill_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSkill_result)
        return this.equals((postSkill_result)that);
      return false;
    }

    public boolean equals(postSkill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSkill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSkill_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSkill_resultStandardSchemeFactory implements SchemeFactory {
      public postSkill_resultStandardScheme getScheme() {
        return new postSkill_resultStandardScheme();
      }
    }

    private static class postSkill_resultStandardScheme extends StandardScheme<postSkill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSkill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSkill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSkill_resultTupleSchemeFactory implements SchemeFactory {
      public postSkill_resultTupleScheme getScheme() {
        return new postSkill_resultTupleScheme();
      }
    }

    private static class postSkill_resultTupleScheme extends TupleScheme<postSkill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSkill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSkill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putSkill_args implements org.apache.thrift.TBase<putSkill_args, putSkill_args._Fields>, java.io.Serializable, Cloneable, Comparable<putSkill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putSkill_args");

    private static final org.apache.thrift.protocol.TField SKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("skill", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putSkill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putSkill_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Skill skill; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SKILL((short)1, "skill");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SKILL
            return SKILL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SKILL, new org.apache.thrift.meta_data.FieldMetaData("skill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Skill.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putSkill_args.class, metaDataMap);
    }

    public putSkill_args() {
    }

    public putSkill_args(
      com.moseeker.thrift.gen.profile.struct.Skill skill)
    {
      this();
      this.skill = skill;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putSkill_args(putSkill_args other) {
      if (other.isSetSkill()) {
        this.skill = new com.moseeker.thrift.gen.profile.struct.Skill(other.skill);
      }
    }

    public putSkill_args deepCopy() {
      return new putSkill_args(this);
    }

    @Override
    public void clear() {
      this.skill = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Skill getSkill() {
      return this.skill;
    }

    public putSkill_args setSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) {
      this.skill = skill;
      return this;
    }

    public void unsetSkill() {
      this.skill = null;
    }

    /** Returns true if field skill is set (has been assigned a value) and false otherwise */
    public boolean isSetSkill() {
      return this.skill != null;
    }

    public void setSkillIsSet(boolean value) {
      if (!value) {
        this.skill = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SKILL:
        if (value == null) {
          unsetSkill();
        } else {
          setSkill((com.moseeker.thrift.gen.profile.struct.Skill)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SKILL:
        return getSkill();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SKILL:
        return isSetSkill();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putSkill_args)
        return this.equals((putSkill_args)that);
      return false;
    }

    public boolean equals(putSkill_args that) {
      if (that == null)
        return false;

      boolean this_present_skill = true && this.isSetSkill();
      boolean that_present_skill = true && that.isSetSkill();
      if (this_present_skill || that_present_skill) {
        if (!(this_present_skill && that_present_skill))
          return false;
        if (!this.skill.equals(that.skill))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_skill = true && (isSetSkill());
      list.add(present_skill);
      if (present_skill)
        list.add(skill);

      return list.hashCode();
    }

    @Override
    public int compareTo(putSkill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSkill()).compareTo(other.isSetSkill());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkill()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill, other.skill);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putSkill_args(");
      boolean first = true;

      sb.append("skill:");
      if (this.skill == null) {
        sb.append("null");
      } else {
        sb.append(this.skill);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (skill != null) {
        skill.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putSkill_argsStandardSchemeFactory implements SchemeFactory {
      public putSkill_argsStandardScheme getScheme() {
        return new putSkill_argsStandardScheme();
      }
    }

    private static class putSkill_argsStandardScheme extends StandardScheme<putSkill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putSkill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SKILL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.skill = new com.moseeker.thrift.gen.profile.struct.Skill();
                struct.skill.read(iprot);
                struct.setSkillIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putSkill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.skill != null) {
          oprot.writeFieldBegin(SKILL_FIELD_DESC);
          struct.skill.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putSkill_argsTupleSchemeFactory implements SchemeFactory {
      public putSkill_argsTupleScheme getScheme() {
        return new putSkill_argsTupleScheme();
      }
    }

    private static class putSkill_argsTupleScheme extends TupleScheme<putSkill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putSkill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSkill()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSkill()) {
          struct.skill.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putSkill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.skill = new com.moseeker.thrift.gen.profile.struct.Skill();
          struct.skill.read(iprot);
          struct.setSkillIsSet(true);
        }
      }
    }

  }

  public static class putSkill_result implements org.apache.thrift.TBase<putSkill_result, putSkill_result._Fields>, java.io.Serializable, Cloneable, Comparable<putSkill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putSkill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putSkill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putSkill_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putSkill_result.class, metaDataMap);
    }

    public putSkill_result() {
    }

    public putSkill_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putSkill_result(putSkill_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putSkill_result deepCopy() {
      return new putSkill_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putSkill_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putSkill_result)
        return this.equals((putSkill_result)that);
      return false;
    }

    public boolean equals(putSkill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putSkill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putSkill_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putSkill_resultStandardSchemeFactory implements SchemeFactory {
      public putSkill_resultStandardScheme getScheme() {
        return new putSkill_resultStandardScheme();
      }
    }

    private static class putSkill_resultStandardScheme extends StandardScheme<putSkill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putSkill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putSkill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putSkill_resultTupleSchemeFactory implements SchemeFactory {
      public putSkill_resultTupleScheme getScheme() {
        return new putSkill_resultTupleScheme();
      }
    }

    private static class putSkill_resultTupleScheme extends TupleScheme<putSkill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putSkill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putSkill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delSkill_args implements org.apache.thrift.TBase<delSkill_args, delSkill_args._Fields>, java.io.Serializable, Cloneable, Comparable<delSkill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSkill_args");

    private static final org.apache.thrift.protocol.TField SKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("skill", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSkill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSkill_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Skill skill; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SKILL((short)1, "skill");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SKILL
            return SKILL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SKILL, new org.apache.thrift.meta_data.FieldMetaData("skill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Skill.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSkill_args.class, metaDataMap);
    }

    public delSkill_args() {
    }

    public delSkill_args(
      com.moseeker.thrift.gen.profile.struct.Skill skill)
    {
      this();
      this.skill = skill;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSkill_args(delSkill_args other) {
      if (other.isSetSkill()) {
        this.skill = new com.moseeker.thrift.gen.profile.struct.Skill(other.skill);
      }
    }

    public delSkill_args deepCopy() {
      return new delSkill_args(this);
    }

    @Override
    public void clear() {
      this.skill = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Skill getSkill() {
      return this.skill;
    }

    public delSkill_args setSkill(com.moseeker.thrift.gen.profile.struct.Skill skill) {
      this.skill = skill;
      return this;
    }

    public void unsetSkill() {
      this.skill = null;
    }

    /** Returns true if field skill is set (has been assigned a value) and false otherwise */
    public boolean isSetSkill() {
      return this.skill != null;
    }

    public void setSkillIsSet(boolean value) {
      if (!value) {
        this.skill = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SKILL:
        if (value == null) {
          unsetSkill();
        } else {
          setSkill((com.moseeker.thrift.gen.profile.struct.Skill)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SKILL:
        return getSkill();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SKILL:
        return isSetSkill();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSkill_args)
        return this.equals((delSkill_args)that);
      return false;
    }

    public boolean equals(delSkill_args that) {
      if (that == null)
        return false;

      boolean this_present_skill = true && this.isSetSkill();
      boolean that_present_skill = true && that.isSetSkill();
      if (this_present_skill || that_present_skill) {
        if (!(this_present_skill && that_present_skill))
          return false;
        if (!this.skill.equals(that.skill))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_skill = true && (isSetSkill());
      list.add(present_skill);
      if (present_skill)
        list.add(skill);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSkill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSkill()).compareTo(other.isSetSkill());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkill()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill, other.skill);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSkill_args(");
      boolean first = true;

      sb.append("skill:");
      if (this.skill == null) {
        sb.append("null");
      } else {
        sb.append(this.skill);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (skill != null) {
        skill.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSkill_argsStandardSchemeFactory implements SchemeFactory {
      public delSkill_argsStandardScheme getScheme() {
        return new delSkill_argsStandardScheme();
      }
    }

    private static class delSkill_argsStandardScheme extends StandardScheme<delSkill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSkill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SKILL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.skill = new com.moseeker.thrift.gen.profile.struct.Skill();
                struct.skill.read(iprot);
                struct.setSkillIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSkill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.skill != null) {
          oprot.writeFieldBegin(SKILL_FIELD_DESC);
          struct.skill.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSkill_argsTupleSchemeFactory implements SchemeFactory {
      public delSkill_argsTupleScheme getScheme() {
        return new delSkill_argsTupleScheme();
      }
    }

    private static class delSkill_argsTupleScheme extends TupleScheme<delSkill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSkill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSkill()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSkill()) {
          struct.skill.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSkill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.skill = new com.moseeker.thrift.gen.profile.struct.Skill();
          struct.skill.read(iprot);
          struct.setSkillIsSet(true);
        }
      }
    }

  }

  public static class delSkill_result implements org.apache.thrift.TBase<delSkill_result, delSkill_result._Fields>, java.io.Serializable, Cloneable, Comparable<delSkill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSkill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSkill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSkill_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSkill_result.class, metaDataMap);
    }

    public delSkill_result() {
    }

    public delSkill_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSkill_result(delSkill_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delSkill_result deepCopy() {
      return new delSkill_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delSkill_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSkill_result)
        return this.equals((delSkill_result)that);
      return false;
    }

    public boolean equals(delSkill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSkill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSkill_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSkill_resultStandardSchemeFactory implements SchemeFactory {
      public delSkill_resultStandardScheme getScheme() {
        return new delSkill_resultStandardScheme();
      }
    }

    private static class delSkill_resultStandardScheme extends StandardScheme<delSkill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSkill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSkill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSkill_resultTupleSchemeFactory implements SchemeFactory {
      public delSkill_resultTupleScheme getScheme() {
        return new delSkill_resultTupleScheme();
      }
    }

    private static class delSkill_resultTupleScheme extends TupleScheme<delSkill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSkill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSkill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
