/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-29")
public class InternshipServices {

  public interface Iface {

    public List<com.moseeker.thrift.gen.profile.struct.Internship> getInternships(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.InternshipPagination getInternshipPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException;

    public int postInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException;

    public int putInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException;

    public int delInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException;

    public int postInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException;

    public int putInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException;

    public int delInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getInternships(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getInternshipPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postInternship(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putInternship(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delInternship(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> getInternships(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      send_getInternships(query, internship);
      return recv_getInternships();
    }

    public void send_getInternships(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      getInternships_args args = new getInternships_args();
      args.setQuery(query);
      args.setInternship(internship);
      sendBase("getInternships", args);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> recv_getInternships() throws org.apache.thrift.TException
    {
      getInternships_result result = new getInternships_result();
      receiveBase(result, "getInternships");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInternships failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.InternshipPagination getInternshipPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      send_getInternshipPagination(query, internship);
      return recv_getInternshipPagination();
    }

    public void send_getInternshipPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      getInternshipPagination_args args = new getInternshipPagination_args();
      args.setQuery(query);
      args.setInternship(internship);
      sendBase("getInternshipPagination", args);
    }

    public com.moseeker.thrift.gen.profile.struct.InternshipPagination recv_getInternshipPagination() throws org.apache.thrift.TException
    {
      getInternshipPagination_result result = new getInternshipPagination_result();
      receiveBase(result, "getInternshipPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInternshipPagination failed: unknown result");
    }

    public int postInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException
    {
      send_postInternships(internships);
      return recv_postInternships();
    }

    public void send_postInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException
    {
      postInternships_args args = new postInternships_args();
      args.setInternships(internships);
      sendBase("postInternships", args);
    }

    public int recv_postInternships() throws org.apache.thrift.TException
    {
      postInternships_result result = new postInternships_result();
      receiveBase(result, "postInternships");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postInternships failed: unknown result");
    }

    public int putInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException
    {
      send_putInternships(internships);
      return recv_putInternships();
    }

    public void send_putInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException
    {
      putInternships_args args = new putInternships_args();
      args.setInternships(internships);
      sendBase("putInternships", args);
    }

    public int recv_putInternships() throws org.apache.thrift.TException
    {
      putInternships_result result = new putInternships_result();
      receiveBase(result, "putInternships");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putInternships failed: unknown result");
    }

    public int delInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException
    {
      send_delInternships(internships);
      return recv_delInternships();
    }

    public void send_delInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) throws org.apache.thrift.TException
    {
      delInternships_args args = new delInternships_args();
      args.setInternships(internships);
      sendBase("delInternships", args);
    }

    public int recv_delInternships() throws org.apache.thrift.TException
    {
      delInternships_result result = new delInternships_result();
      receiveBase(result, "delInternships");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delInternships failed: unknown result");
    }

    public int postInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      send_postInternship(internship);
      return recv_postInternship();
    }

    public void send_postInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      postInternship_args args = new postInternship_args();
      args.setInternship(internship);
      sendBase("postInternship", args);
    }

    public int recv_postInternship() throws org.apache.thrift.TException
    {
      postInternship_result result = new postInternship_result();
      receiveBase(result, "postInternship");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postInternship failed: unknown result");
    }

    public int putInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      send_putInternship(internship);
      return recv_putInternship();
    }

    public void send_putInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      putInternship_args args = new putInternship_args();
      args.setInternship(internship);
      sendBase("putInternship", args);
    }

    public int recv_putInternship() throws org.apache.thrift.TException
    {
      putInternship_result result = new putInternship_result();
      receiveBase(result, "putInternship");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putInternship failed: unknown result");
    }

    public int delInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      send_delInternship(internship);
      return recv_delInternship();
    }

    public void send_delInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) throws org.apache.thrift.TException
    {
      delInternship_args args = new delInternship_args();
      args.setInternship(internship);
      sendBase("delInternship", args);
    }

    public int recv_delInternship() throws org.apache.thrift.TException
    {
      delInternship_result result = new delInternship_result();
      receiveBase(result, "delInternship");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delInternship failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getInternships(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInternships_call method_call = new getInternships_call(query, internship, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInternships_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.Internship internship;
      public getInternships_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.internship = internship;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInternships", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInternships_args args = new getInternships_args();
        args.setQuery(query);
        args.setInternship(internship);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.moseeker.thrift.gen.profile.struct.Internship> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInternships();
      }
    }

    public void getInternshipPagination(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInternshipPagination_call method_call = new getInternshipPagination_call(query, internship, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInternshipPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.CommonQuery query;
      private com.moseeker.thrift.gen.profile.struct.Internship internship;
      public getInternshipPagination_call(com.moseeker.thrift.gen.profile.struct.CommonQuery query, com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.internship = internship;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInternshipPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInternshipPagination_args args = new getInternshipPagination_args();
        args.setQuery(query);
        args.setInternship(internship);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.InternshipPagination getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInternshipPagination();
      }
    }

    public void postInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postInternships_call method_call = new postInternships_call(internships, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postInternships_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Internship> internships;
      public postInternships_call(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.internships = internships;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postInternships", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postInternships_args args = new postInternships_args();
        args.setInternships(internships);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postInternships();
      }
    }

    public void putInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putInternships_call method_call = new putInternships_call(internships, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putInternships_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Internship> internships;
      public putInternships_call(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.internships = internships;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putInternships", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putInternships_args args = new putInternships_args();
        args.setInternships(internships);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putInternships();
      }
    }

    public void delInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delInternships_call method_call = new delInternships_call(internships, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delInternships_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.moseeker.thrift.gen.profile.struct.Internship> internships;
      public delInternships_call(List<com.moseeker.thrift.gen.profile.struct.Internship> internships, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.internships = internships;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delInternships", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delInternships_args args = new delInternships_args();
        args.setInternships(internships);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delInternships();
      }
    }

    public void postInternship(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postInternship_call method_call = new postInternship_call(internship, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postInternship_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Internship internship;
      public postInternship_call(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.internship = internship;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postInternship", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postInternship_args args = new postInternship_args();
        args.setInternship(internship);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postInternship();
      }
    }

    public void putInternship(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putInternship_call method_call = new putInternship_call(internship, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putInternship_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Internship internship;
      public putInternship_call(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.internship = internship;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putInternship", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putInternship_args args = new putInternship_args();
        args.setInternship(internship);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putInternship();
      }
    }

    public void delInternship(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delInternship_call method_call = new delInternship_call(internship, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delInternship_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.profile.struct.Internship internship;
      public delInternship_call(com.moseeker.thrift.gen.profile.struct.Internship internship, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.internship = internship;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delInternship", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delInternship_args args = new delInternship_args();
        args.setInternship(internship);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delInternship();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getInternships", new getInternships());
      processMap.put("getInternshipPagination", new getInternshipPagination());
      processMap.put("postInternships", new postInternships());
      processMap.put("putInternships", new putInternships());
      processMap.put("delInternships", new delInternships());
      processMap.put("postInternship", new postInternship());
      processMap.put("putInternship", new putInternship());
      processMap.put("delInternship", new delInternship());
      return processMap;
    }

    public static class getInternships<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInternships_args> {
      public getInternships() {
        super("getInternships");
      }

      public getInternships_args getEmptyArgsInstance() {
        return new getInternships_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInternships_result getResult(I iface, getInternships_args args) throws org.apache.thrift.TException {
        getInternships_result result = new getInternships_result();
        result.success = iface.getInternships(args.query, args.internship);
        return result;
      }
    }

    public static class getInternshipPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInternshipPagination_args> {
      public getInternshipPagination() {
        super("getInternshipPagination");
      }

      public getInternshipPagination_args getEmptyArgsInstance() {
        return new getInternshipPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInternshipPagination_result getResult(I iface, getInternshipPagination_args args) throws org.apache.thrift.TException {
        getInternshipPagination_result result = new getInternshipPagination_result();
        result.success = iface.getInternshipPagination(args.query, args.internship);
        return result;
      }
    }

    public static class postInternships<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postInternships_args> {
      public postInternships() {
        super("postInternships");
      }

      public postInternships_args getEmptyArgsInstance() {
        return new postInternships_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postInternships_result getResult(I iface, postInternships_args args) throws org.apache.thrift.TException {
        postInternships_result result = new postInternships_result();
        result.success = iface.postInternships(args.internships);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putInternships<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putInternships_args> {
      public putInternships() {
        super("putInternships");
      }

      public putInternships_args getEmptyArgsInstance() {
        return new putInternships_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putInternships_result getResult(I iface, putInternships_args args) throws org.apache.thrift.TException {
        putInternships_result result = new putInternships_result();
        result.success = iface.putInternships(args.internships);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delInternships<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delInternships_args> {
      public delInternships() {
        super("delInternships");
      }

      public delInternships_args getEmptyArgsInstance() {
        return new delInternships_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delInternships_result getResult(I iface, delInternships_args args) throws org.apache.thrift.TException {
        delInternships_result result = new delInternships_result();
        result.success = iface.delInternships(args.internships);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class postInternship<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postInternship_args> {
      public postInternship() {
        super("postInternship");
      }

      public postInternship_args getEmptyArgsInstance() {
        return new postInternship_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postInternship_result getResult(I iface, postInternship_args args) throws org.apache.thrift.TException {
        postInternship_result result = new postInternship_result();
        result.success = iface.postInternship(args.internship);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class putInternship<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putInternship_args> {
      public putInternship() {
        super("putInternship");
      }

      public putInternship_args getEmptyArgsInstance() {
        return new putInternship_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putInternship_result getResult(I iface, putInternship_args args) throws org.apache.thrift.TException {
        putInternship_result result = new putInternship_result();
        result.success = iface.putInternship(args.internship);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delInternship<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delInternship_args> {
      public delInternship() {
        super("delInternship");
      }

      public delInternship_args getEmptyArgsInstance() {
        return new delInternship_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delInternship_result getResult(I iface, delInternship_args args) throws org.apache.thrift.TException {
        delInternship_result result = new delInternship_result();
        result.success = iface.delInternship(args.internship);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getInternships", new getInternships());
      processMap.put("getInternshipPagination", new getInternshipPagination());
      processMap.put("postInternships", new postInternships());
      processMap.put("putInternships", new putInternships());
      processMap.put("delInternships", new delInternships());
      processMap.put("postInternship", new postInternship());
      processMap.put("putInternship", new putInternship());
      processMap.put("delInternship", new delInternship());
      return processMap;
    }

    public static class getInternships<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInternships_args, List<com.moseeker.thrift.gen.profile.struct.Internship>> {
      public getInternships() {
        super("getInternships");
      }

      public getInternships_args getEmptyArgsInstance() {
        return new getInternships_args();
      }

      public AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Internship>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Internship>>() { 
          public void onComplete(List<com.moseeker.thrift.gen.profile.struct.Internship> o) {
            getInternships_result result = new getInternships_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getInternships_result result = new getInternships_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInternships_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.moseeker.thrift.gen.profile.struct.Internship>> resultHandler) throws TException {
        iface.getInternships(args.query, args.internship,resultHandler);
      }
    }

    public static class getInternshipPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInternshipPagination_args, com.moseeker.thrift.gen.profile.struct.InternshipPagination> {
      public getInternshipPagination() {
        super("getInternshipPagination");
      }

      public getInternshipPagination_args getEmptyArgsInstance() {
        return new getInternshipPagination_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.InternshipPagination> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.InternshipPagination>() { 
          public void onComplete(com.moseeker.thrift.gen.profile.struct.InternshipPagination o) {
            getInternshipPagination_result result = new getInternshipPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getInternshipPagination_result result = new getInternshipPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInternshipPagination_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.InternshipPagination> resultHandler) throws TException {
        iface.getInternshipPagination(args.query, args.internship,resultHandler);
      }
    }

    public static class postInternships<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postInternships_args, Integer> {
      public postInternships() {
        super("postInternships");
      }

      public postInternships_args getEmptyArgsInstance() {
        return new postInternships_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postInternships_result result = new postInternships_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postInternships_result result = new postInternships_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postInternships_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postInternships(args.internships,resultHandler);
      }
    }

    public static class putInternships<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putInternships_args, Integer> {
      public putInternships() {
        super("putInternships");
      }

      public putInternships_args getEmptyArgsInstance() {
        return new putInternships_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putInternships_result result = new putInternships_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putInternships_result result = new putInternships_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putInternships_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putInternships(args.internships,resultHandler);
      }
    }

    public static class delInternships<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delInternships_args, Integer> {
      public delInternships() {
        super("delInternships");
      }

      public delInternships_args getEmptyArgsInstance() {
        return new delInternships_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delInternships_result result = new delInternships_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delInternships_result result = new delInternships_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delInternships_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delInternships(args.internships,resultHandler);
      }
    }

    public static class postInternship<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postInternship_args, Integer> {
      public postInternship() {
        super("postInternship");
      }

      public postInternship_args getEmptyArgsInstance() {
        return new postInternship_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            postInternship_result result = new postInternship_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postInternship_result result = new postInternship_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postInternship_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.postInternship(args.internship,resultHandler);
      }
    }

    public static class putInternship<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putInternship_args, Integer> {
      public putInternship() {
        super("putInternship");
      }

      public putInternship_args getEmptyArgsInstance() {
        return new putInternship_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            putInternship_result result = new putInternship_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putInternship_result result = new putInternship_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putInternship_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.putInternship(args.internship,resultHandler);
      }
    }

    public static class delInternship<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delInternship_args, Integer> {
      public delInternship() {
        super("delInternship");
      }

      public delInternship_args getEmptyArgsInstance() {
        return new delInternship_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delInternship_result result = new delInternship_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delInternship_result result = new delInternship_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delInternship_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delInternship(args.internship,resultHandler);
      }
    }

  }

  public static class getInternships_args implements org.apache.thrift.TBase<getInternships_args, getInternships_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInternships_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInternships_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("internship", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInternships_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInternships_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.Internship internship; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      INTERNSHIP((short)2, "internship");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // INTERNSHIP
            return INTERNSHIP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.INTERNSHIP, new org.apache.thrift.meta_data.FieldMetaData("internship", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInternships_args.class, metaDataMap);
    }

    public getInternships_args() {
    }

    public getInternships_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.Internship internship)
    {
      this();
      this.query = query;
      this.internship = internship;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInternships_args(getInternships_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetInternship()) {
        this.internship = new com.moseeker.thrift.gen.profile.struct.Internship(other.internship);
      }
    }

    public getInternships_args deepCopy() {
      return new getInternships_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.internship = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getInternships_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.Internship getInternship() {
      return this.internship;
    }

    public getInternships_args setInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) {
      this.internship = internship;
      return this;
    }

    public void unsetInternship() {
      this.internship = null;
    }

    /** Returns true if field internship is set (has been assigned a value) and false otherwise */
    public boolean isSetInternship() {
      return this.internship != null;
    }

    public void setInternshipIsSet(boolean value) {
      if (!value) {
        this.internship = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case INTERNSHIP:
        if (value == null) {
          unsetInternship();
        } else {
          setInternship((com.moseeker.thrift.gen.profile.struct.Internship)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case INTERNSHIP:
        return getInternship();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case INTERNSHIP:
        return isSetInternship();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInternships_args)
        return this.equals((getInternships_args)that);
      return false;
    }

    public boolean equals(getInternships_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_internship = true && this.isSetInternship();
      boolean that_present_internship = true && that.isSetInternship();
      if (this_present_internship || that_present_internship) {
        if (!(this_present_internship && that_present_internship))
          return false;
        if (!this.internship.equals(that.internship))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_internship = true && (isSetInternship());
      list.add(present_internship);
      if (present_internship)
        list.add(internship);

      return list.hashCode();
    }

    @Override
    public int compareTo(getInternships_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternship()).compareTo(other.isSetInternship());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternship()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internship, other.internship);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInternships_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internship:");
      if (this.internship == null) {
        sb.append("null");
      } else {
        sb.append(this.internship);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (internship != null) {
        internship.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInternships_argsStandardSchemeFactory implements SchemeFactory {
      public getInternships_argsStandardScheme getScheme() {
        return new getInternships_argsStandardScheme();
      }
    }

    private static class getInternships_argsStandardScheme extends StandardScheme<getInternships_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInternships_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNSHIP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
                struct.internship.read(iprot);
                struct.setInternshipIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInternships_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internship != null) {
          oprot.writeFieldBegin(INTERNSHIP_FIELD_DESC);
          struct.internship.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInternships_argsTupleSchemeFactory implements SchemeFactory {
      public getInternships_argsTupleScheme getScheme() {
        return new getInternships_argsTupleScheme();
      }
    }

    private static class getInternships_argsTupleScheme extends TupleScheme<getInternships_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInternships_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetInternship()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetInternship()) {
          struct.internship.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInternships_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
          struct.internship.read(iprot);
          struct.setInternshipIsSet(true);
        }
      }
    }

  }

  public static class getInternships_result implements org.apache.thrift.TBase<getInternships_result, getInternships_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInternships_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInternships_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInternships_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInternships_resultTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInternships_result.class, metaDataMap);
    }

    public getInternships_result() {
    }

    public getInternships_result(
      List<com.moseeker.thrift.gen.profile.struct.Internship> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInternships_result(getInternships_result other) {
      if (other.isSetSuccess()) {
        List<com.moseeker.thrift.gen.profile.struct.Internship> __this__success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.Internship other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.Internship(other_element));
        }
        this.success = __this__success;
      }
    }

    public getInternships_result deepCopy() {
      return new getInternships_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Internship> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.Internship elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>();
      }
      this.success.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> getSuccess() {
      return this.success;
    }

    public getInternships_result setSuccess(List<com.moseeker.thrift.gen.profile.struct.Internship> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.moseeker.thrift.gen.profile.struct.Internship>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInternships_result)
        return this.equals((getInternships_result)that);
      return false;
    }

    public boolean equals(getInternships_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getInternships_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInternships_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInternships_resultStandardSchemeFactory implements SchemeFactory {
      public getInternships_resultStandardScheme getScheme() {
        return new getInternships_resultStandardScheme();
      }
    }

    private static class getInternships_resultStandardScheme extends StandardScheme<getInternships_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInternships_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(_list256.size);
                  com.moseeker.thrift.gen.profile.struct.Internship _elem257;
                  for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                  {
                    _elem257 = new com.moseeker.thrift.gen.profile.struct.Internship();
                    _elem257.read(iprot);
                    struct.success.add(_elem257);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInternships_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.Internship _iter259 : struct.success)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInternships_resultTupleSchemeFactory implements SchemeFactory {
      public getInternships_resultTupleScheme getScheme() {
        return new getInternships_resultTupleScheme();
      }
    }

    private static class getInternships_resultTupleScheme extends TupleScheme<getInternships_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInternships_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.Internship _iter260 : struct.success)
            {
              _iter260.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInternships_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(_list261.size);
            com.moseeker.thrift.gen.profile.struct.Internship _elem262;
            for (int _i263 = 0; _i263 < _list261.size; ++_i263)
            {
              _elem262 = new com.moseeker.thrift.gen.profile.struct.Internship();
              _elem262.read(iprot);
              struct.success.add(_elem262);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getInternshipPagination_args implements org.apache.thrift.TBase<getInternshipPagination_args, getInternshipPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInternshipPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInternshipPagination_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("internship", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInternshipPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInternshipPagination_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery query; // required
    public com.moseeker.thrift.gen.profile.struct.Internship internship; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      INTERNSHIP((short)2, "internship");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // INTERNSHIP
            return INTERNSHIP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CommonQuery.class)));
      tmpMap.put(_Fields.INTERNSHIP, new org.apache.thrift.meta_data.FieldMetaData("internship", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInternshipPagination_args.class, metaDataMap);
    }

    public getInternshipPagination_args() {
    }

    public getInternshipPagination_args(
      com.moseeker.thrift.gen.profile.struct.CommonQuery query,
      com.moseeker.thrift.gen.profile.struct.Internship internship)
    {
      this();
      this.query = query;
      this.internship = internship;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInternshipPagination_args(getInternshipPagination_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery(other.query);
      }
      if (other.isSetInternship()) {
        this.internship = new com.moseeker.thrift.gen.profile.struct.Internship(other.internship);
      }
    }

    public getInternshipPagination_args deepCopy() {
      return new getInternshipPagination_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.internship = null;
    }

    public com.moseeker.thrift.gen.profile.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getInternshipPagination_args setQuery(com.moseeker.thrift.gen.profile.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.moseeker.thrift.gen.profile.struct.Internship getInternship() {
      return this.internship;
    }

    public getInternshipPagination_args setInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) {
      this.internship = internship;
      return this;
    }

    public void unsetInternship() {
      this.internship = null;
    }

    /** Returns true if field internship is set (has been assigned a value) and false otherwise */
    public boolean isSetInternship() {
      return this.internship != null;
    }

    public void setInternshipIsSet(boolean value) {
      if (!value) {
        this.internship = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.profile.struct.CommonQuery)value);
        }
        break;

      case INTERNSHIP:
        if (value == null) {
          unsetInternship();
        } else {
          setInternship((com.moseeker.thrift.gen.profile.struct.Internship)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case INTERNSHIP:
        return getInternship();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case INTERNSHIP:
        return isSetInternship();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInternshipPagination_args)
        return this.equals((getInternshipPagination_args)that);
      return false;
    }

    public boolean equals(getInternshipPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_internship = true && this.isSetInternship();
      boolean that_present_internship = true && that.isSetInternship();
      if (this_present_internship || that_present_internship) {
        if (!(this_present_internship && that_present_internship))
          return false;
        if (!this.internship.equals(that.internship))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_internship = true && (isSetInternship());
      list.add(present_internship);
      if (present_internship)
        list.add(internship);

      return list.hashCode();
    }

    @Override
    public int compareTo(getInternshipPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternship()).compareTo(other.isSetInternship());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternship()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internship, other.internship);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInternshipPagination_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internship:");
      if (this.internship == null) {
        sb.append("null");
      } else {
        sb.append(this.internship);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (internship != null) {
        internship.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInternshipPagination_argsStandardSchemeFactory implements SchemeFactory {
      public getInternshipPagination_argsStandardScheme getScheme() {
        return new getInternshipPagination_argsStandardScheme();
      }
    }

    private static class getInternshipPagination_argsStandardScheme extends StandardScheme<getInternshipPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInternshipPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNSHIP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
                struct.internship.read(iprot);
                struct.setInternshipIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInternshipPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internship != null) {
          oprot.writeFieldBegin(INTERNSHIP_FIELD_DESC);
          struct.internship.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInternshipPagination_argsTupleSchemeFactory implements SchemeFactory {
      public getInternshipPagination_argsTupleScheme getScheme() {
        return new getInternshipPagination_argsTupleScheme();
      }
    }

    private static class getInternshipPagination_argsTupleScheme extends TupleScheme<getInternshipPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInternshipPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetInternship()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetInternship()) {
          struct.internship.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInternshipPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.profile.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
          struct.internship.read(iprot);
          struct.setInternshipIsSet(true);
        }
      }
    }

  }

  public static class getInternshipPagination_result implements org.apache.thrift.TBase<getInternshipPagination_result, getInternshipPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInternshipPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInternshipPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInternshipPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInternshipPagination_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.InternshipPagination success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.InternshipPagination.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInternshipPagination_result.class, metaDataMap);
    }

    public getInternshipPagination_result() {
    }

    public getInternshipPagination_result(
      com.moseeker.thrift.gen.profile.struct.InternshipPagination success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInternshipPagination_result(getInternshipPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.InternshipPagination(other.success);
      }
    }

    public getInternshipPagination_result deepCopy() {
      return new getInternshipPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.profile.struct.InternshipPagination getSuccess() {
      return this.success;
    }

    public getInternshipPagination_result setSuccess(com.moseeker.thrift.gen.profile.struct.InternshipPagination success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.InternshipPagination)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInternshipPagination_result)
        return this.equals((getInternshipPagination_result)that);
      return false;
    }

    public boolean equals(getInternshipPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getInternshipPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInternshipPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInternshipPagination_resultStandardSchemeFactory implements SchemeFactory {
      public getInternshipPagination_resultStandardScheme getScheme() {
        return new getInternshipPagination_resultStandardScheme();
      }
    }

    private static class getInternshipPagination_resultStandardScheme extends StandardScheme<getInternshipPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInternshipPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.InternshipPagination();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInternshipPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInternshipPagination_resultTupleSchemeFactory implements SchemeFactory {
      public getInternshipPagination_resultTupleScheme getScheme() {
        return new getInternshipPagination_resultTupleScheme();
      }
    }

    private static class getInternshipPagination_resultTupleScheme extends TupleScheme<getInternshipPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInternshipPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInternshipPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.InternshipPagination();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postInternships_args implements org.apache.thrift.TBase<postInternships_args, postInternships_args._Fields>, java.io.Serializable, Cloneable, Comparable<postInternships_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postInternships_args");

    private static final org.apache.thrift.protocol.TField INTERNSHIPS_FIELD_DESC = new org.apache.thrift.protocol.TField("internships", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postInternships_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postInternships_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> internships; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERNSHIPS((short)1, "internships");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERNSHIPS
            return INTERNSHIPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERNSHIPS, new org.apache.thrift.meta_data.FieldMetaData("internships", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postInternships_args.class, metaDataMap);
    }

    public postInternships_args() {
    }

    public postInternships_args(
      List<com.moseeker.thrift.gen.profile.struct.Internship> internships)
    {
      this();
      this.internships = internships;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postInternships_args(postInternships_args other) {
      if (other.isSetInternships()) {
        List<com.moseeker.thrift.gen.profile.struct.Internship> __this__internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(other.internships.size());
        for (com.moseeker.thrift.gen.profile.struct.Internship other_element : other.internships) {
          __this__internships.add(new com.moseeker.thrift.gen.profile.struct.Internship(other_element));
        }
        this.internships = __this__internships;
      }
    }

    public postInternships_args deepCopy() {
      return new postInternships_args(this);
    }

    @Override
    public void clear() {
      this.internships = null;
    }

    public int getInternshipsSize() {
      return (this.internships == null) ? 0 : this.internships.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Internship> getInternshipsIterator() {
      return (this.internships == null) ? null : this.internships.iterator();
    }

    public void addToInternships(com.moseeker.thrift.gen.profile.struct.Internship elem) {
      if (this.internships == null) {
        this.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>();
      }
      this.internships.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> getInternships() {
      return this.internships;
    }

    public postInternships_args setInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) {
      this.internships = internships;
      return this;
    }

    public void unsetInternships() {
      this.internships = null;
    }

    /** Returns true if field internships is set (has been assigned a value) and false otherwise */
    public boolean isSetInternships() {
      return this.internships != null;
    }

    public void setInternshipsIsSet(boolean value) {
      if (!value) {
        this.internships = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERNSHIPS:
        if (value == null) {
          unsetInternships();
        } else {
          setInternships((List<com.moseeker.thrift.gen.profile.struct.Internship>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERNSHIPS:
        return getInternships();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERNSHIPS:
        return isSetInternships();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postInternships_args)
        return this.equals((postInternships_args)that);
      return false;
    }

    public boolean equals(postInternships_args that) {
      if (that == null)
        return false;

      boolean this_present_internships = true && this.isSetInternships();
      boolean that_present_internships = true && that.isSetInternships();
      if (this_present_internships || that_present_internships) {
        if (!(this_present_internships && that_present_internships))
          return false;
        if (!this.internships.equals(that.internships))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_internships = true && (isSetInternships());
      list.add(present_internships);
      if (present_internships)
        list.add(internships);

      return list.hashCode();
    }

    @Override
    public int compareTo(postInternships_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInternships()).compareTo(other.isSetInternships());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternships()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internships, other.internships);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postInternships_args(");
      boolean first = true;

      sb.append("internships:");
      if (this.internships == null) {
        sb.append("null");
      } else {
        sb.append(this.internships);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postInternships_argsStandardSchemeFactory implements SchemeFactory {
      public postInternships_argsStandardScheme getScheme() {
        return new postInternships_argsStandardScheme();
      }
    }

    private static class postInternships_argsStandardScheme extends StandardScheme<postInternships_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postInternships_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERNSHIPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(_list264.size);
                  com.moseeker.thrift.gen.profile.struct.Internship _elem265;
                  for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                  {
                    _elem265 = new com.moseeker.thrift.gen.profile.struct.Internship();
                    _elem265.read(iprot);
                    struct.internships.add(_elem265);
                  }
                  iprot.readListEnd();
                }
                struct.setInternshipsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postInternships_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.internships != null) {
          oprot.writeFieldBegin(INTERNSHIPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.internships.size()));
            for (com.moseeker.thrift.gen.profile.struct.Internship _iter267 : struct.internships)
            {
              _iter267.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postInternships_argsTupleSchemeFactory implements SchemeFactory {
      public postInternships_argsTupleScheme getScheme() {
        return new postInternships_argsTupleScheme();
      }
    }

    private static class postInternships_argsTupleScheme extends TupleScheme<postInternships_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postInternships_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInternships()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInternships()) {
          {
            oprot.writeI32(struct.internships.size());
            for (com.moseeker.thrift.gen.profile.struct.Internship _iter268 : struct.internships)
            {
              _iter268.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postInternships_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(_list269.size);
            com.moseeker.thrift.gen.profile.struct.Internship _elem270;
            for (int _i271 = 0; _i271 < _list269.size; ++_i271)
            {
              _elem270 = new com.moseeker.thrift.gen.profile.struct.Internship();
              _elem270.read(iprot);
              struct.internships.add(_elem270);
            }
          }
          struct.setInternshipsIsSet(true);
        }
      }
    }

  }

  public static class postInternships_result implements org.apache.thrift.TBase<postInternships_result, postInternships_result._Fields>, java.io.Serializable, Cloneable, Comparable<postInternships_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postInternships_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postInternships_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postInternships_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postInternships_result.class, metaDataMap);
    }

    public postInternships_result() {
    }

    public postInternships_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postInternships_result(postInternships_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postInternships_result deepCopy() {
      return new postInternships_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postInternships_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postInternships_result)
        return this.equals((postInternships_result)that);
      return false;
    }

    public boolean equals(postInternships_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postInternships_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postInternships_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postInternships_resultStandardSchemeFactory implements SchemeFactory {
      public postInternships_resultStandardScheme getScheme() {
        return new postInternships_resultStandardScheme();
      }
    }

    private static class postInternships_resultStandardScheme extends StandardScheme<postInternships_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postInternships_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postInternships_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postInternships_resultTupleSchemeFactory implements SchemeFactory {
      public postInternships_resultTupleScheme getScheme() {
        return new postInternships_resultTupleScheme();
      }
    }

    private static class postInternships_resultTupleScheme extends TupleScheme<postInternships_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postInternships_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postInternships_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putInternships_args implements org.apache.thrift.TBase<putInternships_args, putInternships_args._Fields>, java.io.Serializable, Cloneable, Comparable<putInternships_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putInternships_args");

    private static final org.apache.thrift.protocol.TField INTERNSHIPS_FIELD_DESC = new org.apache.thrift.protocol.TField("internships", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putInternships_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putInternships_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> internships; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERNSHIPS((short)1, "internships");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERNSHIPS
            return INTERNSHIPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERNSHIPS, new org.apache.thrift.meta_data.FieldMetaData("internships", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putInternships_args.class, metaDataMap);
    }

    public putInternships_args() {
    }

    public putInternships_args(
      List<com.moseeker.thrift.gen.profile.struct.Internship> internships)
    {
      this();
      this.internships = internships;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putInternships_args(putInternships_args other) {
      if (other.isSetInternships()) {
        List<com.moseeker.thrift.gen.profile.struct.Internship> __this__internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(other.internships.size());
        for (com.moseeker.thrift.gen.profile.struct.Internship other_element : other.internships) {
          __this__internships.add(new com.moseeker.thrift.gen.profile.struct.Internship(other_element));
        }
        this.internships = __this__internships;
      }
    }

    public putInternships_args deepCopy() {
      return new putInternships_args(this);
    }

    @Override
    public void clear() {
      this.internships = null;
    }

    public int getInternshipsSize() {
      return (this.internships == null) ? 0 : this.internships.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Internship> getInternshipsIterator() {
      return (this.internships == null) ? null : this.internships.iterator();
    }

    public void addToInternships(com.moseeker.thrift.gen.profile.struct.Internship elem) {
      if (this.internships == null) {
        this.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>();
      }
      this.internships.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> getInternships() {
      return this.internships;
    }

    public putInternships_args setInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) {
      this.internships = internships;
      return this;
    }

    public void unsetInternships() {
      this.internships = null;
    }

    /** Returns true if field internships is set (has been assigned a value) and false otherwise */
    public boolean isSetInternships() {
      return this.internships != null;
    }

    public void setInternshipsIsSet(boolean value) {
      if (!value) {
        this.internships = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERNSHIPS:
        if (value == null) {
          unsetInternships();
        } else {
          setInternships((List<com.moseeker.thrift.gen.profile.struct.Internship>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERNSHIPS:
        return getInternships();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERNSHIPS:
        return isSetInternships();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putInternships_args)
        return this.equals((putInternships_args)that);
      return false;
    }

    public boolean equals(putInternships_args that) {
      if (that == null)
        return false;

      boolean this_present_internships = true && this.isSetInternships();
      boolean that_present_internships = true && that.isSetInternships();
      if (this_present_internships || that_present_internships) {
        if (!(this_present_internships && that_present_internships))
          return false;
        if (!this.internships.equals(that.internships))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_internships = true && (isSetInternships());
      list.add(present_internships);
      if (present_internships)
        list.add(internships);

      return list.hashCode();
    }

    @Override
    public int compareTo(putInternships_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInternships()).compareTo(other.isSetInternships());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternships()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internships, other.internships);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putInternships_args(");
      boolean first = true;

      sb.append("internships:");
      if (this.internships == null) {
        sb.append("null");
      } else {
        sb.append(this.internships);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putInternships_argsStandardSchemeFactory implements SchemeFactory {
      public putInternships_argsStandardScheme getScheme() {
        return new putInternships_argsStandardScheme();
      }
    }

    private static class putInternships_argsStandardScheme extends StandardScheme<putInternships_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putInternships_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERNSHIPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(_list272.size);
                  com.moseeker.thrift.gen.profile.struct.Internship _elem273;
                  for (int _i274 = 0; _i274 < _list272.size; ++_i274)
                  {
                    _elem273 = new com.moseeker.thrift.gen.profile.struct.Internship();
                    _elem273.read(iprot);
                    struct.internships.add(_elem273);
                  }
                  iprot.readListEnd();
                }
                struct.setInternshipsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putInternships_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.internships != null) {
          oprot.writeFieldBegin(INTERNSHIPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.internships.size()));
            for (com.moseeker.thrift.gen.profile.struct.Internship _iter275 : struct.internships)
            {
              _iter275.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putInternships_argsTupleSchemeFactory implements SchemeFactory {
      public putInternships_argsTupleScheme getScheme() {
        return new putInternships_argsTupleScheme();
      }
    }

    private static class putInternships_argsTupleScheme extends TupleScheme<putInternships_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putInternships_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInternships()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInternships()) {
          {
            oprot.writeI32(struct.internships.size());
            for (com.moseeker.thrift.gen.profile.struct.Internship _iter276 : struct.internships)
            {
              _iter276.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putInternships_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(_list277.size);
            com.moseeker.thrift.gen.profile.struct.Internship _elem278;
            for (int _i279 = 0; _i279 < _list277.size; ++_i279)
            {
              _elem278 = new com.moseeker.thrift.gen.profile.struct.Internship();
              _elem278.read(iprot);
              struct.internships.add(_elem278);
            }
          }
          struct.setInternshipsIsSet(true);
        }
      }
    }

  }

  public static class putInternships_result implements org.apache.thrift.TBase<putInternships_result, putInternships_result._Fields>, java.io.Serializable, Cloneable, Comparable<putInternships_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putInternships_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putInternships_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putInternships_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putInternships_result.class, metaDataMap);
    }

    public putInternships_result() {
    }

    public putInternships_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putInternships_result(putInternships_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putInternships_result deepCopy() {
      return new putInternships_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putInternships_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putInternships_result)
        return this.equals((putInternships_result)that);
      return false;
    }

    public boolean equals(putInternships_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putInternships_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putInternships_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putInternships_resultStandardSchemeFactory implements SchemeFactory {
      public putInternships_resultStandardScheme getScheme() {
        return new putInternships_resultStandardScheme();
      }
    }

    private static class putInternships_resultStandardScheme extends StandardScheme<putInternships_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putInternships_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putInternships_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putInternships_resultTupleSchemeFactory implements SchemeFactory {
      public putInternships_resultTupleScheme getScheme() {
        return new putInternships_resultTupleScheme();
      }
    }

    private static class putInternships_resultTupleScheme extends TupleScheme<putInternships_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putInternships_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putInternships_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delInternships_args implements org.apache.thrift.TBase<delInternships_args, delInternships_args._Fields>, java.io.Serializable, Cloneable, Comparable<delInternships_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delInternships_args");

    private static final org.apache.thrift.protocol.TField INTERNSHIPS_FIELD_DESC = new org.apache.thrift.protocol.TField("internships", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delInternships_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delInternships_argsTupleSchemeFactory());
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> internships; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERNSHIPS((short)1, "internships");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERNSHIPS
            return INTERNSHIPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERNSHIPS, new org.apache.thrift.meta_data.FieldMetaData("internships", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delInternships_args.class, metaDataMap);
    }

    public delInternships_args() {
    }

    public delInternships_args(
      List<com.moseeker.thrift.gen.profile.struct.Internship> internships)
    {
      this();
      this.internships = internships;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delInternships_args(delInternships_args other) {
      if (other.isSetInternships()) {
        List<com.moseeker.thrift.gen.profile.struct.Internship> __this__internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(other.internships.size());
        for (com.moseeker.thrift.gen.profile.struct.Internship other_element : other.internships) {
          __this__internships.add(new com.moseeker.thrift.gen.profile.struct.Internship(other_element));
        }
        this.internships = __this__internships;
      }
    }

    public delInternships_args deepCopy() {
      return new delInternships_args(this);
    }

    @Override
    public void clear() {
      this.internships = null;
    }

    public int getInternshipsSize() {
      return (this.internships == null) ? 0 : this.internships.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Internship> getInternshipsIterator() {
      return (this.internships == null) ? null : this.internships.iterator();
    }

    public void addToInternships(com.moseeker.thrift.gen.profile.struct.Internship elem) {
      if (this.internships == null) {
        this.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>();
      }
      this.internships.add(elem);
    }

    public List<com.moseeker.thrift.gen.profile.struct.Internship> getInternships() {
      return this.internships;
    }

    public delInternships_args setInternships(List<com.moseeker.thrift.gen.profile.struct.Internship> internships) {
      this.internships = internships;
      return this;
    }

    public void unsetInternships() {
      this.internships = null;
    }

    /** Returns true if field internships is set (has been assigned a value) and false otherwise */
    public boolean isSetInternships() {
      return this.internships != null;
    }

    public void setInternshipsIsSet(boolean value) {
      if (!value) {
        this.internships = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERNSHIPS:
        if (value == null) {
          unsetInternships();
        } else {
          setInternships((List<com.moseeker.thrift.gen.profile.struct.Internship>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERNSHIPS:
        return getInternships();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERNSHIPS:
        return isSetInternships();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delInternships_args)
        return this.equals((delInternships_args)that);
      return false;
    }

    public boolean equals(delInternships_args that) {
      if (that == null)
        return false;

      boolean this_present_internships = true && this.isSetInternships();
      boolean that_present_internships = true && that.isSetInternships();
      if (this_present_internships || that_present_internships) {
        if (!(this_present_internships && that_present_internships))
          return false;
        if (!this.internships.equals(that.internships))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_internships = true && (isSetInternships());
      list.add(present_internships);
      if (present_internships)
        list.add(internships);

      return list.hashCode();
    }

    @Override
    public int compareTo(delInternships_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInternships()).compareTo(other.isSetInternships());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternships()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internships, other.internships);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delInternships_args(");
      boolean first = true;

      sb.append("internships:");
      if (this.internships == null) {
        sb.append("null");
      } else {
        sb.append(this.internships);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delInternships_argsStandardSchemeFactory implements SchemeFactory {
      public delInternships_argsStandardScheme getScheme() {
        return new delInternships_argsStandardScheme();
      }
    }

    private static class delInternships_argsStandardScheme extends StandardScheme<delInternships_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delInternships_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERNSHIPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(_list280.size);
                  com.moseeker.thrift.gen.profile.struct.Internship _elem281;
                  for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                  {
                    _elem281 = new com.moseeker.thrift.gen.profile.struct.Internship();
                    _elem281.read(iprot);
                    struct.internships.add(_elem281);
                  }
                  iprot.readListEnd();
                }
                struct.setInternshipsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delInternships_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.internships != null) {
          oprot.writeFieldBegin(INTERNSHIPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.internships.size()));
            for (com.moseeker.thrift.gen.profile.struct.Internship _iter283 : struct.internships)
            {
              _iter283.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delInternships_argsTupleSchemeFactory implements SchemeFactory {
      public delInternships_argsTupleScheme getScheme() {
        return new delInternships_argsTupleScheme();
      }
    }

    private static class delInternships_argsTupleScheme extends TupleScheme<delInternships_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delInternships_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInternships()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInternships()) {
          {
            oprot.writeI32(struct.internships.size());
            for (com.moseeker.thrift.gen.profile.struct.Internship _iter284 : struct.internships)
            {
              _iter284.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delInternships_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.internships = new ArrayList<com.moseeker.thrift.gen.profile.struct.Internship>(_list285.size);
            com.moseeker.thrift.gen.profile.struct.Internship _elem286;
            for (int _i287 = 0; _i287 < _list285.size; ++_i287)
            {
              _elem286 = new com.moseeker.thrift.gen.profile.struct.Internship();
              _elem286.read(iprot);
              struct.internships.add(_elem286);
            }
          }
          struct.setInternshipsIsSet(true);
        }
      }
    }

  }

  public static class delInternships_result implements org.apache.thrift.TBase<delInternships_result, delInternships_result._Fields>, java.io.Serializable, Cloneable, Comparable<delInternships_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delInternships_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delInternships_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delInternships_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delInternships_result.class, metaDataMap);
    }

    public delInternships_result() {
    }

    public delInternships_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delInternships_result(delInternships_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delInternships_result deepCopy() {
      return new delInternships_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delInternships_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delInternships_result)
        return this.equals((delInternships_result)that);
      return false;
    }

    public boolean equals(delInternships_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delInternships_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delInternships_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delInternships_resultStandardSchemeFactory implements SchemeFactory {
      public delInternships_resultStandardScheme getScheme() {
        return new delInternships_resultStandardScheme();
      }
    }

    private static class delInternships_resultStandardScheme extends StandardScheme<delInternships_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delInternships_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delInternships_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delInternships_resultTupleSchemeFactory implements SchemeFactory {
      public delInternships_resultTupleScheme getScheme() {
        return new delInternships_resultTupleScheme();
      }
    }

    private static class delInternships_resultTupleScheme extends TupleScheme<delInternships_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delInternships_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delInternships_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postInternship_args implements org.apache.thrift.TBase<postInternship_args, postInternship_args._Fields>, java.io.Serializable, Cloneable, Comparable<postInternship_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postInternship_args");

    private static final org.apache.thrift.protocol.TField INTERNSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("internship", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postInternship_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postInternship_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Internship internship; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERNSHIP((short)1, "internship");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERNSHIP
            return INTERNSHIP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERNSHIP, new org.apache.thrift.meta_data.FieldMetaData("internship", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postInternship_args.class, metaDataMap);
    }

    public postInternship_args() {
    }

    public postInternship_args(
      com.moseeker.thrift.gen.profile.struct.Internship internship)
    {
      this();
      this.internship = internship;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postInternship_args(postInternship_args other) {
      if (other.isSetInternship()) {
        this.internship = new com.moseeker.thrift.gen.profile.struct.Internship(other.internship);
      }
    }

    public postInternship_args deepCopy() {
      return new postInternship_args(this);
    }

    @Override
    public void clear() {
      this.internship = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Internship getInternship() {
      return this.internship;
    }

    public postInternship_args setInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) {
      this.internship = internship;
      return this;
    }

    public void unsetInternship() {
      this.internship = null;
    }

    /** Returns true if field internship is set (has been assigned a value) and false otherwise */
    public boolean isSetInternship() {
      return this.internship != null;
    }

    public void setInternshipIsSet(boolean value) {
      if (!value) {
        this.internship = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERNSHIP:
        if (value == null) {
          unsetInternship();
        } else {
          setInternship((com.moseeker.thrift.gen.profile.struct.Internship)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERNSHIP:
        return getInternship();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERNSHIP:
        return isSetInternship();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postInternship_args)
        return this.equals((postInternship_args)that);
      return false;
    }

    public boolean equals(postInternship_args that) {
      if (that == null)
        return false;

      boolean this_present_internship = true && this.isSetInternship();
      boolean that_present_internship = true && that.isSetInternship();
      if (this_present_internship || that_present_internship) {
        if (!(this_present_internship && that_present_internship))
          return false;
        if (!this.internship.equals(that.internship))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_internship = true && (isSetInternship());
      list.add(present_internship);
      if (present_internship)
        list.add(internship);

      return list.hashCode();
    }

    @Override
    public int compareTo(postInternship_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInternship()).compareTo(other.isSetInternship());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternship()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internship, other.internship);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postInternship_args(");
      boolean first = true;

      sb.append("internship:");
      if (this.internship == null) {
        sb.append("null");
      } else {
        sb.append(this.internship);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (internship != null) {
        internship.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postInternship_argsStandardSchemeFactory implements SchemeFactory {
      public postInternship_argsStandardScheme getScheme() {
        return new postInternship_argsStandardScheme();
      }
    }

    private static class postInternship_argsStandardScheme extends StandardScheme<postInternship_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postInternship_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERNSHIP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
                struct.internship.read(iprot);
                struct.setInternshipIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postInternship_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.internship != null) {
          oprot.writeFieldBegin(INTERNSHIP_FIELD_DESC);
          struct.internship.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postInternship_argsTupleSchemeFactory implements SchemeFactory {
      public postInternship_argsTupleScheme getScheme() {
        return new postInternship_argsTupleScheme();
      }
    }

    private static class postInternship_argsTupleScheme extends TupleScheme<postInternship_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postInternship_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInternship()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInternship()) {
          struct.internship.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postInternship_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
          struct.internship.read(iprot);
          struct.setInternshipIsSet(true);
        }
      }
    }

  }

  public static class postInternship_result implements org.apache.thrift.TBase<postInternship_result, postInternship_result._Fields>, java.io.Serializable, Cloneable, Comparable<postInternship_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postInternship_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postInternship_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postInternship_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postInternship_result.class, metaDataMap);
    }

    public postInternship_result() {
    }

    public postInternship_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postInternship_result(postInternship_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public postInternship_result deepCopy() {
      return new postInternship_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public postInternship_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postInternship_result)
        return this.equals((postInternship_result)that);
      return false;
    }

    public boolean equals(postInternship_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postInternship_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postInternship_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postInternship_resultStandardSchemeFactory implements SchemeFactory {
      public postInternship_resultStandardScheme getScheme() {
        return new postInternship_resultStandardScheme();
      }
    }

    private static class postInternship_resultStandardScheme extends StandardScheme<postInternship_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postInternship_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postInternship_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postInternship_resultTupleSchemeFactory implements SchemeFactory {
      public postInternship_resultTupleScheme getScheme() {
        return new postInternship_resultTupleScheme();
      }
    }

    private static class postInternship_resultTupleScheme extends TupleScheme<postInternship_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postInternship_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postInternship_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putInternship_args implements org.apache.thrift.TBase<putInternship_args, putInternship_args._Fields>, java.io.Serializable, Cloneable, Comparable<putInternship_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putInternship_args");

    private static final org.apache.thrift.protocol.TField INTERNSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("internship", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putInternship_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putInternship_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Internship internship; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERNSHIP((short)1, "internship");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERNSHIP
            return INTERNSHIP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERNSHIP, new org.apache.thrift.meta_data.FieldMetaData("internship", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putInternship_args.class, metaDataMap);
    }

    public putInternship_args() {
    }

    public putInternship_args(
      com.moseeker.thrift.gen.profile.struct.Internship internship)
    {
      this();
      this.internship = internship;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putInternship_args(putInternship_args other) {
      if (other.isSetInternship()) {
        this.internship = new com.moseeker.thrift.gen.profile.struct.Internship(other.internship);
      }
    }

    public putInternship_args deepCopy() {
      return new putInternship_args(this);
    }

    @Override
    public void clear() {
      this.internship = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Internship getInternship() {
      return this.internship;
    }

    public putInternship_args setInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) {
      this.internship = internship;
      return this;
    }

    public void unsetInternship() {
      this.internship = null;
    }

    /** Returns true if field internship is set (has been assigned a value) and false otherwise */
    public boolean isSetInternship() {
      return this.internship != null;
    }

    public void setInternshipIsSet(boolean value) {
      if (!value) {
        this.internship = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERNSHIP:
        if (value == null) {
          unsetInternship();
        } else {
          setInternship((com.moseeker.thrift.gen.profile.struct.Internship)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERNSHIP:
        return getInternship();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERNSHIP:
        return isSetInternship();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putInternship_args)
        return this.equals((putInternship_args)that);
      return false;
    }

    public boolean equals(putInternship_args that) {
      if (that == null)
        return false;

      boolean this_present_internship = true && this.isSetInternship();
      boolean that_present_internship = true && that.isSetInternship();
      if (this_present_internship || that_present_internship) {
        if (!(this_present_internship && that_present_internship))
          return false;
        if (!this.internship.equals(that.internship))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_internship = true && (isSetInternship());
      list.add(present_internship);
      if (present_internship)
        list.add(internship);

      return list.hashCode();
    }

    @Override
    public int compareTo(putInternship_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInternship()).compareTo(other.isSetInternship());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternship()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internship, other.internship);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putInternship_args(");
      boolean first = true;

      sb.append("internship:");
      if (this.internship == null) {
        sb.append("null");
      } else {
        sb.append(this.internship);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (internship != null) {
        internship.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putInternship_argsStandardSchemeFactory implements SchemeFactory {
      public putInternship_argsStandardScheme getScheme() {
        return new putInternship_argsStandardScheme();
      }
    }

    private static class putInternship_argsStandardScheme extends StandardScheme<putInternship_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putInternship_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERNSHIP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
                struct.internship.read(iprot);
                struct.setInternshipIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putInternship_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.internship != null) {
          oprot.writeFieldBegin(INTERNSHIP_FIELD_DESC);
          struct.internship.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putInternship_argsTupleSchemeFactory implements SchemeFactory {
      public putInternship_argsTupleScheme getScheme() {
        return new putInternship_argsTupleScheme();
      }
    }

    private static class putInternship_argsTupleScheme extends TupleScheme<putInternship_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putInternship_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInternship()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInternship()) {
          struct.internship.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putInternship_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
          struct.internship.read(iprot);
          struct.setInternshipIsSet(true);
        }
      }
    }

  }

  public static class putInternship_result implements org.apache.thrift.TBase<putInternship_result, putInternship_result._Fields>, java.io.Serializable, Cloneable, Comparable<putInternship_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putInternship_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putInternship_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putInternship_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putInternship_result.class, metaDataMap);
    }

    public putInternship_result() {
    }

    public putInternship_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putInternship_result(putInternship_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public putInternship_result deepCopy() {
      return new putInternship_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public putInternship_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putInternship_result)
        return this.equals((putInternship_result)that);
      return false;
    }

    public boolean equals(putInternship_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putInternship_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putInternship_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putInternship_resultStandardSchemeFactory implements SchemeFactory {
      public putInternship_resultStandardScheme getScheme() {
        return new putInternship_resultStandardScheme();
      }
    }

    private static class putInternship_resultStandardScheme extends StandardScheme<putInternship_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putInternship_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putInternship_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putInternship_resultTupleSchemeFactory implements SchemeFactory {
      public putInternship_resultTupleScheme getScheme() {
        return new putInternship_resultTupleScheme();
      }
    }

    private static class putInternship_resultTupleScheme extends TupleScheme<putInternship_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putInternship_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putInternship_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delInternship_args implements org.apache.thrift.TBase<delInternship_args, delInternship_args._Fields>, java.io.Serializable, Cloneable, Comparable<delInternship_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delInternship_args");

    private static final org.apache.thrift.protocol.TField INTERNSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("internship", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delInternship_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delInternship_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.profile.struct.Internship internship; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERNSHIP((short)1, "internship");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERNSHIP
            return INTERNSHIP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERNSHIP, new org.apache.thrift.meta_data.FieldMetaData("internship", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Internship.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delInternship_args.class, metaDataMap);
    }

    public delInternship_args() {
    }

    public delInternship_args(
      com.moseeker.thrift.gen.profile.struct.Internship internship)
    {
      this();
      this.internship = internship;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delInternship_args(delInternship_args other) {
      if (other.isSetInternship()) {
        this.internship = new com.moseeker.thrift.gen.profile.struct.Internship(other.internship);
      }
    }

    public delInternship_args deepCopy() {
      return new delInternship_args(this);
    }

    @Override
    public void clear() {
      this.internship = null;
    }

    public com.moseeker.thrift.gen.profile.struct.Internship getInternship() {
      return this.internship;
    }

    public delInternship_args setInternship(com.moseeker.thrift.gen.profile.struct.Internship internship) {
      this.internship = internship;
      return this;
    }

    public void unsetInternship() {
      this.internship = null;
    }

    /** Returns true if field internship is set (has been assigned a value) and false otherwise */
    public boolean isSetInternship() {
      return this.internship != null;
    }

    public void setInternshipIsSet(boolean value) {
      if (!value) {
        this.internship = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERNSHIP:
        if (value == null) {
          unsetInternship();
        } else {
          setInternship((com.moseeker.thrift.gen.profile.struct.Internship)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERNSHIP:
        return getInternship();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERNSHIP:
        return isSetInternship();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delInternship_args)
        return this.equals((delInternship_args)that);
      return false;
    }

    public boolean equals(delInternship_args that) {
      if (that == null)
        return false;

      boolean this_present_internship = true && this.isSetInternship();
      boolean that_present_internship = true && that.isSetInternship();
      if (this_present_internship || that_present_internship) {
        if (!(this_present_internship && that_present_internship))
          return false;
        if (!this.internship.equals(that.internship))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_internship = true && (isSetInternship());
      list.add(present_internship);
      if (present_internship)
        list.add(internship);

      return list.hashCode();
    }

    @Override
    public int compareTo(delInternship_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInternship()).compareTo(other.isSetInternship());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternship()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internship, other.internship);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delInternship_args(");
      boolean first = true;

      sb.append("internship:");
      if (this.internship == null) {
        sb.append("null");
      } else {
        sb.append(this.internship);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (internship != null) {
        internship.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delInternship_argsStandardSchemeFactory implements SchemeFactory {
      public delInternship_argsStandardScheme getScheme() {
        return new delInternship_argsStandardScheme();
      }
    }

    private static class delInternship_argsStandardScheme extends StandardScheme<delInternship_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delInternship_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERNSHIP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
                struct.internship.read(iprot);
                struct.setInternshipIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delInternship_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.internship != null) {
          oprot.writeFieldBegin(INTERNSHIP_FIELD_DESC);
          struct.internship.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delInternship_argsTupleSchemeFactory implements SchemeFactory {
      public delInternship_argsTupleScheme getScheme() {
        return new delInternship_argsTupleScheme();
      }
    }

    private static class delInternship_argsTupleScheme extends TupleScheme<delInternship_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delInternship_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInternship()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInternship()) {
          struct.internship.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delInternship_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.internship = new com.moseeker.thrift.gen.profile.struct.Internship();
          struct.internship.read(iprot);
          struct.setInternshipIsSet(true);
        }
      }
    }

  }

  public static class delInternship_result implements org.apache.thrift.TBase<delInternship_result, delInternship_result._Fields>, java.io.Serializable, Cloneable, Comparable<delInternship_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delInternship_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delInternship_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delInternship_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delInternship_result.class, metaDataMap);
    }

    public delInternship_result() {
    }

    public delInternship_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delInternship_result(delInternship_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delInternship_result deepCopy() {
      return new delInternship_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delInternship_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delInternship_result)
        return this.equals((delInternship_result)that);
      return false;
    }

    public boolean equals(delInternship_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delInternship_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delInternship_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delInternship_resultStandardSchemeFactory implements SchemeFactory {
      public delInternship_resultStandardScheme getScheme() {
        return new delInternship_resultStandardScheme();
      }
    }

    private static class delInternship_resultStandardScheme extends StandardScheme<delInternship_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delInternship_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delInternship_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delInternship_resultTupleSchemeFactory implements SchemeFactory {
      public delInternship_resultTupleScheme getScheme() {
        return new delInternship_resultTupleScheme();
      }
    }

    private static class delInternship_resultTupleScheme extends TupleScheme<delInternship_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delInternship_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delInternship_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
