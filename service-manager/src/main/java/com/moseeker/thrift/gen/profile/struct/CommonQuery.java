/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-19")
public class CommonQuery implements org.apache.thrift.TBase<CommonQuery, CommonQuery._Fields>, java.io.Serializable, Cloneable, Comparable<CommonQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommonQuery");

  private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("per_page", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SORTBY_FIELD_DESC = new org.apache.thrift.protocol.TField("sortby", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NOCACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("nocache", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField COMPANYID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyid", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField EQUAL_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("equalFilter", org.apache.thrift.protocol.TType.MAP, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommonQueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommonQueryTupleSchemeFactory());
  }

  public int appid; // required
  public int limit; // optional
  public int offset; // optional
  public int page; // optional
  public int per_page; // optional
  public String sortby; // optional
  public String order; // optional
  public String fields; // optional
  public boolean nocache; // optional
  public int id; // optional
  public int userid; // optional
  public int companyid; // optional
  public Map<String,String> equalFilter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPID((short)1, "appid"),
    LIMIT((short)2, "limit"),
    OFFSET((short)3, "offset"),
    PAGE((short)4, "page"),
    PER_PAGE((short)5, "per_page"),
    SORTBY((short)6, "sortby"),
    ORDER((short)7, "order"),
    FIELDS((short)8, "fields"),
    NOCACHE((short)9, "nocache"),
    ID((short)10, "id"),
    USERID((short)11, "userid"),
    COMPANYID((short)12, "companyid"),
    EQUAL_FILTER((short)13, "equalFilter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPID
          return APPID;
        case 2: // LIMIT
          return LIMIT;
        case 3: // OFFSET
          return OFFSET;
        case 4: // PAGE
          return PAGE;
        case 5: // PER_PAGE
          return PER_PAGE;
        case 6: // SORTBY
          return SORTBY;
        case 7: // ORDER
          return ORDER;
        case 8: // FIELDS
          return FIELDS;
        case 9: // NOCACHE
          return NOCACHE;
        case 10: // ID
          return ID;
        case 11: // USERID
          return USERID;
        case 12: // COMPANYID
          return COMPANYID;
        case 13: // EQUAL_FILTER
          return EQUAL_FILTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPID_ISSET_ID = 0;
  private static final int __LIMIT_ISSET_ID = 1;
  private static final int __OFFSET_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __PER_PAGE_ISSET_ID = 4;
  private static final int __NOCACHE_ISSET_ID = 5;
  private static final int __ID_ISSET_ID = 6;
  private static final int __USERID_ISSET_ID = 7;
  private static final int __COMPANYID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LIMIT,_Fields.OFFSET,_Fields.PAGE,_Fields.PER_PAGE,_Fields.SORTBY,_Fields.ORDER,_Fields.FIELDS,_Fields.NOCACHE,_Fields.ID,_Fields.USERID,_Fields.COMPANYID,_Fields.EQUAL_FILTER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("per_page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORTBY, new org.apache.thrift.meta_data.FieldMetaData("sortby", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOCACHE, new org.apache.thrift.meta_data.FieldMetaData("nocache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANYID, new org.apache.thrift.meta_data.FieldMetaData("companyid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EQUAL_FILTER, new org.apache.thrift.meta_data.FieldMetaData("equalFilter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommonQuery.class, metaDataMap);
  }

  public CommonQuery() {
    this.limit = 10;

    this.nocache = false;

  }

  public CommonQuery(
    int appid)
  {
    this();
    this.appid = appid;
    setAppidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonQuery(CommonQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    this.appid = other.appid;
    this.limit = other.limit;
    this.offset = other.offset;
    this.page = other.page;
    this.per_page = other.per_page;
    if (other.isSetSortby()) {
      this.sortby = other.sortby;
    }
    if (other.isSetOrder()) {
      this.order = other.order;
    }
    if (other.isSetFields()) {
      this.fields = other.fields;
    }
    this.nocache = other.nocache;
    this.id = other.id;
    this.userid = other.userid;
    this.companyid = other.companyid;
    if (other.isSetEqualFilter()) {
      Map<String,String> __this__equalFilter = new HashMap<String,String>(other.equalFilter);
      this.equalFilter = __this__equalFilter;
    }
  }

  public CommonQuery deepCopy() {
    return new CommonQuery(this);
  }

  @Override
  public void clear() {
    setAppidIsSet(false);
    this.appid = 0;
    this.limit = 10;

    setOffsetIsSet(false);
    this.offset = 0;
    setPageIsSet(false);
    this.page = 0;
    setPer_pageIsSet(false);
    this.per_page = 0;
    this.sortby = null;
    this.order = null;
    this.fields = null;
    this.nocache = false;

    setIdIsSet(false);
    this.id = 0;
    setUseridIsSet(false);
    this.userid = 0;
    setCompanyidIsSet(false);
    this.companyid = 0;
    this.equalFilter = null;
  }

  public int getAppid() {
    return this.appid;
  }

  public CommonQuery setAppid(int appid) {
    this.appid = appid;
    setAppidIsSet(true);
    return this;
  }

  public void unsetAppid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appid is set (has been assigned a value) and false otherwise */
  public boolean isSetAppid() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public int getLimit() {
    return this.limit;
  }

  public CommonQuery setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getOffset() {
    return this.offset;
  }

  public CommonQuery setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CommonQuery setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getPer_page() {
    return this.per_page;
  }

  public CommonQuery setPer_page(int per_page) {
    this.per_page = per_page;
    setPer_pageIsSet(true);
    return this;
  }

  public void unsetPer_page() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PER_PAGE_ISSET_ID);
  }

  /** Returns true if field per_page is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_page() {
    return EncodingUtils.testBit(__isset_bitfield, __PER_PAGE_ISSET_ID);
  }

  public void setPer_pageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PER_PAGE_ISSET_ID, value);
  }

  public String getSortby() {
    return this.sortby;
  }

  public CommonQuery setSortby(String sortby) {
    this.sortby = sortby;
    return this;
  }

  public void unsetSortby() {
    this.sortby = null;
  }

  /** Returns true if field sortby is set (has been assigned a value) and false otherwise */
  public boolean isSetSortby() {
    return this.sortby != null;
  }

  public void setSortbyIsSet(boolean value) {
    if (!value) {
      this.sortby = null;
    }
  }

  public String getOrder() {
    return this.order;
  }

  public CommonQuery setOrder(String order) {
    this.order = order;
    return this;
  }

  public void unsetOrder() {
    this.order = null;
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return this.order != null;
  }

  public void setOrderIsSet(boolean value) {
    if (!value) {
      this.order = null;
    }
  }

  public String getFields() {
    return this.fields;
  }

  public CommonQuery setFields(String fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public boolean isNocache() {
    return this.nocache;
  }

  public CommonQuery setNocache(boolean nocache) {
    this.nocache = nocache;
    setNocacheIsSet(true);
    return this;
  }

  public void unsetNocache() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOCACHE_ISSET_ID);
  }

  /** Returns true if field nocache is set (has been assigned a value) and false otherwise */
  public boolean isSetNocache() {
    return EncodingUtils.testBit(__isset_bitfield, __NOCACHE_ISSET_ID);
  }

  public void setNocacheIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOCACHE_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public CommonQuery setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getUserid() {
    return this.userid;
  }

  public CommonQuery setUserid(int userid) {
    this.userid = userid;
    setUseridIsSet(true);
    return this;
  }

  public void unsetUserid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserid() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUseridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getCompanyid() {
    return this.companyid;
  }

  public CommonQuery setCompanyid(int companyid) {
    this.companyid = companyid;
    setCompanyidIsSet(true);
    return this;
  }

  public void unsetCompanyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyid is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyid() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getEqualFilterSize() {
    return (this.equalFilter == null) ? 0 : this.equalFilter.size();
  }

  public void putToEqualFilter(String key, String val) {
    if (this.equalFilter == null) {
      this.equalFilter = new HashMap<String,String>();
    }
    this.equalFilter.put(key, val);
  }

  public Map<String,String> getEqualFilter() {
    return this.equalFilter;
  }

  public CommonQuery setEqualFilter(Map<String,String> equalFilter) {
    this.equalFilter = equalFilter;
    return this;
  }

  public void unsetEqualFilter() {
    this.equalFilter = null;
  }

  /** Returns true if field equalFilter is set (has been assigned a value) and false otherwise */
  public boolean isSetEqualFilter() {
    return this.equalFilter != null;
  }

  public void setEqualFilterIsSet(boolean value) {
    if (!value) {
      this.equalFilter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PER_PAGE:
      if (value == null) {
        unsetPer_page();
      } else {
        setPer_page((Integer)value);
      }
      break;

    case SORTBY:
      if (value == null) {
        unsetSortby();
      } else {
        setSortby((String)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((String)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((String)value);
      }
      break;

    case NOCACHE:
      if (value == null) {
        unsetNocache();
      } else {
        setNocache((Boolean)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USERID:
      if (value == null) {
        unsetUserid();
      } else {
        setUserid((Integer)value);
      }
      break;

    case COMPANYID:
      if (value == null) {
        unsetCompanyid();
      } else {
        setCompanyid((Integer)value);
      }
      break;

    case EQUAL_FILTER:
      if (value == null) {
        unsetEqualFilter();
      } else {
        setEqualFilter((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPID:
      return Integer.valueOf(getAppid());

    case LIMIT:
      return Integer.valueOf(getLimit());

    case OFFSET:
      return Integer.valueOf(getOffset());

    case PAGE:
      return Integer.valueOf(getPage());

    case PER_PAGE:
      return Integer.valueOf(getPer_page());

    case SORTBY:
      return getSortby();

    case ORDER:
      return getOrder();

    case FIELDS:
      return getFields();

    case NOCACHE:
      return Boolean.valueOf(isNocache());

    case ID:
      return Integer.valueOf(getId());

    case USERID:
      return Integer.valueOf(getUserid());

    case COMPANYID:
      return Integer.valueOf(getCompanyid());

    case EQUAL_FILTER:
      return getEqualFilter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPID:
      return isSetAppid();
    case LIMIT:
      return isSetLimit();
    case OFFSET:
      return isSetOffset();
    case PAGE:
      return isSetPage();
    case PER_PAGE:
      return isSetPer_page();
    case SORTBY:
      return isSetSortby();
    case ORDER:
      return isSetOrder();
    case FIELDS:
      return isSetFields();
    case NOCACHE:
      return isSetNocache();
    case ID:
      return isSetId();
    case USERID:
      return isSetUserid();
    case COMPANYID:
      return isSetCompanyid();
    case EQUAL_FILTER:
      return isSetEqualFilter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonQuery)
      return this.equals((CommonQuery)that);
    return false;
  }

  public boolean equals(CommonQuery that) {
    if (that == null)
      return false;

    boolean this_present_appid = true;
    boolean that_present_appid = true;
    if (this_present_appid || that_present_appid) {
      if (!(this_present_appid && that_present_appid))
        return false;
      if (this.appid != that.appid)
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_per_page = true && this.isSetPer_page();
    boolean that_present_per_page = true && that.isSetPer_page();
    if (this_present_per_page || that_present_per_page) {
      if (!(this_present_per_page && that_present_per_page))
        return false;
      if (this.per_page != that.per_page)
        return false;
    }

    boolean this_present_sortby = true && this.isSetSortby();
    boolean that_present_sortby = true && that.isSetSortby();
    if (this_present_sortby || that_present_sortby) {
      if (!(this_present_sortby && that_present_sortby))
        return false;
      if (!this.sortby.equals(that.sortby))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (!this.order.equals(that.order))
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    boolean this_present_nocache = true && this.isSetNocache();
    boolean that_present_nocache = true && that.isSetNocache();
    if (this_present_nocache || that_present_nocache) {
      if (!(this_present_nocache && that_present_nocache))
        return false;
      if (this.nocache != that.nocache)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userid = true && this.isSetUserid();
    boolean that_present_userid = true && that.isSetUserid();
    if (this_present_userid || that_present_userid) {
      if (!(this_present_userid && that_present_userid))
        return false;
      if (this.userid != that.userid)
        return false;
    }

    boolean this_present_companyid = true && this.isSetCompanyid();
    boolean that_present_companyid = true && that.isSetCompanyid();
    if (this_present_companyid || that_present_companyid) {
      if (!(this_present_companyid && that_present_companyid))
        return false;
      if (this.companyid != that.companyid)
        return false;
    }

    boolean this_present_equalFilter = true && this.isSetEqualFilter();
    boolean that_present_equalFilter = true && that.isSetEqualFilter();
    if (this_present_equalFilter || that_present_equalFilter) {
      if (!(this_present_equalFilter && that_present_equalFilter))
        return false;
      if (!this.equalFilter.equals(that.equalFilter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_appid = true;
    list.add(present_appid);
    if (present_appid)
      list.add(appid);

    boolean present_limit = true && (isSetLimit());
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    boolean present_offset = true && (isSetOffset());
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_page = true && (isSetPage());
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_per_page = true && (isSetPer_page());
    list.add(present_per_page);
    if (present_per_page)
      list.add(per_page);

    boolean present_sortby = true && (isSetSortby());
    list.add(present_sortby);
    if (present_sortby)
      list.add(sortby);

    boolean present_order = true && (isSetOrder());
    list.add(present_order);
    if (present_order)
      list.add(order);

    boolean present_fields = true && (isSetFields());
    list.add(present_fields);
    if (present_fields)
      list.add(fields);

    boolean present_nocache = true && (isSetNocache());
    list.add(present_nocache);
    if (present_nocache)
      list.add(nocache);

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_userid = true && (isSetUserid());
    list.add(present_userid);
    if (present_userid)
      list.add(userid);

    boolean present_companyid = true && (isSetCompanyid());
    list.add(present_companyid);
    if (present_companyid)
      list.add(companyid);

    boolean present_equalFilter = true && (isSetEqualFilter());
    list.add(present_equalFilter);
    if (present_equalFilter)
      list.add(equalFilter);

    return list.hashCode();
  }

  @Override
  public int compareTo(CommonQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_page()).compareTo(other.isSetPer_page());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_page()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_page, other.per_page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortby()).compareTo(other.isSetSortby());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortby()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortby, other.sortby);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNocache()).compareTo(other.isSetNocache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNocache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nocache, other.nocache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyid()).compareTo(other.isSetCompanyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyid, other.companyid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEqualFilter()).compareTo(other.isSetEqualFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEqualFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.equalFilter, other.equalFilter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonQuery(");
    boolean first = true;

    sb.append("appid:");
    sb.append(this.appid);
    first = false;
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
    }
    if (isSetPer_page()) {
      if (!first) sb.append(", ");
      sb.append("per_page:");
      sb.append(this.per_page);
      first = false;
    }
    if (isSetSortby()) {
      if (!first) sb.append(", ");
      sb.append("sortby:");
      if (this.sortby == null) {
        sb.append("null");
      } else {
        sb.append(this.sortby);
      }
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
    }
    if (isSetFields()) {
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
    }
    if (isSetNocache()) {
      if (!first) sb.append(", ");
      sb.append("nocache:");
      sb.append(this.nocache);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetUserid()) {
      if (!first) sb.append(", ");
      sb.append("userid:");
      sb.append(this.userid);
      first = false;
    }
    if (isSetCompanyid()) {
      if (!first) sb.append(", ");
      sb.append("companyid:");
      sb.append(this.companyid);
      first = false;
    }
    if (isSetEqualFilter()) {
      if (!first) sb.append(", ");
      sb.append("equalFilter:");
      if (this.equalFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.equalFilter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommonQueryStandardSchemeFactory implements SchemeFactory {
    public CommonQueryStandardScheme getScheme() {
      return new CommonQueryStandardScheme();
    }
  }

  private static class CommonQueryStandardScheme extends StandardScheme<CommonQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommonQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appid = iprot.readI32();
              struct.setAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PER_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.per_page = iprot.readI32();
              struct.setPer_pageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SORTBY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortby = iprot.readString();
              struct.setSortbyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.order = iprot.readString();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fields = iprot.readString();
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NOCACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.nocache = iprot.readBool();
              struct.setNocacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userid = iprot.readI32();
              struct.setUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMPANYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyid = iprot.readI32();
              struct.setCompanyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EQUAL_FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.equalFilter = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.equalFilter.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setEqualFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommonQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPID_FIELD_DESC);
      oprot.writeI32(struct.appid);
      oprot.writeFieldEnd();
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPage()) {
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPer_page()) {
        oprot.writeFieldBegin(PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.per_page);
        oprot.writeFieldEnd();
      }
      if (struct.sortby != null) {
        if (struct.isSetSortby()) {
          oprot.writeFieldBegin(SORTBY_FIELD_DESC);
          oprot.writeString(struct.sortby);
          oprot.writeFieldEnd();
        }
      }
      if (struct.order != null) {
        if (struct.isSetOrder()) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          oprot.writeString(struct.order);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fields != null) {
        if (struct.isSetFields()) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          oprot.writeString(struct.fields);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNocache()) {
        oprot.writeFieldBegin(NOCACHE_FIELD_DESC);
        oprot.writeBool(struct.nocache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserid()) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeI32(struct.userid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyid()) {
        oprot.writeFieldBegin(COMPANYID_FIELD_DESC);
        oprot.writeI32(struct.companyid);
        oprot.writeFieldEnd();
      }
      if (struct.equalFilter != null) {
        if (struct.isSetEqualFilter()) {
          oprot.writeFieldBegin(EQUAL_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.equalFilter.size()));
            for (Map.Entry<String, String> _iter4 : struct.equalFilter.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommonQueryTupleSchemeFactory implements SchemeFactory {
    public CommonQueryTupleScheme getScheme() {
      return new CommonQueryTupleScheme();
    }
  }

  private static class CommonQueryTupleScheme extends TupleScheme<CommonQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommonQuery struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppid()) {
        optionals.set(0);
      }
      if (struct.isSetLimit()) {
        optionals.set(1);
      }
      if (struct.isSetOffset()) {
        optionals.set(2);
      }
      if (struct.isSetPage()) {
        optionals.set(3);
      }
      if (struct.isSetPer_page()) {
        optionals.set(4);
      }
      if (struct.isSetSortby()) {
        optionals.set(5);
      }
      if (struct.isSetOrder()) {
        optionals.set(6);
      }
      if (struct.isSetFields()) {
        optionals.set(7);
      }
      if (struct.isSetNocache()) {
        optionals.set(8);
      }
      if (struct.isSetId()) {
        optionals.set(9);
      }
      if (struct.isSetUserid()) {
        optionals.set(10);
      }
      if (struct.isSetCompanyid()) {
        optionals.set(11);
      }
      if (struct.isSetEqualFilter()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetAppid()) {
        oprot.writeI32(struct.appid);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPer_page()) {
        oprot.writeI32(struct.per_page);
      }
      if (struct.isSetSortby()) {
        oprot.writeString(struct.sortby);
      }
      if (struct.isSetOrder()) {
        oprot.writeString(struct.order);
      }
      if (struct.isSetFields()) {
        oprot.writeString(struct.fields);
      }
      if (struct.isSetNocache()) {
        oprot.writeBool(struct.nocache);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUserid()) {
        oprot.writeI32(struct.userid);
      }
      if (struct.isSetCompanyid()) {
        oprot.writeI32(struct.companyid);
      }
      if (struct.isSetEqualFilter()) {
        {
          oprot.writeI32(struct.equalFilter.size());
          for (Map.Entry<String, String> _iter5 : struct.equalFilter.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommonQuery struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.appid = iprot.readI32();
        struct.setAppidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.per_page = iprot.readI32();
        struct.setPer_pageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sortby = iprot.readString();
        struct.setSortbyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.order = iprot.readString();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fields = iprot.readString();
        struct.setFieldsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.nocache = iprot.readBool();
        struct.setNocacheIsSet(true);
      }
      if (incoming.get(9)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userid = iprot.readI32();
        struct.setUseridIsSet(true);
      }
      if (incoming.get(11)) {
        struct.companyid = iprot.readI32();
        struct.setCompanyidIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.equalFilter = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.equalFilter.put(_key7, _val8);
          }
        }
        struct.setEqualFilterIsSet(true);
      }
    }
  }

}

